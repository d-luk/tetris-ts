{"version":3,"sources":["webpack:///index.js","webpack:///webpack/bootstrap fbf57833cb29c0dfcd2c","webpack:///./src/services/player-score.ts","webpack:///./src/services/draw-grid.ts","webpack:///./src/models/color.ts","webpack:///./src/services/draw-matrix.ts","webpack:///./src/interfaces/point.ts","webpack:///./src/services/arrays.ts","webpack:///./src/services/matrix-calculations.ts","webpack:///./src/services/ghost-matrix.ts","webpack:///./src/services/view-matrix.ts","webpack:///./src/services/key-handling.ts","webpack:///./src/services/random-shape.ts","webpack:///./src/services/game-over.ts","webpack:///./src/services/gameloop.ts","webpack:///./src/components/player-score.ts","webpack:///./src/settings.ts","webpack:///./src/components/panel.ts","webpack:///./src/models/board.ts","webpack:///./src/services/timer.ts","webpack:///./src/services/unique-array.ts","webpack:///./src/models/shape.ts","webpack:///./src/models/shapes/i.ts","webpack:///./src/models/shapes/j.ts","webpack:///./src/models/shapes/l.ts","webpack:///./src/models/shapes/o.ts","webpack:///./src/models/shapes/s.ts","webpack:///./src/models/shapes/t.ts","webpack:///./src/models/shapes/z.ts","webpack:///./src/models/player.ts","webpack:///./src/services/storage.ts","webpack:///./src/index.ts","webpack:///./node_modules/hammerjs/hammer.js","webpack:///./src/vendor/modernizr.min.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","addScore","points","currentScore","triggerScoreChange","resetScore","onScoreChange","handler","triggerOnInit","subscribers","push","forEach","drawGrid","panel","gridSize","tileSize","width","size","height","ctx","strokeStyle","lineWidth","pixelRatio","x","beginPath","moveTo","lineTo","stroke","y","getColorCode","color","drawMatrix","matrix","length","col","item","src_settings","debug","drawEmptyTiles","fillStyle","emptyColor","fillRect","Math","ceil","clonePoint","point","pointEquals","a","b","findIndex","array","predicate","findAny","createMatrix","result","Array","copyMatrix","reduce","slice","getMatrixSize","matrixEquals","m1","m2","value","mergeMatrixes","parent","child","target","childMatrix","position","j","xyMatrix","rotateMatrix","reverse","matrixContains","matrixesColliding","getUnstuckPosition","isColliding","shape","maxOffset","pos","createGhost","board","pm","collides","map","ghostColor","getViewMatrix","playerMatrix","storage_player","blocks","ghost","storage_board","movePiece","deltaX","reset","canvasWidth","storage_panel","canvas","offsetWidth","tileWidth","colStart","newCol","floor","deltaCol","handleKeyDown","resetControls","keysDown","remove","keyCode","repeated","newPosition","beforeMatrix","triggered","hardDropped","rotate","unstuckPos","bind","sdPoints","softDrop","softDropPoints","softDropMax","nextPos","hdPoints","hardDrop","min","hardDropMax","posChanged","newMatrix","placePiece","rotationChanged","stopLockTimeout","draw","getRandomShape","Shape","shapes","random","gameOver","clear","place","linesCleared","clearFullLines","lockTimeout","stop","update","newPos","start","scoreEl","interval","currentSeconds","settings","gameSpeed","1","2","3","4","placementTimeout","emptyTileColor","panel_Panel","Panel","id","document","getElementById","this","devicePixelRatio","parseInt","getAttribute","setAttribute","offsetHeight","getContext","Error","clearRect","components_panel","board_Board","Board","_blocks","_this","fullRows","getFullLines","row","deleteRow","rowCount","incompleteRows","rows","_i","_a","splice","unshift","undefined","contains","models_board","hammer","Timer","repeat","_running","_handler","_interval","_repeat","executeOnInit","_handle","setInterval","setTimeout","clearInterval","clearTimeout","timer","UniqueArray","_array","add","index","indexOf","unique_array","keyInterval","values","code","keyThresholdTimer","shape_Shape","models_shape","__extends","extendStatics","setPrototypeOf","__proto__","__","constructor","create","i_I","_super","I","shapes_i","j___extends","j_c","j_J","J","l___extends","l_c","l_L","L","o___extends","o_c","o_O","O","s___extends","s_c","s_S","S","t___extends","t_c","t_T","T","t","z___extends","z_c","z_Z","Z","z","player_Player","Player","startingPosition","_startingPos","_shape","player","boardSize","seconds","window","running","addEventListener","e","preventDefault","count","Modernizr","touchevents","mc","body","direction","threshold","on","isFirst","score","textContent","toLocaleString","__WEBPACK_AMD_DEFINE_RESULT__","exportName","setTimeoutContext","fn","timeout","context","bindFn","invokeArrayArg","arg","isArray","each","obj","iterator","deprecate","method","message","deprecationMessage","stack","replace","log","console","warn","apply","arguments","inherit","base","properties","childP","baseP","assign","boolOrFn","val","args","TYPE_FUNCTION","ifUndefined","val1","val2","addEventListeners","types","splitStr","type","removeEventListeners","removeEventListener","hasParent","node","parentNode","inStr","str","find","trim","split","inArray","src","findByKey","toArray","uniqueArray","key","sort","results","prefixed","prefix","prop","camelProp","toUpperCase","VENDOR_PREFIXES","uniqueId","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","Input","manager","callback","self","options","inputTarget","domHandler","ev","enable","init","createInputInstance","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","SUPPORT_ONLY_TOUCH","TouchInput","SUPPORT_TOUCH","TouchMouseInput","MouseInput","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","INPUT_START","isFinal","INPUT_END","INPUT_CANCEL","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","now","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offsetDirection","getDirection","deltaY","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","abs","scale","getScale","rotation","getRotation","maxPointers","computeIntervalInputData","srcEvent","offset","offsetDelta","prevDelta","velocity","velocityX","velocityY","last","lastInterval","COMPUTE_INTERVAL","v","clientX","round","clientY","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","p1","p2","props","PROPS_XY","sqrt","atan2","PI","end","PROPS_CLIENT_XY","evEl","MOUSE_ELEMENT_EVENTS","evWin","MOUSE_WINDOW_EVENTS","pressed","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","SingleTouchInput","evTarget","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_TARGET_EVENTS","targetIds","getTouches","allTouches","INPUT_MOVE","identifier","targetTouches","changedTargetTouches","filter","touch","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","removeLastTouch","DEDUP_TIMEOUT","isSyntheticEvent","dx","dy","DEDUP_DISTANCE","TouchAction","set","cleanTouchActions","actions","TOUCH_ACTION_NONE","hasPanX","TOUCH_ACTION_PAN_X","hasPanY","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_AUTO","Recognizer","defaults","state","STATE_POSSIBLE","simultaneous","requireFail","stateStr","STATE_CANCELLED","STATE_ENDED","STATE_CHANGED","STATE_BEGAN","directionStr","getRecognizerByNameIfManager","otherRecognizer","recognizer","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","Hammer","recognizers","preset","Manager","handlers","oldCssProps","touchAction","toggleCssProps","recognizeWith","requireFailure","style","cssProps","triggerDomEvent","event","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","TEST_ELEMENT","createElement","Date","TypeError","output","source","nextKey","extend","dest","merge","keys","MOBILE_REGEX","test","navigator","userAgent","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","5","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TOUCH_INPUT_MAP","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","NATIVE_TOUCH_ACTION","TOUCH_ACTION_MAP","touchMap","cssSupports","CSS","supports","compute","getTouchAction","join","preventDefaults","prevented","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_RECOGNIZED","dropRecognizeWith","dropRequireFailure","hasRequireFailures","canRecognizeWith","additionalEvent","tryEmit","canEmit","inputDataClone","process","attrTest","optionPointers","isRecognized","isValid","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","taps","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","force","stopped","curRecognizer","existing","events","off","STATE_FAILED","Tap","Pan","Swipe","Pinch","Rotate","Press","u","createElementNS","fake","r","appendChild","styleSheet","cssText","createTextNode","background","overflow","f","removeChild","_version","_config","classPrefix","enableClasses","enableJSClass","usePrefixes","_q","addTest","addAsyncTest","localStorage","setItem","removeItem","sessionStorage","documentElement","nodeName","_prefixes","testStyles","DocumentTouch","offsetTop","aliases","Boolean"],"mappings":"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","file":"index.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./src/services/player-score.ts\nvar currentScore = 0;\r\nfunction addScore(points) {\r\n    currentScore += points;\r\n    triggerScoreChange();\r\n}\r\nfunction resetScore() {\r\n    currentScore = 0;\r\n    triggerScoreChange();\r\n}\r\nvar subscribers = [];\r\nfunction onScoreChange(handler, triggerOnInit) {\r\n    if (triggerOnInit === void 0) { triggerOnInit = false; }\r\n    subscribers.push(handler);\r\n    if (triggerOnInit)\r\n        handler(currentScore);\r\n}\r\nfunction triggerScoreChange() {\r\n    subscribers.forEach(function (handler) { return handler(currentScore); });\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/player-score.ts\n\r\nvar scoreEl;\r\nfunction loadPlayerScore() {\r\n    scoreEl = document.getElementById('player-score');\r\n    onScoreChange(function (score) {\r\n        scoreEl.textContent = score.toLocaleString();\r\n    }, true);\r\n}\r\n\n// CONCATENATED MODULE: ./src/settings.ts\nvar settings = {\r\n    gameSpeed: 0.4,\r\n    points: {\r\n        linesCleared: {\r\n            1: 40,\r\n            2: 100,\r\n            3: 300,\r\n            4: 1200\r\n        },\r\n        softDrop: 1,\r\n        hardDrop: 2,\r\n        softDropMax: 20,\r\n        hardDropMax: 40\r\n    },\r\n    placementTimeout: 0.5,\r\n    debug: {\r\n        drawEmptyTiles: false,\r\n        emptyTileColor: '#f1f1f1'\r\n    }\r\n};\r\n/* harmony default export */ var src_settings = (settings);\r\n\n// CONCATENATED MODULE: ./src/services/draw-grid.ts\nfunction drawGrid(panel, gridSize) {\r\n    var tileSize = {\r\n        width: panel.size.width / gridSize.width,\r\n        height: panel.size.height / gridSize.height\r\n    };\r\n    var ctx = panel.ctx;\r\n    ctx.strokeStyle = '#efefef';\r\n    ctx.lineWidth = panel.pixelRatio;\r\n    for (var x = 0; x < panel.size.width; x += tileSize.width) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, 0);\r\n        ctx.lineTo(x, panel.size.height);\r\n        ctx.stroke();\r\n    }\r\n    for (var y = 0; y < panel.size.height; y += tileSize.height) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, y);\r\n        ctx.lineTo(panel.size.width, y);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/models/color.ts\nfunction getColorCode(color) {\r\n    switch (color) {\r\n        case 1:\r\n            return '#ffeb3b';\r\n        case 2:\r\n            return '#03a9f4';\r\n        case 3:\r\n            return '#f44336';\r\n        case 4:\r\n            return '#4caf50';\r\n        case 5:\r\n            return '#ff9800';\r\n        case 6:\r\n            return '#fbafbc';\r\n        case 7:\r\n            return '#9c27b0';\r\n        case 8:\r\n            return '#e0e0e0';\r\n        default:\r\n            return '#000';\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/draw-matrix.ts\n\r\n\r\nvar emptyColor = src_settings.debug.emptyTileColor;\r\nfunction drawMatrix(panel, matrix) {\r\n    var ctx = panel.ctx;\r\n    var tileSize = {\r\n        width: panel.size.width / matrix.length,\r\n        height: panel.size.height / matrix[0].length\r\n    };\r\n    matrix.forEach(function (col, x) { return col.forEach(function (item, y) {\r\n        if (typeof item === 'undefined' ||\r\n            !src_settings.debug.drawEmptyTiles && !item)\r\n            return;\r\n        ctx.fillStyle = item ? getColorCode(item) : emptyColor;\r\n        ctx.fillRect(x * tileSize.width | 0, y * tileSize.height | 0, Math.ceil(tileSize.width), Math.ceil(tileSize.height));\r\n    }); });\r\n}\r\n\n// CONCATENATED MODULE: ./src/interfaces/point.ts\nfunction clonePoint(point) {\r\n    return { x: point.x, y: point.y };\r\n}\r\nfunction pointEquals(a, b) {\r\n    return a.x === b.x && a.y === b.y;\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/arrays.ts\nfunction findIndex(array, predicate) {\r\n    for (var i = 0; i < array.length; i++) {\r\n        var value = array[i];\r\n        if (predicate(value, i)) {\r\n            return i;\r\n        }\r\n    }\r\n}\r\nfunction findAny(array, predicate) {\r\n    return typeof findIndex(array, predicate) !== 'undefined';\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/matrix-calculations.ts\n\r\n\r\nfunction createMatrix(size) {\r\n    var result = [];\r\n    for (var col = 0; col < size.width; col++) {\r\n        result[col] = new Array(size.height);\r\n    }\r\n    return result;\r\n}\r\nfunction copyMatrix(matrix) {\r\n    return matrix.reduce(function (result, col, x) {\r\n        result[x] = col.slice();\r\n        return result;\r\n    }, []);\r\n}\r\nfunction getMatrixSize(matrix) {\r\n    return {\r\n        width: matrix.length,\r\n        height: matrix[0].length\r\n    };\r\n}\r\nfunction matrixEquals(m1, m2) {\r\n    if (m1.length !== m2.length\r\n        || m1[0].length !== m2[0].length) {\r\n        return false;\r\n    }\r\n    return !findAny(m1, function (col, x) {\r\n        return findAny(col, function (value, y) {\r\n            return value !== m2[x][y];\r\n        });\r\n    });\r\n}\r\nfunction mergeMatrixes(parent, child, target) {\r\n    if (target === void 0) { target = copyMatrix(parent); }\r\n    var childMatrix = child.matrix, position = child.position;\r\n    var result = target;\r\n    for (var i = 0; i < childMatrix.length; i++) {\r\n        for (var j = 0; j < childMatrix[0].length; j++) {\r\n            var value = childMatrix[i][j];\r\n            if (typeof value === 'undefined')\r\n                continue;\r\n            var x = i + position.x;\r\n            var y = j + position.y;\r\n            if (x >= 0 && x < parent.length &&\r\n                y >= 0 && y < parent[0].length &&\r\n                (value || !result[x][y])) {\r\n                result[x][y] = value;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction xyMatrix(matrix) {\r\n    return rotateMatrix(matrix)\r\n        .reduce(function (result, col, x) {\r\n        result[x] = col.reverse();\r\n        return result;\r\n    }, []);\r\n}\r\nfunction rotateMatrix(matrix, reverse) {\r\n    if (reverse === void 0) { reverse = false; }\r\n    var l = matrix.length;\r\n    var result = createMatrix({ width: l, height: l });\r\n    for (var x = 0; x < l; x++) {\r\n        for (var y = 0; y < l; y++) {\r\n            result[x][y] = reverse\r\n                ? matrix[l - y - 1][x]\r\n                : matrix[y][l - x - 1];\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction matrixContains(parent, child) {\r\n    var childMatrix = child.matrix, position = child.position;\r\n    for (var i = 0; i < childMatrix.length; i++) {\r\n        var col = childMatrix[i];\r\n        for (var j = 0; j < col.length; j++) {\r\n            if (!col[j])\r\n                continue;\r\n            var x = i + position.x;\r\n            var y = j + position.y;\r\n            if (x < 0 || x >= parent.length ||\r\n                y < 0 || y >= parent[0].length) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction matrixesColliding(parent, child) {\r\n    var childMatrix = child.matrix, position = child.position;\r\n    for (var x = 0; x < childMatrix.length; x++) {\r\n        for (var y = 0; y < childMatrix[0].length; y++) {\r\n            if (!childMatrix[x][y])\r\n                continue;\r\n            var col = parent[x + position.x];\r\n            if (!col)\r\n                continue;\r\n            if (col[y + position.y]) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction getUnstuckPosition(matrix, isColliding) {\r\n    var shape = matrix.matrix, position = matrix.position;\r\n    var maxOffset = Math.ceil(shape.length / 2);\r\n    for (var i = 1; i <= maxOffset; i++) {\r\n        var pos = clonePoint(position);\r\n        pos.y += i;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        }))\r\n            return pos;\r\n        pos.y -= i * 2;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        }))\r\n            return pos;\r\n        pos.y += i;\r\n        pos.x += i;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        }))\r\n            return pos;\r\n        pos.x -= i * 2;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        }))\r\n            return pos;\r\n        pos.x += i;\r\n    }\r\n    return null;\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/panel.ts\n\r\n\r\n\r\nvar panel_Panel = (function () {\r\n    function Panel(id) {\r\n        var canvas = document.getElementById(id);\r\n        this.pixelRatio = devicePixelRatio || 1;\r\n        this.size = {\r\n            width: parseInt(canvas.getAttribute('width'), 10) * this.pixelRatio,\r\n            height: parseInt(canvas.getAttribute('height'), 10) * this.pixelRatio\r\n        };\r\n        if (this.size.width !== canvas.offsetWidth) {\r\n            canvas.setAttribute('width', \"\" + this.size.width);\r\n        }\r\n        if (this.size.height !== canvas.offsetHeight) {\r\n            canvas.setAttribute('height', \"\" + this.size.height);\r\n        }\r\n        var ctx = canvas.getContext('2d');\r\n        if (!ctx)\r\n            throw new Error('Context not found!');\r\n        this.ctx = ctx;\r\n        this.canvas = canvas;\r\n    }\r\n    Panel.prototype.draw = function (matrix) {\r\n        this.clear();\r\n        drawGrid(this, getMatrixSize(matrix));\r\n        drawMatrix(this, matrix);\r\n    };\r\n    Panel.prototype.clear = function () {\r\n        this.ctx.clearRect(0, 0, this.size.width, this.size.height);\r\n    };\r\n    return Panel;\r\n}());\r\n/* harmony default export */ var components_panel = (panel_Panel);\r\n\n// CONCATENATED MODULE: ./src/models/board.ts\n\r\nvar board_Board = (function () {\r\n    function Board(size) {\r\n        this.size = size;\r\n        this.clear();\r\n    }\r\n    Object.defineProperty(Board.prototype, \"blocks\", {\r\n        get: function () { return this._blocks; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Board.prototype.place = function (shape, position) {\r\n        mergeMatrixes(this.blocks, {\r\n            matrix: shape.blocks,\r\n            position: position\r\n        }, this.blocks);\r\n    };\r\n    Board.prototype.clearFullLines = function () {\r\n        var _this = this;\r\n        var fullRows = this.getFullLines();\r\n        fullRows.forEach(function (row) { return _this.deleteRow(row); });\r\n        return fullRows.length;\r\n    };\r\n    Board.prototype.getFullLines = function () {\r\n        var rowCount = this._blocks[0].length;\r\n        var incompleteRows = new Array(rowCount - 1);\r\n        rows: for (var y = 0; y < rowCount; y++) {\r\n            for (var _i = 0, _a = this._blocks; _i < _a.length; _i++) {\r\n                var col = _a[_i];\r\n                if (!col[y]) {\r\n                    incompleteRows[y] = true;\r\n                    continue rows;\r\n                }\r\n            }\r\n        }\r\n        var result = [];\r\n        for (var row = 0; row < rowCount; row++) {\r\n            if (!incompleteRows[row])\r\n                result.push(row);\r\n        }\r\n        return result;\r\n    };\r\n    Board.prototype.deleteRow = function (row) {\r\n        this._blocks.forEach(function (col) {\r\n            col.splice(row, 1);\r\n            col.unshift(undefined);\r\n        });\r\n    };\r\n    Board.prototype.clear = function () {\r\n        this._blocks = [];\r\n        for (var x = 0; x < this.size.width; x++) {\r\n            this._blocks[x] = new Array(this.size.height);\r\n        }\r\n    };\r\n    Board.prototype.contains = function (matrix) {\r\n        return matrixContains(this._blocks, matrix);\r\n    };\r\n    Board.prototype.collides = function (matrix) {\r\n        return !this.contains(matrix)\r\n            || matrixesColliding(this.blocks, matrix);\r\n    };\r\n    return Board;\r\n}());\r\n/* harmony default export */ var models_board = (board_Board);\r\n\n// EXTERNAL MODULE: ./node_modules/hammerjs/hammer.js\nvar hammer = __webpack_require__(1);\nvar hammer_default = /*#__PURE__*/__webpack_require__.n(hammer);\n\n// CONCATENATED MODULE: ./src/services/timer.ts\nvar Timer = (function () {\r\n    function Timer(handler, interval, repeat) {\r\n        if (repeat === void 0) { repeat = true; }\r\n        this._running = false;\r\n        this._handler = handler;\r\n        this._interval = interval;\r\n        this._repeat = repeat;\r\n    }\r\n    Object.defineProperty(Timer.prototype, \"running\", {\r\n        get: function () { return this._running; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Timer.prototype.start = function (executeOnInit) {\r\n        var _this = this;\r\n        if (executeOnInit === void 0) { executeOnInit = false; }\r\n        if (executeOnInit) {\r\n            this._handler();\r\n            if (!this._repeat)\r\n                return;\r\n        }\r\n        this.stop();\r\n        this._handle = (this._repeat\r\n            ? setInterval\r\n            : setTimeout)(function () {\r\n            _this._handler();\r\n            _this._running = false;\r\n        }, this._interval);\r\n        this._running = true;\r\n    };\r\n    Timer.prototype.stop = function () {\r\n        this._handle = (this._repeat\r\n            ? clearInterval\r\n            : clearTimeout)(this._handle);\r\n        this._running = false;\r\n    };\r\n    return Timer;\r\n}());\r\n/* harmony default export */ var timer = (Timer);\r\n\n// CONCATENATED MODULE: ./src/services/unique-array.ts\nvar UniqueArray = (function () {\r\n    function UniqueArray() {\r\n        this._array = [];\r\n    }\r\n    Object.defineProperty(UniqueArray.prototype, \"count\", {\r\n        get: function () { return this._array.length; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UniqueArray.prototype, \"values\", {\r\n        get: function () { return this._array; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    UniqueArray.prototype.add = function (value) {\r\n        if (!this.contains(value)) {\r\n            this._array.push(value);\r\n        }\r\n    };\r\n    UniqueArray.prototype.remove = function (value) {\r\n        var index = this._array.indexOf(value);\r\n        if (index >= 0) {\r\n            this._array.splice(index, 1);\r\n        }\r\n    };\r\n    UniqueArray.prototype.contains = function (value) {\r\n        return this._array.indexOf(value) >= 0;\r\n    };\r\n    return UniqueArray;\r\n}());\r\n/* harmony default export */ var unique_array = (UniqueArray);\r\n\n// CONCATENATED MODULE: ./src/services/ghost-matrix.ts\n\r\nvar ghostColor = 8;\r\nfunction createGhost(board, pm) {\r\n    var matrix = pm.matrix;\r\n    var position = clonePoint(pm.position);\r\n    var y = position.y;\r\n    do {\r\n        y++;\r\n    } while (!board.collides({\r\n        matrix: matrix,\r\n        position: { x: position.x, y: y }\r\n    }));\r\n    position.y = y - 1;\r\n    var ghost = matrix.map(function (col) { return col.map(function (x) {\r\n        if (x)\r\n            return ghostColor;\r\n    }); });\r\n    return { matrix: ghost, position: position };\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/view-matrix.ts\n\r\n\r\n\r\nfunction getViewMatrix() {\r\n    var playerMatrix = {\r\n        matrix: storage_player.shape.blocks,\r\n        position: storage_player.position\r\n    };\r\n    var ghost = createGhost(storage_board, playerMatrix);\r\n    return mergeMatrixes(mergeMatrixes(storage_board.blocks, ghost), playerMatrix);\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/key-handling.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar keysDown = new unique_array();\r\nvar keyInterval = new timer(function () {\r\n    keysDown.values.forEach(function (code) {\r\n        handleKeyDown(code, true);\r\n    });\r\n}, 90);\r\nvar keyThresholdTimer = new timer(function () {\r\n    keyInterval.start();\r\n}, 200, false);\r\nfunction handleInput() {\r\n    document.addEventListener('keydown', function (e) {\r\n        if (e.repeat)\r\n            return;\r\n        var keyCode = e.code;\r\n        if (handleKeyDown(keyCode, false)) {\r\n            e.preventDefault();\r\n            keysDown.add(keyCode);\r\n            if (keyCode === 'ArrowLeft' || keyCode === 'ArrowRight') {\r\n                keyInterval.stop();\r\n                keyThresholdTimer.start();\r\n            }\r\n            else\r\n                keyInterval.start();\r\n        }\r\n    });\r\n    document.addEventListener('keyup', function (e) {\r\n        if (keysDown.contains(e.code)) {\r\n            keysDown.remove(e.code);\r\n            if (keysDown.count === 0) {\r\n                keyThresholdTimer.stop();\r\n                keyInterval.stop();\r\n            }\r\n        }\r\n    });\r\n    if (!Modernizr.touchevents)\r\n        return;\r\n    var mc = new hammer[\"Manager\"](document.body);\r\n    mc.add(new hammer[\"Tap\"]());\r\n    mc.add(new hammer[\"Swipe\"]({ direction: hammer[\"DIRECTION_DOWN\"] }));\r\n    mc.add(new hammer[\"Pan\"]({ direction: hammer[\"DIRECTION_HORIZONTAL\"], threshold: 20 }));\r\n    mc.on('tap', function () { return handleKeyDown('ArrowUp', false); });\r\n    mc.on('swipedown', function () { return handleKeyDown('Space', false); });\r\n    var isFirst = true;\r\n    mc.on('panstart', function () { return isFirst = true; });\r\n    mc.on('panleft', function (e) {\r\n        movePiece(e.deltaX, isFirst);\r\n        if (isFirst)\r\n            isFirst = false;\r\n    });\r\n    mc.on('panright', function (e) {\r\n        movePiece(e.deltaX, isFirst);\r\n        if (isFirst)\r\n            isFirst = false;\r\n    });\r\n}\r\nvar colStart;\r\nfunction movePiece(deltaX, reset) {\r\n    var canvasWidth = storage_panel.canvas.offsetWidth;\r\n    var tileWidth = canvasWidth / storage_board.size.width;\r\n    if (reset || typeof colStart === 'undefined') {\r\n        colStart = storage_player.position.x - deltaX / tileWidth;\r\n    }\r\n    var newCol = Math.floor(colStart + deltaX / tileWidth);\r\n    if (newCol === colStart)\r\n        return;\r\n    var deltaCol = storage_player.position.x - newCol;\r\n    if (deltaCol > 0) {\r\n        for (var i = 0; i < deltaCol; i++) {\r\n            handleKeyDown('ArrowLeft', false);\r\n        }\r\n    }\r\n    else {\r\n        for (var i = 0; i > deltaCol; i--) {\r\n            handleKeyDown('ArrowRight', false);\r\n        }\r\n    }\r\n}\r\nfunction resetControls() {\r\n    keysDown.remove('ArrowDown');\r\n}\r\nfunction handleKeyDown(keyCode, repeated) {\r\n    var newPosition = {\r\n        x: storage_player.position.x,\r\n        y: storage_player.position.y\r\n    };\r\n    var beforeMatrix = copyMatrix(storage_player.shape.blocks);\r\n    var triggered = true;\r\n    var hardDropped = false;\r\n    switch (keyCode) {\r\n        case 'ArrowUp':\r\n            if (repeated)\r\n                return true;\r\n            storage_player.shape.rotate();\r\n            var playerMatrix = {\r\n                matrix: storage_player.shape.blocks,\r\n                position: newPosition\r\n            };\r\n            if (storage_board.collides(playerMatrix)) {\r\n                var unstuckPos = getUnstuckPosition(playerMatrix, storage_board.collides.bind(storage_board));\r\n                if (!unstuckPos) {\r\n                    storage_player.shape.rotate(true);\r\n                }\r\n                else {\r\n                    newPosition = unstuckPos;\r\n                }\r\n            }\r\n            break;\r\n        case 'ArrowRight':\r\n            newPosition.x++;\r\n            break;\r\n        case 'ArrowDown':\r\n            newPosition.y++;\r\n            var sdPoints = src_settings.points.softDrop;\r\n            storage_player.softDropPoints += sdPoints;\r\n            if (storage_player.softDropPoints < src_settings.points.softDropMax) {\r\n                addScore(sdPoints);\r\n            }\r\n            break;\r\n        case 'ArrowLeft':\r\n            newPosition.x--;\r\n            break;\r\n        case 'Space':\r\n            if (repeated)\r\n                return true;\r\n            var nextPos = newPosition;\r\n            var hdPoints = 0;\r\n            do {\r\n                nextPos = { x: nextPos.x, y: nextPos.y + 1 };\r\n                hdPoints += src_settings.points.hardDrop;\r\n            } while (!storage_board.collides({\r\n                matrix: storage_player.shape.blocks,\r\n                position: nextPos\r\n            }));\r\n            newPosition = { x: nextPos.x, y: nextPos.y - 1 };\r\n            addScore(Math.min(hdPoints - src_settings.points.hardDrop, src_settings.points.hardDropMax));\r\n            hardDropped = true;\r\n            break;\r\n        default:\r\n            triggered = false;\r\n            break;\r\n    }\r\n    var posChanged = !pointEquals(storage_player.position, newPosition);\r\n    if (posChanged || hardDropped) {\r\n        var newMatrix = {\r\n            matrix: storage_player.shape.blocks,\r\n            position: newPosition\r\n        };\r\n        if (!storage_board.collides(newMatrix)) {\r\n            storage_player.position = newPosition;\r\n        }\r\n        else\r\n            posChanged = false;\r\n        if (hardDropped\r\n            || keyCode === 'ArrowDown'\r\n                && storage_board.collides(newMatrix)) {\r\n            placePiece();\r\n        }\r\n    }\r\n    var rotationChanged = !matrixEquals(storage_player.shape.blocks, beforeMatrix);\r\n    if (posChanged || rotationChanged) {\r\n        stopLockTimeout();\r\n        storage_panel.draw(getViewMatrix());\r\n    }\r\n    return triggered;\r\n}\r\n\n// CONCATENATED MODULE: ./src/models/shape.ts\n\r\nvar shape_Shape = (function () {\r\n    function Shape(blocks) {\r\n        this._blocks = blocks;\r\n    }\r\n    Object.defineProperty(Shape.prototype, \"blocks\", {\r\n        get: function () {\r\n            return this._blocks;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Shape.prototype.rotate = function (reverse) {\r\n        if (reverse === void 0) { reverse = false; }\r\n        this._blocks = rotateMatrix(this._blocks, reverse);\r\n    };\r\n    return Shape;\r\n}());\r\n/* harmony default export */ var models_shape = (shape_Shape);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/i.ts\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar c = 2;\r\nvar i_I = (function (_super) {\r\n    __extends(I, _super);\r\n    function I() {\r\n        return _super.call(this, xyMatrix([\r\n            [0, c, 0, 0],\r\n            [0, c, 0, 0],\r\n            [0, c, 0, 0],\r\n            [0, c, 0, 0]\r\n        ])) || this;\r\n    }\r\n    return I;\r\n}(models_shape));\r\n/* harmony default export */ var shapes_i = (i_I);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/j.ts\nvar j___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar j_c = 6;\r\nvar j_J = (function (_super) {\r\n    j___extends(J, _super);\r\n    function J() {\r\n        return _super.call(this, xyMatrix([\r\n            [0, j_c, 0],\r\n            [0, j_c, 0],\r\n            [j_c, j_c, 0]\r\n        ])) || this;\r\n    }\r\n    return J;\r\n}(models_shape));\r\n/* harmony default export */ var j = (j_J);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/l.ts\nvar l___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar l_c = 5;\r\nvar l_L = (function (_super) {\r\n    l___extends(L, _super);\r\n    function L() {\r\n        return _super.call(this, xyMatrix([\r\n            [0, l_c, 0],\r\n            [0, l_c, 0],\r\n            [0, l_c, l_c]\r\n        ])) || this;\r\n    }\r\n    return L;\r\n}(models_shape));\r\n/* harmony default export */ var l = (l_L);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/o.ts\nvar o___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar o_c = 1;\r\nvar o_O = (function (_super) {\r\n    o___extends(O, _super);\r\n    function O() {\r\n        return _super.call(this, xyMatrix([\r\n            [o_c, o_c],\r\n            [o_c, o_c]\r\n        ])) || this;\r\n    }\r\n    return O;\r\n}(models_shape));\r\n/* harmony default export */ var o = (o_O);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/s.ts\nvar s___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar s_c = 3;\r\nvar s_S = (function (_super) {\r\n    s___extends(S, _super);\r\n    function S() {\r\n        return _super.call(this, xyMatrix([\r\n            [0, s_c, s_c],\r\n            [s_c, s_c, 0],\r\n            [0, 0, 0]\r\n        ])) || this;\r\n    }\r\n    return S;\r\n}(models_shape));\r\n/* harmony default export */ var s = (s_S);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/t.ts\nvar t___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar t_c = 7;\r\nvar t_T = (function (_super) {\r\n    t___extends(T, _super);\r\n    function T() {\r\n        return _super.call(this, xyMatrix([\r\n            [t_c, t_c, t_c],\r\n            [0, t_c, 0],\r\n            [0, 0, 0]\r\n        ])) || this;\r\n    }\r\n    return T;\r\n}(models_shape));\r\n/* harmony default export */ var t = (t_T);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/z.ts\nvar z___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar z_c = 4;\r\nvar z_Z = (function (_super) {\r\n    z___extends(Z, _super);\r\n    function Z() {\r\n        return _super.call(this, xyMatrix([\r\n            [z_c, z_c, 0],\r\n            [0, z_c, z_c],\r\n            [0, 0, 0]\r\n        ])) || this;\r\n    }\r\n    return Z;\r\n}(models_shape));\r\n/* harmony default export */ var z = (z_Z);\r\n\n// CONCATENATED MODULE: ./src/services/random-shape.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar shapes = [shapes_i, j, l, o, s, t, z];\r\nfunction getRandomShape() {\r\n    var Shape = shapes[Math.floor(Math.random() * shapes.length)];\r\n    return new Shape();\r\n}\r\n\n// CONCATENATED MODULE: ./src/models/player.ts\n\r\n\r\n\r\nvar player_Player = (function () {\r\n    function Player(startingPosition) {\r\n        this.softDropPoints = 0;\r\n        this._startingPos = startingPosition;\r\n        this.reset();\r\n    }\r\n    Object.defineProperty(Player.prototype, \"shape\", {\r\n        get: function () {\r\n            return this._shape;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Player.prototype.reset = function () {\r\n        this.position = clonePoint(this._startingPos);\r\n        this._shape = getRandomShape();\r\n        resetControls();\r\n        this.softDropPoints = 0;\r\n    };\r\n    return Player;\r\n}());\r\n/* harmony default export */ var player = (player_Player);\r\n\n// CONCATENATED MODULE: ./src/services/storage.ts\n\r\n\r\n\r\nvar boardSize = {\r\n    width: 10,\r\n    height: 20\r\n};\r\nvar storage_player = new player({ x: boardSize.width / 2 - 1, y: 0 });\r\nvar storage_panel = new components_panel('game');\r\nvar storage_board = new models_board(boardSize);\r\n\n// CONCATENATED MODULE: ./src/services/game-over.ts\n\r\n\r\nfunction gameOver() {\r\n    storage_board.clear();\r\n    storage_player.reset();\r\n    resetScore();\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/gameloop.ts\n\r\n\r\n\r\n\r\n\r\n\r\nfunction placePiece() {\r\n    storage_board.place(storage_player.shape, storage_player.position);\r\n    var linesCleared = storage_board.clearFullLines();\r\n    if (linesCleared) {\r\n        var scoring = src_settings.points.linesCleared;\r\n        addScore(scoring[linesCleared]);\r\n    }\r\n    storage_player.reset();\r\n    if (storage_board.collides({\r\n        matrix: storage_player.shape.blocks,\r\n        position: storage_player.position\r\n    }))\r\n        gameOver();\r\n}\r\nvar lockTimeout = new timer(placePiece, src_settings.placementTimeout * 1000, false);\r\nfunction stopLockTimeout() {\r\n    lockTimeout.stop();\r\n}\r\nfunction update() {\r\n    var newPos = {\r\n        x: storage_player.position.x,\r\n        y: storage_player.position.y + 1\r\n    };\r\n    if (!storage_board.collides({ matrix: storage_player.shape.blocks, position: newPos })) {\r\n        storage_player.position = newPos;\r\n    }\r\n    else {\r\n        lockTimeout.start();\r\n    }\r\n    storage_panel.draw(getViewMatrix());\r\n}\r\nvar interval;\r\nvar currentSeconds;\r\nfunction setLoopSpeed(seconds) {\r\n    currentSeconds = seconds;\r\n    window.clearInterval(interval);\r\n    update();\r\n    interval = window.setInterval(function () {\r\n        if (!lockTimeout.running)\r\n            update();\r\n    }, seconds * 1000);\r\n}\r\n\n// EXTERNAL MODULE: ./src/vendor/modernizr.min.js\nvar modernizr_min = __webpack_require__(2);\nvar modernizr_min_default = /*#__PURE__*/__webpack_require__.n(modernizr_min);\n\n// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\n\r\nsetLoopSpeed(src_settings.gameSpeed);\r\nhandleInput();\r\nloadPlayerScore();\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n        return Hammer;\n    }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/*! modernizr 3.5.0 (Custom Build) | MIT *\r\n * https://modernizr.com/download/?-canvas-localstorage-serviceworker-sessionstorage-touchevents-webgl !*/\r\n!function(e,t,n){function o(e,t){return typeof e===t}function r(){var e,t,n,r,s,a,i;for(var d in l)if(l.hasOwnProperty(d)){if(e=[],t=l[d],t.name&&(e.push(t.name.toLowerCase()),t.options&&t.options.aliases&&t.options.aliases.length))for(n=0;n<t.options.aliases.length;n++)e.push(t.options.aliases[n].toLowerCase());for(r=o(t.fn,\"function\")?t.fn():t.fn,s=0;s<e.length;s++)a=e[s],i=a.split(\".\"),1===i.length?Modernizr[i[0]]=r:(!Modernizr[i[0]]||Modernizr[i[0]]instanceof Boolean||(Modernizr[i[0]]=new Boolean(Modernizr[i[0]])),Modernizr[i[0]][i[1]]=r),c.push((r?\"\":\"no-\")+i.join(\"-\"))}}function s(){return\"function\"!=typeof t.createElement?t.createElement(arguments[0]):u?t.createElementNS.call(t,\"http://www.w3.org/2000/svg\",arguments[0]):t.createElement.apply(t,arguments)}function a(){var e=t.body;return e||(e=s(u?\"svg\":\"body\"),e.fake=!0),e}function i(e,n,o,r){var i,l,d,c,u=\"modernizr\",p=s(\"div\"),v=a();if(parseInt(o,10))for(;o--;)d=s(\"div\"),d.id=r?r[o]:u+(o+1),p.appendChild(d);return i=s(\"style\"),i.type=\"text/css\",i.id=\"s\"+u,(v.fake?v:p).appendChild(i),v.appendChild(p),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(t.createTextNode(e)),p.id=u,v.fake&&(v.style.background=\"\",v.style.overflow=\"hidden\",c=f.style.overflow,f.style.overflow=\"hidden\",f.appendChild(v)),l=n(p,e),v.fake?(v.parentNode.removeChild(v),f.style.overflow=c,f.offsetHeight):p.parentNode.removeChild(p),!!l}var l=[],d={_version:\"3.5.0\",_config:{classPrefix:\"\",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(e,t){var n=this;setTimeout(function(){t(n[e])},0)},addTest:function(e,t,n){l.push({name:e,fn:t,options:n})},addAsyncTest:function(e){l.push({name:null,fn:e})}},Modernizr=function(){};Modernizr.prototype=d,Modernizr=new Modernizr,Modernizr.addTest(\"serviceworker\",\"serviceWorker\"in navigator),Modernizr.addTest(\"localstorage\",function(){var e=\"modernizr\";try{return localStorage.setItem(e,e),localStorage.removeItem(e),!0}catch(t){return!1}}),Modernizr.addTest(\"sessionstorage\",function(){var e=\"modernizr\";try{return sessionStorage.setItem(e,e),sessionStorage.removeItem(e),!0}catch(t){return!1}});var c=[],f=t.documentElement,u=\"svg\"===f.nodeName.toLowerCase();Modernizr.addTest(\"canvas\",function(){var e=s(\"canvas\");return!(!e.getContext||!e.getContext(\"2d\"))}),Modernizr.addTest(\"webgl\",function(){var t=s(\"canvas\"),n=\"probablySupportsContext\"in t?\"probablySupportsContext\":\"supportsContext\";return n in t?t[n](\"webgl\")||t[n](\"experimental-webgl\"):\"WebGLRenderingContext\"in e});var p=d._config.usePrefixes?\" -webkit- -moz- -o- -ms- \".split(\" \"):[\"\",\"\"];d._prefixes=p;var v=d.testStyles=i;Modernizr.addTest(\"touchevents\",function(){var n;if(\"ontouchstart\"in e||e.DocumentTouch&&t instanceof DocumentTouch)n=!0;else{var o=[\"@media (\",p.join(\"touch-enabled),(\"),\"heartz\",\")\",\"{#modernizr{top:9px;position:absolute}}\"].join(\"\");v(o,function(e){n=9===e.offsetTop})}return n}),r(),delete d.addTest,delete d.addAsyncTest;for(var m=0;m<Modernizr._q.length;m++)Modernizr._q[m]();e.Modernizr=Modernizr}(window,document);\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fbf57833cb29c0dfcd2c","let currentScore = 0;\r\n\r\nexport function addScore(points: number): void {\r\n    currentScore += points;\r\n    triggerScoreChange();\r\n}\r\n\r\nexport function resetScore(): void {\r\n    currentScore = 0;\r\n    triggerScoreChange();\r\n}\r\n\r\nconst subscribers: Array<(score: number) => void> = [];\r\nexport function onScoreChange(handler: (score: number) => void, triggerOnInit = false): void {\r\n    subscribers.push(handler);\r\n    if (triggerOnInit) handler(currentScore);\r\n}\r\n\r\nfunction triggerScoreChange(): void {\r\n    subscribers.forEach(handler => handler(currentScore));\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/player-score.ts","import Panel from '../components/panel';\r\nimport { ISize } from '../interfaces/size';\r\n\r\nexport default function drawGrid(panel: Panel, gridSize: ISize): void {\r\n    const tileSize: ISize = {\r\n        width: panel.size.width / gridSize.width,\r\n        height: panel.size.height / gridSize.height\r\n    };\r\n\r\n    const { ctx } = panel;\r\n    ctx.strokeStyle = '#efefef';\r\n    ctx.lineWidth = panel.pixelRatio;\r\n\r\n    for (let x = 0; x < panel.size.width; x += tileSize.width) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, 0);\r\n        ctx.lineTo(x, panel.size.height);\r\n        ctx.stroke();\r\n    }\r\n\r\n    for (let y = 0; y < panel.size.height; y += tileSize.height) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, y);\r\n        ctx.lineTo(panel.size.width, y);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/draw-grid.ts","export const enum Color {\r\n    Yellow = 1,\r\n    Blue = 2,\r\n    Red = 3,\r\n    Green = 4,\r\n    Orange = 5,\r\n    Pink = 6,\r\n    Purple = 7,\r\n    Grey = 8\r\n}\r\n\r\nexport function getColorCode(color: Color): string {\r\n    switch (color) {\r\n        case Color.Yellow:\r\n            return '#ffeb3b';\r\n        case Color.Blue:\r\n            return '#03a9f4';\r\n        case Color.Red:\r\n            return '#f44336';\r\n        case Color.Green:\r\n            return '#4caf50';\r\n        case Color.Orange:\r\n            return '#ff9800';\r\n        case Color.Pink:\r\n            return '#fbafbc';\r\n        case Color.Purple:\r\n            return '#9c27b0';\r\n        case Color.Grey:\r\n            return '#e0e0e0';\r\n        default:\r\n            return '#000';\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/color.ts","import Panel from '../components/panel';\r\nimport Matrix from '../interfaces/matrix';\r\nimport { ISize } from '../interfaces/size';\r\nimport { getColorCode } from '../models/color';\r\nimport settings from '../settings';\r\n\r\nconst emptyColor = settings.debug.emptyTileColor;\r\n\r\nexport default function drawMatrix(panel: Panel, matrix: Matrix): void {\r\n    const ctx = panel.ctx;\r\n\r\n    const tileSize: ISize = {\r\n        width: panel.size.width / matrix.length,\r\n        height: panel.size.height / matrix[0].length\r\n    };\r\n\r\n    matrix.forEach((col, x) => col.forEach((item, y) => {\r\n        if (typeof item === 'undefined' ||\r\n            !settings.debug.drawEmptyTiles && !item) return;\r\n\r\n        ctx.fillStyle = item ? getColorCode(item) : emptyColor;\r\n        ctx.fillRect(\r\n            x * tileSize.width | 0,\r\n            y * tileSize.height | 0,\r\n            Math.ceil(tileSize.width),\r\n            Math.ceil(tileSize.height));\r\n    }));\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/draw-matrix.ts","export default interface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport function clonePoint(point: IPoint): IPoint {\r\n    return { x: point.x, y: point.y };\r\n}\r\n\r\nexport function pointEquals(a: IPoint, b: IPoint): boolean {\r\n    return a.x === b.x && a.y === b.y;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/interfaces/point.ts","export function findIndex<T>(array: T[], predicate: (item: T, index: number) => boolean): number | undefined {\r\n    for (let i = 0; i < array.length; i++) {\r\n        const value = array[i];\r\n        if (predicate(value, i)) {\r\n            return i;\r\n        }\r\n    }\r\n}\r\n\r\nexport function findAny<T>(array: T[], predicate: (item: T, index: number) => boolean): boolean {\r\n    return typeof findIndex(array, predicate) !== 'undefined';\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/arrays.ts","import Matrix from '../interfaces/matrix';\r\nimport { clonePoint, default as IPoint } from '../interfaces/point';\r\nimport IPositionedMatrix from '../interfaces/positioned-matrix';\r\nimport { ISize } from '../interfaces/size';\r\nimport { findAny } from './arrays';\r\n\r\nexport function createMatrix(size: ISize): Matrix {\r\n    const result: Matrix = [];\r\n    for (let col = 0; col < size.width; col++) {\r\n        result[col] = new Array(size.height);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function copyMatrix(matrix: Matrix): Matrix {\r\n    return matrix.reduce<Matrix>((result, col, x) => {\r\n        result[x] = col.slice();\r\n        return result;\r\n    }, []);\r\n}\r\n\r\nexport function getMatrixSize(matrix: Matrix): ISize {\r\n    return {\r\n        width: matrix.length,\r\n        height: matrix[0].length\r\n    };\r\n}\r\n\r\nexport function matrixEquals(m1: Matrix, m2: Matrix): boolean {\r\n    if (m1.length !== m2.length\r\n        || m1[0].length !== m2[0].length) {\r\n        return false;\r\n    }\r\n\r\n    return !findAny(m1, (col, x) => {\r\n        return findAny(col, (value, y) => {\r\n            return value !== m2[x][y];\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Merges parent and child matrixes into the target matrix\r\n */\r\nexport function mergeMatrixes(parent: Matrix, child: IPositionedMatrix, target = copyMatrix(parent)): Matrix {\r\n    const { matrix: childMatrix, position } = child;\r\n    const result = target;\r\n\r\n    for (let i = 0; i < childMatrix.length; i++) {\r\n        for (let j = 0; j < childMatrix[0].length; j++) {\r\n            const value = childMatrix[i][j];\r\n            if (typeof value === 'undefined') continue;\r\n\r\n            const x = i + position.x;\r\n            const y = j + position.y;\r\n\r\n            if (x >= 0 && x < parent.length &&\r\n                y >= 0 && y < parent[0].length &&\r\n                (value || !result[x][y])) {\r\n                result[x][y] = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Transforms matrix to be used in the coordinate system\r\n */\r\nexport function xyMatrix(matrix: Matrix): Matrix {\r\n    return rotateMatrix(matrix)\r\n        .reduce<Matrix>((result, col, x) => {\r\n            // Flip columns\r\n            result[x] = col.reverse();\r\n            return result;\r\n        }, []);\r\n}\r\n\r\n/**\r\n * Rotate a square 2D matrix\r\n */\r\nexport function rotateMatrix(matrix: Matrix, reverse = false): Matrix {\r\n    const l = matrix.length;\r\n    const result = createMatrix({ width: l, height: l });\r\n\r\n    // Apply rotation\r\n    for (let x = 0; x < l; x++) {\r\n        for (let y = 0; y < l; y++) {\r\n            result[x][y] = reverse\r\n                ? matrix[l - y - 1][x]\r\n                : matrix[y][l - x - 1];\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Checks if child is not outside parent matrix\r\n */\r\nexport function matrixContains(parent: Matrix, child: IPositionedMatrix): boolean {\r\n    const { matrix: childMatrix, position } = child;\r\n\r\n    for (let i = 0; i < childMatrix.length; i++) {\r\n        const col = childMatrix[i];\r\n        for (let j = 0; j < col.length; j++) {\r\n            if (!col[j]) continue;\r\n\r\n            const x = i + position.x;\r\n            const y = j + position.y;\r\n\r\n            if (x < 0 || x >= parent.length ||\r\n                y < 0 || y >= parent[0].length) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function matrixesColliding(parent: Matrix, child: IPositionedMatrix): boolean {\r\n    const { matrix: childMatrix, position } = child;\r\n\r\n    for (let x = 0; x < childMatrix.length; x++) {\r\n        for (let y = 0; y < childMatrix[0].length; y++) {\r\n            if (!childMatrix[x][y]) continue;\r\n\r\n            const col = parent[x + position.x];\r\n            if (!col) continue;\r\n\r\n            if (col[y + position.y]) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Tries to move matrix to a non-colliding position\r\n */\r\nexport function getUnstuckPosition(matrix: IPositionedMatrix,\r\n    isColliding: (matrix: IPositionedMatrix) => boolean): IPoint | null {\r\n\r\n    const { matrix: shape, position } = matrix;\r\n\r\n    const maxOffset = Math.ceil(shape.length / 2);\r\n    for (let i = 1; i <= maxOffset; i++) {\r\n        const pos = clonePoint(position);\r\n\r\n        // Try down\r\n        pos.y += i;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        })) return pos;\r\n\r\n        // Try up\r\n        pos.y -= i * 2;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        })) return pos;\r\n        pos.y += i;\r\n\r\n        // Try right\r\n        pos.x += i;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        })) return pos;\r\n\r\n        // Try left\r\n        pos.x -= i * 2;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        })) return pos;\r\n        pos.x += i;\r\n    }\r\n\r\n    return null;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/matrix-calculations.ts","import Matrix from '../interfaces/matrix';\r\nimport { clonePoint } from '../interfaces/point';\r\nimport IPositionedMatrix from '../interfaces/positioned-matrix';\r\nimport Board from '../models/board';\r\nimport { Color } from '../models/color';\r\n\r\nconst ghostColor = Color.Grey;\r\n\r\nexport default function createGhost(board: Board, pm: IPositionedMatrix): IPositionedMatrix {\r\n    const matrix = pm.matrix;\r\n    const position = clonePoint(pm.position);\r\n\r\n    // Calculate y position\r\n    let y = position.y;\r\n    do {\r\n        y++;\r\n    } while (!board.collides({\r\n        matrix,\r\n        position: { x: position.x, y }\r\n    }));\r\n    position.y = y - 1;\r\n\r\n    // Copy matrix with new color\r\n    const ghost: Matrix = matrix.map(col => col.map(x => {\r\n        if (x) return ghostColor;\r\n    }));\r\n\r\n    return { matrix: ghost, position };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/ghost-matrix.ts","import Matrix from '../interfaces/matrix';\r\nimport createGhost from './ghost-matrix';\r\nimport { mergeMatrixes } from './matrix-calculations';\r\nimport { board, player } from './storage';\r\n\r\nexport default function getViewMatrix(): Matrix {\r\n\r\n    const playerMatrix = {\r\n        matrix: player.shape.blocks,\r\n        position: player.position\r\n    };\r\n\r\n    const ghost = createGhost(board, playerMatrix);\r\n\r\n    return mergeMatrixes(\r\n        mergeMatrixes(board.blocks, ghost),\r\n        playerMatrix\r\n    );\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/view-matrix.ts","import * as Hammer from 'hammerjs';\r\nimport { pointEquals } from '../interfaces/point';\r\nimport settings from '../settings';\r\nimport { findAny, findIndex } from './arrays';\r\nimport { placePiece, stopLockTimeout } from './gameloop';\r\nimport { copyMatrix, getUnstuckPosition, matrixEquals } from './matrix-calculations';\r\nimport { addScore } from './player-score';\r\nimport { board, panel, player } from './storage';\r\nimport Timer from './timer';\r\nimport UniqueArray from './unique-array';\r\nimport getViewMatrix from './view-matrix';\r\n\r\nconst keysDown = new UniqueArray<string>();\r\n\r\nconst keyInterval = new Timer(() => {\r\n    keysDown.values.forEach(code => {\r\n        handleKeyDown(code, true);\r\n    });\r\n}, 90);\r\n\r\nconst keyThresholdTimer = new Timer(() => {\r\n    keyInterval.start();\r\n}, 200, false);\r\n\r\nexport default function handleInput(): void {\r\n    document.addEventListener('keydown', e => {\r\n        if (e.repeat) return;\r\n\r\n        const keyCode = e.code;\r\n\r\n        if (handleKeyDown(keyCode, false)) {\r\n            e.preventDefault();\r\n\r\n            keysDown.add(keyCode);\r\n\r\n            if (keyCode === 'ArrowLeft' || keyCode === 'ArrowRight') {\r\n                // Make it easier to move one tile\r\n                keyInterval.stop();\r\n                keyThresholdTimer.start();\r\n            } else keyInterval.start();\r\n        }\r\n    });\r\n\r\n    document.addEventListener('keyup', e => {\r\n        if (keysDown.contains(e.code)) {\r\n            keysDown.remove(e.code);\r\n\r\n            if (keysDown.count === 0) {\r\n                keyThresholdTimer.stop();\r\n                keyInterval.stop();\r\n            }\r\n        }\r\n    });\r\n\r\n    // Touch controls\r\n    if (!Modernizr.touchevents) return;\r\n    const mc = new Hammer.Manager(document.body);\r\n    mc.add(new Hammer.Tap());\r\n    mc.add(new Hammer.Swipe({ direction: Hammer.DIRECTION_DOWN }));\r\n    mc.add(new Hammer.Pan({ direction: Hammer.DIRECTION_HORIZONTAL, threshold: 20 }));\r\n    mc.on('tap', () => handleKeyDown('ArrowUp', false));\r\n    mc.on('swipedown', () => handleKeyDown('Space', false));\r\n\r\n    let isFirst = true;\r\n    mc.on('panstart', () => isFirst = true);\r\n    mc.on('panleft', e => {\r\n        movePiece(e.deltaX, isFirst);\r\n        if (isFirst) isFirst = false;\r\n    });\r\n    mc.on('panright', e => {\r\n        movePiece(e.deltaX, isFirst);\r\n        if (isFirst) isFirst = false;\r\n    });\r\n}\r\n\r\nlet colStart: number;\r\nfunction movePiece(deltaX: number, reset: boolean): void {\r\n\r\n    const canvasWidth = panel.canvas.offsetWidth;\r\n    const tileWidth = canvasWidth / board.size.width;\r\n\r\n    if (reset || typeof colStart === 'undefined') {\r\n        colStart = player.position.x - deltaX / tileWidth;\r\n    }\r\n\r\n    const newCol = Math.floor(colStart + deltaX / tileWidth);\r\n    if (newCol === colStart) return;\r\n\r\n    const deltaCol = player.position.x - newCol;\r\n    if (deltaCol > 0) {\r\n        for (let i = 0; i < deltaCol; i++) {\r\n            handleKeyDown('ArrowLeft', false);\r\n        }\r\n    } else {\r\n        for (let i = 0; i > deltaCol; i--) {\r\n            handleKeyDown('ArrowRight', false);\r\n        }\r\n    }\r\n}\r\n\r\nexport function resetControls(): void {\r\n    keysDown.remove('ArrowDown');\r\n}\r\n\r\nfunction handleKeyDown(keyCode: string, repeated: boolean): boolean {\r\n    let newPosition = {\r\n        x: player.position.x,\r\n        y: player.position.y\r\n    };\r\n\r\n    const beforeMatrix = copyMatrix(player.shape.blocks);\r\n\r\n    let triggered = true;\r\n    let hardDropped = false;\r\n\r\n    switch (keyCode) {\r\n        case 'ArrowUp':\r\n            // Rotate clockwise\r\n            if (repeated) return true;\r\n            player.shape.rotate();\r\n\r\n            const playerMatrix = {\r\n                matrix: player.shape.blocks,\r\n                position: newPosition\r\n            };\r\n\r\n            if (board.collides(playerMatrix)) {\r\n                // Colliding with other blocks, try to reposition\r\n                const unstuckPos = getUnstuckPosition(playerMatrix, board.collides.bind(board));\r\n\r\n                if (!unstuckPos) {\r\n                    // Cannot unstuck, revert!\r\n                    player.shape.rotate(true);\r\n                } else {\r\n                    // Repositioned\r\n                    newPosition = unstuckPos;\r\n                }\r\n            }\r\n            break;\r\n        case 'ArrowRight':\r\n            // Move right\r\n            newPosition.x++;\r\n            break;\r\n        case 'ArrowDown':\r\n            // Soft drop\r\n            newPosition.y++;\r\n\r\n            // Add points to score\r\n            const sdPoints = settings.points.softDrop;\r\n            player.softDropPoints += sdPoints;\r\n            if (player.softDropPoints < settings.points.softDropMax) {\r\n                addScore(sdPoints);\r\n            }\r\n\r\n            break;\r\n        case 'ArrowLeft':\r\n            // Move left\r\n            newPosition.x--;\r\n            break;\r\n        case 'Space':\r\n            // Hard drop\r\n            if (repeated) return true;\r\n\r\n            let nextPos = newPosition;\r\n            let hdPoints = 0;\r\n\r\n            do {\r\n                nextPos = { x: nextPos.x, y: nextPos.y + 1 };\r\n                hdPoints += settings.points.hardDrop;\r\n            } while (!board.collides({\r\n                matrix: player.shape.blocks,\r\n                position: nextPos\r\n            }));\r\n\r\n            newPosition = { x: nextPos.x, y: nextPos.y - 1 };\r\n            addScore(Math.min(\r\n                hdPoints - settings.points.hardDrop,\r\n                settings.points.hardDropMax));\r\n\r\n            hardDropped = true;\r\n            break;\r\n        default:\r\n            triggered = false;\r\n            break;\r\n    }\r\n\r\n    let posChanged = !pointEquals(player.position, newPosition);\r\n\r\n    if (posChanged || hardDropped) {\r\n        const newMatrix = {\r\n            matrix: player.shape.blocks,\r\n            position: newPosition\r\n        };\r\n\r\n        if (!board.collides(newMatrix)) {\r\n            player.position = newPosition;\r\n        } else posChanged = false;\r\n\r\n        if (hardDropped\r\n            || keyCode === 'ArrowDown'\r\n            && board.collides(newMatrix)) {\r\n            placePiece();\r\n        }\r\n    }\r\n\r\n    const rotationChanged = !matrixEquals(player.shape.blocks, beforeMatrix);\r\n\r\n    if (posChanged || rotationChanged) {\r\n        stopLockTimeout();\r\n        panel.draw(getViewMatrix());\r\n    }\r\n\r\n    return triggered;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/key-handling.ts","import I from '../models/shapes/i';\r\nimport J from '../models/shapes/j';\r\nimport L from '../models/shapes/l';\r\nimport O from '../models/shapes/o';\r\nimport S from '../models/shapes/s';\r\nimport T from '../models/shapes/t';\r\nimport Z from '../models/shapes/z';\r\n\r\nconst shapes = [I, J, L, O, S, T, Z];\r\n\r\nexport default function getRandomShape() {\r\n    const Shape = shapes[Math.floor(Math.random() * shapes.length)];\r\n    return new Shape();\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/random-shape.ts","import { resetScore } from './player-score';\r\nimport { board, player } from './storage';\r\n\r\nexport default function gameOver(): void {\r\n    board.clear();\r\n    player.reset();\r\n    resetScore();\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/game-over.ts","import settings from '../settings';\r\nimport gameOver from './game-over';\r\nimport { addScore } from './player-score';\r\nimport { board, panel, player } from './storage';\r\nimport Timer from './timer';\r\nimport getViewMatrix from './view-matrix';\r\n\r\nexport function placePiece(): void {\r\n    board.place(player.shape, player.position);\r\n    const linesCleared = board.clearFullLines();\r\n\r\n    // Add points for cleared lines\r\n    if (linesCleared) {\r\n        const scoring = settings.points.linesCleared as { [lines: number]: number };\r\n        addScore(scoring[linesCleared]);\r\n    }\r\n\r\n    player.reset();\r\n\r\n    // Detect immediate collision\r\n    if (board.collides({\r\n        matrix: player.shape.blocks,\r\n        position: player.position\r\n    })) gameOver();\r\n}\r\n\r\nconst lockTimeout = new Timer(placePiece, settings.placementTimeout * 1000, false);\r\n\r\nexport function stopLockTimeout(): void {\r\n    lockTimeout.stop();\r\n}\r\n\r\nfunction update(): void {\r\n    const newPos = {\r\n        x: player.position.x,\r\n        y: player.position.y + 1\r\n    };\r\n\r\n    if (!board.collides({ matrix: player.shape.blocks, position: newPos })) {\r\n        // Move piece down\r\n        player.position = newPos;\r\n    } else {\r\n        // Colliding, init placement\r\n        lockTimeout.start();\r\n    }\r\n\r\n    panel.draw(getViewMatrix());\r\n}\r\n\r\n// Call update immediately\r\nlet interval: number;\r\nlet currentSeconds: number;\r\nexport function setLoopSpeed(seconds: number): void {\r\n    currentSeconds = seconds;\r\n\r\n    window.clearInterval(interval);\r\n    update();\r\n    interval = window.setInterval(() => {\r\n        if (!lockTimeout.running) update();\r\n    }, seconds * 1000);\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/gameloop.ts","import { onScoreChange } from '../services/player-score';\r\n\r\nlet scoreEl: HTMLSpanElement;\r\n\r\nexport default function loadPlayerScore(): void {\r\n    scoreEl = document.getElementById('player-score') as HTMLSpanElement;\r\n    onScoreChange(score => {\r\n        scoreEl.textContent = score.toLocaleString();\r\n    }, true);\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/components/player-score.ts","const settings = {\r\n\r\n    // Per drops per second\r\n    gameSpeed: 0.4,\r\n\r\n    points: {\r\n        // Amount of lines cleared at once\r\n        linesCleared: {\r\n            1: 40,\r\n            2: 100,\r\n            3: 300,\r\n            4: 1200\r\n        },\r\n\r\n        // Points per cell dropped\r\n        softDrop: 1,\r\n        hardDrop: 2,\r\n\r\n        // Max drop points per turn\r\n        softDropMax: 20,\r\n        hardDropMax: 40\r\n    },\r\n\r\n    // Seconds to wait before locking piece\r\n    placementTimeout: 0.5,\r\n\r\n    debug: {\r\n        // Draw full shape square\r\n        drawEmptyTiles: false,\r\n        emptyTileColor: '#f1f1f1'\r\n    }\r\n};\r\n\r\nexport default settings;\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/settings.ts","import Matrix from '../interfaces/matrix';\r\nimport { ISize } from '../interfaces/size';\r\nimport drawGrid from '../services/draw-grid';\r\nimport drawMatrix from '../services/draw-matrix';\r\nimport { getMatrixSize } from '../services/matrix-calculations';\r\n\r\nexport default class Panel {\r\n    public readonly ctx: CanvasRenderingContext2D;\r\n    public readonly size: ISize;\r\n    public readonly pixelRatio: number;\r\n    public readonly canvas: HTMLCanvasElement;\r\n\r\n    constructor(id: string) {\r\n        const canvas = document.getElementById(id) as HTMLCanvasElement;\r\n        this.pixelRatio = devicePixelRatio || 1;\r\n\r\n        // Read canvas size\r\n        this.size = {\r\n            width: parseInt(canvas.getAttribute('width') as string, 10) * this.pixelRatio,\r\n            height: parseInt(canvas.getAttribute('height') as string, 10) * this.pixelRatio\r\n        };\r\n\r\n        // Fix scaling for small viewports\r\n        if (this.size.width !== canvas.offsetWidth) {\r\n            canvas.setAttribute('width', `${this.size.width}`);\r\n        }\r\n\r\n        if (this.size.height !== canvas.offsetHeight) {\r\n            canvas.setAttribute('height', `${this.size.height}`);\r\n        }\r\n\r\n        // Get drawing context\r\n        const ctx = canvas.getContext('2d');\r\n        if (!ctx) throw new Error('Context not found!');\r\n        this.ctx = ctx;\r\n        this.canvas = canvas;\r\n    }\r\n\r\n    public draw(matrix: Matrix): void {\r\n        this.clear();\r\n        drawGrid(this, getMatrixSize(matrix));\r\n        drawMatrix(this, matrix);\r\n    }\r\n\r\n    private clear(): void {\r\n        this.ctx.clearRect(0, 0, this.size.width, this.size.height);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/components/panel.ts","import Matrix from '../interfaces/matrix';\r\nimport IPoint from '../interfaces/point';\r\nimport IPositionedMatrix from '../interfaces/positioned-matrix';\r\nimport { ISize } from '../interfaces/size';\r\nimport { matrixContains, matrixesColliding, mergeMatrixes } from '../services/matrix-calculations';\r\nimport Shape from './shape';\r\n\r\nexport default class Board {\r\n    private _blocks: Matrix;\r\n    public get blocks() { return this._blocks; }\r\n\r\n    public readonly size: ISize;\r\n\r\n    constructor(size: ISize) {\r\n        this.size = size;\r\n        this.clear();\r\n    }\r\n\r\n    public place(shape: Shape, position: IPoint): void {\r\n        mergeMatrixes(this.blocks, {\r\n            matrix: shape.blocks,\r\n            position\r\n        }, this.blocks);\r\n    }\r\n\r\n    public clearFullLines(): number {\r\n        const fullRows = this.getFullLines();\r\n        fullRows.forEach(row => this.deleteRow(row));\r\n        return fullRows.length;\r\n    }\r\n\r\n    private getFullLines(): number[] {\r\n        const rowCount = this._blocks[0].length;\r\n        const incompleteRows = new Array<boolean>(rowCount - 1);\r\n\r\n        rows:\r\n        for (let y = 0; y < rowCount; y++) {\r\n            for (const col of this._blocks) {\r\n                if (!col[y]) {\r\n                    incompleteRows[y] = true;\r\n                    continue rows;\r\n                }\r\n            }\r\n        }\r\n\r\n        const result: number[] = [];\r\n        for (let row = 0; row < rowCount; row++) {\r\n            if (!incompleteRows[row]) result.push(row);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private deleteRow(row: number): void {\r\n        this._blocks.forEach(col => {\r\n            col.splice(row, 1);\r\n            col.unshift(undefined);\r\n        });\r\n    }\r\n\r\n    public clear(): void {\r\n        this._blocks = [];\r\n        for (let x = 0; x < this.size.width; x++) {\r\n            this._blocks[x] = new Array(this.size.height);\r\n        }\r\n    }\r\n\r\n    public contains(matrix: IPositionedMatrix): boolean {\r\n        return matrixContains(this._blocks, matrix);\r\n    }\r\n\r\n    public collides(matrix: IPositionedMatrix): boolean {\r\n        return !this.contains(matrix)\r\n            || matrixesColliding(this.blocks, matrix);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/board.ts","export default class Timer {\r\n    private _handle: number | void;\r\n    private readonly _handler: () => void;\r\n    private readonly _interval: number;\r\n    private readonly _repeat: boolean;\r\n    private _running = false;\r\n\r\n    public get running() { return this._running; }\r\n\r\n    constructor(handler: () => void, interval: number, repeat = true) {\r\n        this._handler = handler;\r\n        this._interval = interval;\r\n        this._repeat = repeat;\r\n    }\r\n\r\n    public start(executeOnInit = false): void {\r\n        if (executeOnInit) {\r\n            this._handler();\r\n            if (!this._repeat) return;\r\n        }\r\n\r\n        this.stop();\r\n\r\n        this._handle = (\r\n            this._repeat\r\n                ? setInterval\r\n                : setTimeout\r\n        )(() => {\r\n            this._handler();\r\n            this._running = false;\r\n        }, this._interval);\r\n        this._running = true;\r\n    }\r\n\r\n    public stop(): void {\r\n        this._handle = (\r\n            this._repeat\r\n                ? clearInterval\r\n                : clearTimeout\r\n        )(this._handle as number);\r\n        this._running = false;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/timer.ts","export default class UniqueArray<T> {\r\n    private _array: T[] = [];\r\n\r\n    public get count() { return this._array.length; }\r\n    public get values() { return this._array; }\r\n\r\n    public add(value: T): void {\r\n        if (!this.contains(value)) {\r\n            this._array.push(value);\r\n        }\r\n    }\r\n\r\n    public remove(value: T): void {\r\n        const index = this._array.indexOf(value);\r\n        if (index >= 0) {\r\n            this._array.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public contains(value: T): boolean {\r\n        return this._array.indexOf(value) >= 0;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/unique-array.ts","import Matrix from '../interfaces/matrix';\r\nimport { rotateMatrix } from '../services/matrix-calculations';\r\n\r\nexport default class Shape {\r\n    private _blocks: Matrix;\r\n    public get blocks() {\r\n        return this._blocks;\r\n    }\r\n\r\n    constructor(blocks: Matrix) {\r\n        this._blocks = blocks;\r\n    }\r\n\r\n    public rotate(reverse = false): void {\r\n        this._blocks = rotateMatrix(this._blocks, reverse);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shape.ts","import { xyMatrix } from '../../services/matrix-calculations';\r\nimport { Color } from '../color';\r\nimport Shape from '../shape';\r\n\r\nconst c = Color.Blue;\r\n\r\nexport default class I extends Shape {\r\n    constructor() {\r\n        super(xyMatrix([\r\n            [0, c, 0, 0],\r\n            [0, c, 0, 0],\r\n            [0, c, 0, 0],\r\n            [0, c, 0, 0]\r\n        ]));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/i.ts","import { xyMatrix } from '../../services/matrix-calculations';\r\nimport { Color } from '../color';\r\nimport Shape from '../shape';\r\n\r\nconst c = Color.Pink;\r\n\r\nexport default class J extends Shape {\r\n    constructor() {\r\n        super(xyMatrix([\r\n            [0, c, 0],\r\n            [0, c, 0],\r\n            [c, c, 0]\r\n        ]));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/j.ts","import { xyMatrix } from '../../services/matrix-calculations';\r\nimport { Color } from '../color';\r\nimport Shape from '../shape';\r\n\r\nconst c = Color.Orange;\r\n\r\nexport default class L extends Shape {\r\n    constructor() {\r\n        super(xyMatrix([\r\n            [0, c, 0],\r\n            [0, c, 0],\r\n            [0, c, c]\r\n        ]));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/l.ts","import { xyMatrix } from '../../services/matrix-calculations';\r\nimport { Color } from '../color';\r\nimport Shape from '../shape';\r\n\r\nconst c = Color.Yellow;\r\n\r\nexport default class O extends Shape {\r\n    constructor() {\r\n        super(xyMatrix([\r\n            [c, c],\r\n            [c, c]\r\n        ]));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/o.ts","import { xyMatrix } from '../../services/matrix-calculations';\r\nimport { Color } from '../color';\r\nimport Shape from '../shape';\r\n\r\nconst c = Color.Red;\r\n\r\nexport default class S extends Shape {\r\n    constructor() {\r\n        super(xyMatrix([\r\n            [0, c, c],\r\n            [c, c, 0],\r\n            [0, 0, 0]\r\n        ]));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/s.ts","import { xyMatrix } from '../../services/matrix-calculations';\r\nimport { Color } from '../color';\r\nimport Shape from '../shape';\r\n\r\nconst c = Color.Purple;\r\n\r\nexport default class T extends Shape {\r\n    constructor() {\r\n        super(xyMatrix([\r\n            [c, c, c],\r\n            [0, c, 0],\r\n            [0, 0, 0]\r\n        ]));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/t.ts","import { xyMatrix } from '../../services/matrix-calculations';\r\nimport { Color } from '../color';\r\nimport Shape from '../shape';\r\n\r\nconst c = Color.Green;\r\n\r\nexport default class Z extends Shape {\r\n    constructor() {\r\n        super(xyMatrix([\r\n            [c, c, 0],\r\n            [0, c, c],\r\n            [0, 0, 0]\r\n        ]));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/z.ts","import IPoint, { clonePoint } from '../interfaces/point';\r\nimport { resetControls } from '../services/key-handling';\r\nimport getRandomShape from '../services/random-shape';\r\nimport Shape from './shape';\r\n\r\nexport default class Player {\r\n    private _shape: Shape;\r\n    public get shape() {\r\n        return this._shape;\r\n    }\r\n\r\n    public position: IPoint;\r\n    private _startingPos: IPoint;\r\n\r\n    public softDropPoints = 0;\r\n\r\n    constructor(startingPosition: IPoint) {\r\n        this._startingPos = startingPosition;\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.position = clonePoint(this._startingPos);\r\n        this._shape = getRandomShape();\r\n        resetControls();\r\n        this.softDropPoints = 0;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/player.ts","import Panel from '../components/panel';\r\nimport Board from '../models/board';\r\nimport Player from '../models/player';\r\n\r\nconst boardSize = {\r\n    width: 10,\r\n    height: 20\r\n};\r\n\r\nexport const player = new Player({ x: boardSize.width / 2 - 1, y: 0 });\r\nexport const panel = new Panel('game');\r\nexport const board = new Board(boardSize);\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/storage.ts","import loadPlayerScore from './components/player-score';\r\nimport { setLoopSpeed } from './services/gameloop';\r\nimport handleInput from './services/key-handling';\r\nimport settings from './settings';\r\nimport './vendor/modernizr.min.js';\r\n\r\nsetLoopSpeed(settings.gameSpeed);\r\nhandleInput();\r\nloadPlayerScore();\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/index.ts","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/hammerjs/hammer.js\n// module id = 1\n// module chunks = 0","/*! modernizr 3.5.0 (Custom Build) | MIT *\r\n * https://modernizr.com/download/?-canvas-localstorage-serviceworker-sessionstorage-touchevents-webgl !*/\r\n!function(e,t,n){function o(e,t){return typeof e===t}function r(){var e,t,n,r,s,a,i;for(var d in l)if(l.hasOwnProperty(d)){if(e=[],t=l[d],t.name&&(e.push(t.name.toLowerCase()),t.options&&t.options.aliases&&t.options.aliases.length))for(n=0;n<t.options.aliases.length;n++)e.push(t.options.aliases[n].toLowerCase());for(r=o(t.fn,\"function\")?t.fn():t.fn,s=0;s<e.length;s++)a=e[s],i=a.split(\".\"),1===i.length?Modernizr[i[0]]=r:(!Modernizr[i[0]]||Modernizr[i[0]]instanceof Boolean||(Modernizr[i[0]]=new Boolean(Modernizr[i[0]])),Modernizr[i[0]][i[1]]=r),c.push((r?\"\":\"no-\")+i.join(\"-\"))}}function s(){return\"function\"!=typeof t.createElement?t.createElement(arguments[0]):u?t.createElementNS.call(t,\"http://www.w3.org/2000/svg\",arguments[0]):t.createElement.apply(t,arguments)}function a(){var e=t.body;return e||(e=s(u?\"svg\":\"body\"),e.fake=!0),e}function i(e,n,o,r){var i,l,d,c,u=\"modernizr\",p=s(\"div\"),v=a();if(parseInt(o,10))for(;o--;)d=s(\"div\"),d.id=r?r[o]:u+(o+1),p.appendChild(d);return i=s(\"style\"),i.type=\"text/css\",i.id=\"s\"+u,(v.fake?v:p).appendChild(i),v.appendChild(p),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(t.createTextNode(e)),p.id=u,v.fake&&(v.style.background=\"\",v.style.overflow=\"hidden\",c=f.style.overflow,f.style.overflow=\"hidden\",f.appendChild(v)),l=n(p,e),v.fake?(v.parentNode.removeChild(v),f.style.overflow=c,f.offsetHeight):p.parentNode.removeChild(p),!!l}var l=[],d={_version:\"3.5.0\",_config:{classPrefix:\"\",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(e,t){var n=this;setTimeout(function(){t(n[e])},0)},addTest:function(e,t,n){l.push({name:e,fn:t,options:n})},addAsyncTest:function(e){l.push({name:null,fn:e})}},Modernizr=function(){};Modernizr.prototype=d,Modernizr=new Modernizr,Modernizr.addTest(\"serviceworker\",\"serviceWorker\"in navigator),Modernizr.addTest(\"localstorage\",function(){var e=\"modernizr\";try{return localStorage.setItem(e,e),localStorage.removeItem(e),!0}catch(t){return!1}}),Modernizr.addTest(\"sessionstorage\",function(){var e=\"modernizr\";try{return sessionStorage.setItem(e,e),sessionStorage.removeItem(e),!0}catch(t){return!1}});var c=[],f=t.documentElement,u=\"svg\"===f.nodeName.toLowerCase();Modernizr.addTest(\"canvas\",function(){var e=s(\"canvas\");return!(!e.getContext||!e.getContext(\"2d\"))}),Modernizr.addTest(\"webgl\",function(){var t=s(\"canvas\"),n=\"probablySupportsContext\"in t?\"probablySupportsContext\":\"supportsContext\";return n in t?t[n](\"webgl\")||t[n](\"experimental-webgl\"):\"WebGLRenderingContext\"in e});var p=d._config.usePrefixes?\" -webkit- -moz- -o- -ms- \".split(\" \"):[\"\",\"\"];d._prefixes=p;var v=d.testStyles=i;Modernizr.addTest(\"touchevents\",function(){var n;if(\"ontouchstart\"in e||e.DocumentTouch&&t instanceof DocumentTouch)n=!0;else{var o=[\"@media (\",p.join(\"touch-enabled),(\"),\"heartz\",\")\",\"{#modernizr{top:9px;position:absolute}}\"].join(\"\");v(o,function(e){n=9===e.offsetTop})}return n}),r(),delete d.addTest,delete d.addAsyncTest;for(var m=0;m<Modernizr._q.length;m++)Modernizr._q[m]();e.Modernizr=Modernizr}(window,document);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/vendor/modernizr.min.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}