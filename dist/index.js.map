{"version":3,"sources":["webpack:///index.js","webpack:///webpack/bootstrap feaae355635828ab203c","webpack:///./src/services/player-score.ts","webpack:///./src/services/draw-grid.ts","webpack:///./src/models/color.ts","webpack:///./src/services/draw-matrix.ts","webpack:///./src/interfaces/point.ts","webpack:///./src/services/arrays.ts","webpack:///./src/services/matrix-calculations.ts","webpack:///./src/services/ghost-matrix.ts","webpack:///./src/services/view-matrix.ts","webpack:///./src/services/key-handling.ts","webpack:///./src/services/random-shape.ts","webpack:///./src/services/game-over.ts","webpack:///./src/services/gameloop.ts","webpack:///./src/components/player-score.ts","webpack:///./src/settings.ts","webpack:///./src/components/panel.ts","webpack:///./src/models/board.ts","webpack:///./src/services/timer.ts","webpack:///./src/services/unique-array.ts","webpack:///./src/models/shape.ts","webpack:///./src/models/shapes/i.ts","webpack:///./src/models/shapes/j.ts","webpack:///./src/models/shapes/l.ts","webpack:///./src/models/shapes/o.ts","webpack:///./src/models/shapes/s.ts","webpack:///./src/models/shapes/t.ts","webpack:///./src/models/shapes/z.ts","webpack:///./src/models/player.ts","webpack:///./src/services/storage.ts","webpack:///./src/index.ts","webpack:///./node_modules/hammerjs/hammer.js","webpack:///./src/vendor/modernizr.min.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","addScore","points","currentScore","triggerScoreChange","resetScore","onScoreChange","handler","triggerOnInit","subscribers","push","forEach","drawGrid","panel","gridSize","tileSize","width","size","height","ctx","strokeStyle","lineWidth","pixelRatio","x","beginPath","moveTo","lineTo","stroke","y","getColorCode","color","drawMatrix","matrix","length","col","item","src_settings","debug","drawEmptyTiles","fillStyle","emptyColor","fillRect","Math","ceil","clonePoint","point","pointEquals","a","b","findIndex","array","predicate","findAny","createMatrix","result","Array","copyMatrix","reduce","slice","getMatrixSize","matrixEquals","m1","m2","value","mergeMatrixes","parent","child","target","childMatrix","position","j","xyMatrix","rotateMatrix","reverse","matrixContains","matrixesColliding","getUnstuckPosition","isColliding","shape","maxOffset","pos","createGhost","board","pm","collides","map","ghostColor","getViewMatrix","playerMatrix","storage_player","blocks","ghost","storage_board","movePiece","touchX","canvasWidth","storage_panel","canvas","offsetWidth","borderLeft","offsetLeft","borderRight","touchingCol","shapeWidth","shapeCenterX","newCol","floor","currentCol","console","log","deltaCol","handleKeyDown","resetControls","keysDown","remove","keyCode","repeated","newPosition","beforeMatrix","triggered","hardDropped","rotate","unstuckPos","bind","sdPoints","softDrop","softDropPoints","softDropMax","nextPos","hdPoints","hardDrop","min","hardDropMax","posChanged","newMatrix","placePiece","rotationChanged","stopLockTimeout","draw","getRandomShape","Shape","shapes","random","gameOver","clear","reset","place","linesCleared","clearFullLines","lockTimeout","stop","update","newPos","start","scoreEl","interval","currentSeconds","settings","gameSpeed","1","2","3","4","placementTimeout","emptyTileColor","panel_Panel","Panel","id","document","getElementById","this","devicePixelRatio","parseInt","getAttribute","setAttribute","offsetHeight","getContext","Error","clearRect","components_panel","board_Board","Board","_blocks","_this","fullRows","getFullLines","row","deleteRow","rowCount","incompleteRows","rows","_i","_a","splice","unshift","undefined","contains","models_board","hammer","Timer","repeat","_running","_handler","_interval","_repeat","executeOnInit","_handle","setInterval","setTimeout","clearInterval","clearTimeout","timer","UniqueArray","_array","add","index","indexOf","unique_array","keyInterval","values","code","keyThresholdTimer","shape_Shape","models_shape","__extends","extendStatics","setPrototypeOf","__proto__","__","constructor","create","i_I","_super","I","shapes_i","j___extends","j_c","j_J","J","l___extends","l_c","l_L","L","o___extends","o_c","o_O","O","s___extends","s_c","s_S","S","t___extends","t_c","t_T","T","t","z___extends","z_c","z_Z","Z","z","player_Player","Player","startingPosition","_startingPos","_shape","player","boardSize","seconds","window","running","addEventListener","e","preventDefault","count","mc","body","direction","threshold","on","center","score","textContent","toLocaleString","__WEBPACK_AMD_DEFINE_RESULT__","exportName","setTimeoutContext","fn","timeout","context","bindFn","invokeArrayArg","arg","isArray","each","obj","iterator","deprecate","method","message","deprecationMessage","stack","replace","warn","apply","arguments","inherit","base","properties","childP","baseP","assign","boolOrFn","val","args","TYPE_FUNCTION","ifUndefined","val1","val2","addEventListeners","types","splitStr","type","removeEventListeners","removeEventListener","hasParent","node","parentNode","inStr","str","find","trim","split","inArray","src","findByKey","toArray","uniqueArray","key","sort","results","prefixed","prefix","prop","camelProp","toUpperCase","VENDOR_PREFIXES","uniqueId","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","Input","manager","callback","self","options","inputTarget","domHandler","ev","enable","init","createInputInstance","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","SUPPORT_ONLY_TOUCH","TouchInput","SUPPORT_TOUCH","TouchMouseInput","MouseInput","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","INPUT_START","isFinal","INPUT_END","INPUT_CANCEL","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","getCenter","timeStamp","now","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offsetDirection","getDirection","deltaX","deltaY","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","abs","scale","getScale","rotation","getRotation","maxPointers","computeIntervalInputData","srcEvent","offset","offsetDelta","prevDelta","velocity","velocityX","velocityY","last","lastInterval","COMPUTE_INTERVAL","v","clientX","round","clientY","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","p1","p2","props","PROPS_XY","sqrt","atan2","PI","end","PROPS_CLIENT_XY","evEl","MOUSE_ELEMENT_EVENTS","evWin","MOUSE_WINDOW_EVENTS","pressed","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","SingleTouchInput","evTarget","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_TARGET_EVENTS","targetIds","getTouches","allTouches","INPUT_MOVE","identifier","targetTouches","changedTargetTouches","filter","touch","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","removeLastTouch","DEDUP_TIMEOUT","isSyntheticEvent","dx","dy","DEDUP_DISTANCE","TouchAction","set","cleanTouchActions","actions","TOUCH_ACTION_NONE","hasPanX","TOUCH_ACTION_PAN_X","hasPanY","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_AUTO","Recognizer","defaults","state","STATE_POSSIBLE","simultaneous","requireFail","stateStr","STATE_CANCELLED","STATE_ENDED","STATE_CHANGED","STATE_BEGAN","directionStr","getRecognizerByNameIfManager","otherRecognizer","recognizer","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","Hammer","recognizers","preset","Manager","handlers","oldCssProps","touchAction","toggleCssProps","recognizeWith","requireFailure","style","cssProps","triggerDomEvent","event","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","TEST_ELEMENT","createElement","Date","TypeError","output","source","nextKey","extend","dest","merge","keys","MOBILE_REGEX","test","navigator","userAgent","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","5","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TOUCH_INPUT_MAP","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","NATIVE_TOUCH_ACTION","TOUCH_ACTION_MAP","touchMap","cssSupports","CSS","supports","compute","getTouchAction","join","preventDefaults","prevented","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_RECOGNIZED","dropRecognizeWith","dropRequireFailure","hasRequireFailures","canRecognizeWith","additionalEvent","tryEmit","canEmit","inputDataClone","process","attrTest","optionPointers","isRecognized","isValid","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","taps","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","force","stopped","curRecognizer","existing","events","off","STATE_FAILED","Tap","Pan","Swipe","Pinch","Rotate","Press","u","createElementNS","fake","r","appendChild","styleSheet","cssText","createTextNode","background","overflow","f","removeChild","_version","_config","classPrefix","enableClasses","enableJSClass","usePrefixes","_q","addTest","addAsyncTest","Modernizr","localStorage","setItem","removeItem","sessionStorage","documentElement","nodeName","_prefixes","testStyles","DocumentTouch","offsetTop","aliases","Boolean"],"mappings":"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","file":"index.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./src/services/player-score.ts\nvar currentScore = 0;\r\nfunction addScore(points) {\r\n    currentScore += points;\r\n    triggerScoreChange();\r\n}\r\nfunction resetScore() {\r\n    currentScore = 0;\r\n    triggerScoreChange();\r\n}\r\nvar subscribers = [];\r\nfunction onScoreChange(handler, triggerOnInit) {\r\n    if (triggerOnInit === void 0) { triggerOnInit = false; }\r\n    subscribers.push(handler);\r\n    if (triggerOnInit)\r\n        handler(currentScore);\r\n}\r\nfunction triggerScoreChange() {\r\n    subscribers.forEach(function (handler) { return handler(currentScore); });\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/player-score.ts\n\r\nvar scoreEl;\r\nfunction loadPlayerScore() {\r\n    scoreEl = document.getElementById('player-score');\r\n    onScoreChange(function (score) {\r\n        scoreEl.textContent = score.toLocaleString();\r\n    }, true);\r\n}\r\n\n// CONCATENATED MODULE: ./src/settings.ts\nvar settings = {\r\n    gameSpeed: 0.4,\r\n    points: {\r\n        linesCleared: {\r\n            1: 40,\r\n            2: 100,\r\n            3: 300,\r\n            4: 1200\r\n        },\r\n        softDrop: 1,\r\n        hardDrop: 2,\r\n        softDropMax: 20,\r\n        hardDropMax: 40\r\n    },\r\n    placementTimeout: 0.5,\r\n    debug: {\r\n        drawEmptyTiles: false,\r\n        emptyTileColor: '#f1f1f1'\r\n    }\r\n};\r\n/* harmony default export */ var src_settings = (settings);\r\n\n// CONCATENATED MODULE: ./src/services/draw-grid.ts\nfunction drawGrid(panel, gridSize) {\r\n    var tileSize = {\r\n        width: panel.size.width / gridSize.width,\r\n        height: panel.size.height / gridSize.height\r\n    };\r\n    var ctx = panel.ctx;\r\n    ctx.strokeStyle = '#efefef';\r\n    ctx.lineWidth = panel.pixelRatio;\r\n    for (var x = 0; x < panel.size.width; x += tileSize.width) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, 0);\r\n        ctx.lineTo(x, panel.size.height);\r\n        ctx.stroke();\r\n    }\r\n    for (var y = 0; y < panel.size.height; y += tileSize.height) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, y);\r\n        ctx.lineTo(panel.size.width, y);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/models/color.ts\nfunction getColorCode(color) {\r\n    switch (color) {\r\n        case 1:\r\n            return '#ffeb3b';\r\n        case 2:\r\n            return '#03a9f4';\r\n        case 3:\r\n            return '#f44336';\r\n        case 4:\r\n            return '#4caf50';\r\n        case 5:\r\n            return '#ff9800';\r\n        case 6:\r\n            return '#fbafbc';\r\n        case 7:\r\n            return '#9c27b0';\r\n        case 8:\r\n            return '#e0e0e0';\r\n        default:\r\n            return '#000';\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/draw-matrix.ts\n\r\n\r\nvar emptyColor = src_settings.debug.emptyTileColor;\r\nfunction drawMatrix(panel, matrix) {\r\n    var ctx = panel.ctx;\r\n    var tileSize = {\r\n        width: panel.size.width / matrix.length,\r\n        height: panel.size.height / matrix[0].length\r\n    };\r\n    matrix.forEach(function (col, x) { return col.forEach(function (item, y) {\r\n        if (typeof item === 'undefined' ||\r\n            !src_settings.debug.drawEmptyTiles && !item)\r\n            return;\r\n        ctx.fillStyle = item ? getColorCode(item) : emptyColor;\r\n        ctx.fillRect(x * tileSize.width | 0, y * tileSize.height | 0, Math.ceil(tileSize.width), Math.ceil(tileSize.height));\r\n    }); });\r\n}\r\n\n// CONCATENATED MODULE: ./src/interfaces/point.ts\nfunction clonePoint(point) {\r\n    return { x: point.x, y: point.y };\r\n}\r\nfunction pointEquals(a, b) {\r\n    return a.x === b.x && a.y === b.y;\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/arrays.ts\nfunction findIndex(array, predicate) {\r\n    for (var i = 0; i < array.length; i++) {\r\n        var value = array[i];\r\n        if (predicate(value, i)) {\r\n            return i;\r\n        }\r\n    }\r\n}\r\nfunction findAny(array, predicate) {\r\n    return typeof findIndex(array, predicate) !== 'undefined';\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/matrix-calculations.ts\n\r\n\r\nfunction createMatrix(size) {\r\n    var result = [];\r\n    for (var col = 0; col < size.width; col++) {\r\n        result[col] = new Array(size.height);\r\n    }\r\n    return result;\r\n}\r\nfunction copyMatrix(matrix) {\r\n    return matrix.reduce(function (result, col, x) {\r\n        result[x] = col.slice();\r\n        return result;\r\n    }, []);\r\n}\r\nfunction getMatrixSize(matrix) {\r\n    return {\r\n        width: matrix.length,\r\n        height: matrix[0].length\r\n    };\r\n}\r\nfunction matrixEquals(m1, m2) {\r\n    if (m1.length !== m2.length\r\n        || m1[0].length !== m2[0].length) {\r\n        return false;\r\n    }\r\n    return !findAny(m1, function (col, x) {\r\n        return findAny(col, function (value, y) {\r\n            return value !== m2[x][y];\r\n        });\r\n    });\r\n}\r\nfunction mergeMatrixes(parent, child, target) {\r\n    if (target === void 0) { target = copyMatrix(parent); }\r\n    var childMatrix = child.matrix, position = child.position;\r\n    var result = target;\r\n    for (var i = 0; i < childMatrix.length; i++) {\r\n        for (var j = 0; j < childMatrix[0].length; j++) {\r\n            var value = childMatrix[i][j];\r\n            if (typeof value === 'undefined')\r\n                continue;\r\n            var x = i + position.x;\r\n            var y = j + position.y;\r\n            if (x >= 0 && x < parent.length &&\r\n                y >= 0 && y < parent[0].length &&\r\n                (value || !result[x][y])) {\r\n                result[x][y] = value;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction xyMatrix(matrix) {\r\n    return rotateMatrix(matrix)\r\n        .reduce(function (result, col, x) {\r\n        result[x] = col.reverse();\r\n        return result;\r\n    }, []);\r\n}\r\nfunction rotateMatrix(matrix, reverse) {\r\n    if (reverse === void 0) { reverse = false; }\r\n    var l = matrix.length;\r\n    var result = createMatrix({ width: l, height: l });\r\n    for (var x = 0; x < l; x++) {\r\n        for (var y = 0; y < l; y++) {\r\n            result[x][y] = reverse\r\n                ? matrix[l - y - 1][x]\r\n                : matrix[y][l - x - 1];\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction matrixContains(parent, child) {\r\n    var childMatrix = child.matrix, position = child.position;\r\n    for (var i = 0; i < childMatrix.length; i++) {\r\n        var col = childMatrix[i];\r\n        for (var j = 0; j < col.length; j++) {\r\n            if (!col[j])\r\n                continue;\r\n            var x = i + position.x;\r\n            var y = j + position.y;\r\n            if (x < 0 || x >= parent.length ||\r\n                y < 0 || y >= parent[0].length) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction matrixesColliding(parent, child) {\r\n    var childMatrix = child.matrix, position = child.position;\r\n    for (var x = 0; x < childMatrix.length; x++) {\r\n        for (var y = 0; y < childMatrix[0].length; y++) {\r\n            if (!childMatrix[x][y])\r\n                continue;\r\n            var col = parent[x + position.x];\r\n            if (!col)\r\n                continue;\r\n            if (col[y + position.y]) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction getUnstuckPosition(matrix, isColliding) {\r\n    var shape = matrix.matrix, position = matrix.position;\r\n    var maxOffset = Math.ceil(shape.length / 2);\r\n    for (var i = 1; i <= maxOffset; i++) {\r\n        var pos = clonePoint(position);\r\n        pos.y += i;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        }))\r\n            return pos;\r\n        pos.y -= i * 2;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        }))\r\n            return pos;\r\n        pos.y += i;\r\n        pos.x += i;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        }))\r\n            return pos;\r\n        pos.x -= i * 2;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        }))\r\n            return pos;\r\n        pos.x += i;\r\n    }\r\n    return null;\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/panel.ts\n\r\n\r\n\r\nvar panel_Panel = (function () {\r\n    function Panel(id) {\r\n        var canvas = document.getElementById(id);\r\n        this.pixelRatio = devicePixelRatio || 1;\r\n        this.size = {\r\n            width: parseInt(canvas.getAttribute('width'), 10) * this.pixelRatio,\r\n            height: parseInt(canvas.getAttribute('height'), 10) * this.pixelRatio\r\n        };\r\n        if (this.size.width !== canvas.offsetWidth) {\r\n            canvas.setAttribute('width', \"\" + this.size.width);\r\n        }\r\n        if (this.size.height !== canvas.offsetHeight) {\r\n            canvas.setAttribute('height', \"\" + this.size.height);\r\n        }\r\n        var ctx = canvas.getContext('2d');\r\n        if (!ctx)\r\n            throw new Error('Context not found!');\r\n        this.ctx = ctx;\r\n        this.canvas = canvas;\r\n    }\r\n    Panel.prototype.draw = function (matrix) {\r\n        this.clear();\r\n        drawGrid(this, getMatrixSize(matrix));\r\n        drawMatrix(this, matrix);\r\n    };\r\n    Panel.prototype.clear = function () {\r\n        this.ctx.clearRect(0, 0, this.size.width, this.size.height);\r\n    };\r\n    return Panel;\r\n}());\r\n/* harmony default export */ var components_panel = (panel_Panel);\r\n\n// CONCATENATED MODULE: ./src/models/board.ts\n\r\nvar board_Board = (function () {\r\n    function Board(size) {\r\n        this.size = size;\r\n        this.clear();\r\n    }\r\n    Object.defineProperty(Board.prototype, \"blocks\", {\r\n        get: function () { return this._blocks; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Board.prototype.place = function (shape, position) {\r\n        mergeMatrixes(this.blocks, {\r\n            matrix: shape.blocks,\r\n            position: position\r\n        }, this.blocks);\r\n    };\r\n    Board.prototype.clearFullLines = function () {\r\n        var _this = this;\r\n        var fullRows = this.getFullLines();\r\n        fullRows.forEach(function (row) { return _this.deleteRow(row); });\r\n        return fullRows.length;\r\n    };\r\n    Board.prototype.getFullLines = function () {\r\n        var rowCount = this._blocks[0].length;\r\n        var incompleteRows = new Array(rowCount - 1);\r\n        rows: for (var y = 0; y < rowCount; y++) {\r\n            for (var _i = 0, _a = this._blocks; _i < _a.length; _i++) {\r\n                var col = _a[_i];\r\n                if (!col[y]) {\r\n                    incompleteRows[y] = true;\r\n                    continue rows;\r\n                }\r\n            }\r\n        }\r\n        var result = [];\r\n        for (var row = 0; row < rowCount; row++) {\r\n            if (!incompleteRows[row])\r\n                result.push(row);\r\n        }\r\n        return result;\r\n    };\r\n    Board.prototype.deleteRow = function (row) {\r\n        this._blocks.forEach(function (col) {\r\n            col.splice(row, 1);\r\n            col.unshift(undefined);\r\n        });\r\n    };\r\n    Board.prototype.clear = function () {\r\n        this._blocks = [];\r\n        for (var x = 0; x < this.size.width; x++) {\r\n            this._blocks[x] = new Array(this.size.height);\r\n        }\r\n    };\r\n    Board.prototype.contains = function (matrix) {\r\n        return matrixContains(this._blocks, matrix);\r\n    };\r\n    Board.prototype.collides = function (matrix) {\r\n        return !this.contains(matrix)\r\n            || matrixesColliding(this.blocks, matrix);\r\n    };\r\n    return Board;\r\n}());\r\n/* harmony default export */ var models_board = (board_Board);\r\n\n// EXTERNAL MODULE: ./node_modules/hammerjs/hammer.js\nvar hammer = __webpack_require__(1);\nvar hammer_default = /*#__PURE__*/__webpack_require__.n(hammer);\n\n// CONCATENATED MODULE: ./src/services/timer.ts\nvar Timer = (function () {\r\n    function Timer(handler, interval, repeat) {\r\n        if (repeat === void 0) { repeat = true; }\r\n        this._running = false;\r\n        this._handler = handler;\r\n        this._interval = interval;\r\n        this._repeat = repeat;\r\n    }\r\n    Object.defineProperty(Timer.prototype, \"running\", {\r\n        get: function () { return this._running; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Timer.prototype.start = function (executeOnInit) {\r\n        var _this = this;\r\n        if (executeOnInit === void 0) { executeOnInit = false; }\r\n        if (executeOnInit) {\r\n            this._handler();\r\n            if (!this._repeat)\r\n                return;\r\n        }\r\n        this.stop();\r\n        this._handle = (this._repeat\r\n            ? setInterval\r\n            : setTimeout)(function () {\r\n            _this._handler();\r\n            _this._running = false;\r\n        }, this._interval);\r\n        this._running = true;\r\n    };\r\n    Timer.prototype.stop = function () {\r\n        this._handle = (this._repeat\r\n            ? clearInterval\r\n            : clearTimeout)(this._handle);\r\n        this._running = false;\r\n    };\r\n    return Timer;\r\n}());\r\n/* harmony default export */ var timer = (Timer);\r\n\n// CONCATENATED MODULE: ./src/services/unique-array.ts\nvar UniqueArray = (function () {\r\n    function UniqueArray() {\r\n        this._array = [];\r\n    }\r\n    Object.defineProperty(UniqueArray.prototype, \"count\", {\r\n        get: function () { return this._array.length; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UniqueArray.prototype, \"values\", {\r\n        get: function () { return this._array; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    UniqueArray.prototype.add = function (value) {\r\n        if (!this.contains(value)) {\r\n            this._array.push(value);\r\n        }\r\n    };\r\n    UniqueArray.prototype.remove = function (value) {\r\n        var index = this._array.indexOf(value);\r\n        if (index >= 0) {\r\n            this._array.splice(index, 1);\r\n        }\r\n    };\r\n    UniqueArray.prototype.contains = function (value) {\r\n        return this._array.indexOf(value) >= 0;\r\n    };\r\n    return UniqueArray;\r\n}());\r\n/* harmony default export */ var unique_array = (UniqueArray);\r\n\n// CONCATENATED MODULE: ./src/services/ghost-matrix.ts\n\r\nvar ghostColor = 8;\r\nfunction createGhost(board, pm) {\r\n    var matrix = pm.matrix;\r\n    var position = clonePoint(pm.position);\r\n    var y = position.y;\r\n    do {\r\n        y++;\r\n    } while (!board.collides({\r\n        matrix: matrix,\r\n        position: { x: position.x, y: y }\r\n    }));\r\n    position.y = y - 1;\r\n    var ghost = matrix.map(function (col) { return col.map(function (x) {\r\n        if (x)\r\n            return ghostColor;\r\n    }); });\r\n    return { matrix: ghost, position: position };\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/view-matrix.ts\n\r\n\r\n\r\nfunction getViewMatrix() {\r\n    var playerMatrix = {\r\n        matrix: storage_player.shape.blocks,\r\n        position: storage_player.position\r\n    };\r\n    var ghost = createGhost(storage_board, playerMatrix);\r\n    return mergeMatrixes(mergeMatrixes(storage_board.blocks, ghost), playerMatrix);\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/key-handling.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar keysDown = new unique_array();\r\nvar keyInterval = new timer(function () {\r\n    keysDown.values.forEach(function (code) {\r\n        handleKeyDown(code, true);\r\n    });\r\n}, 90);\r\nvar keyThresholdTimer = new timer(function () {\r\n    keyInterval.start();\r\n}, 200, false);\r\nfunction handleInput() {\r\n    document.addEventListener('keydown', function (e) {\r\n        if (e.repeat)\r\n            return;\r\n        var keyCode = e.code;\r\n        if (handleKeyDown(keyCode, false)) {\r\n            e.preventDefault();\r\n            keysDown.add(keyCode);\r\n            if (keyCode === 'ArrowLeft' || keyCode === 'ArrowRight') {\r\n                keyInterval.stop();\r\n                keyThresholdTimer.start();\r\n            }\r\n            else\r\n                keyInterval.start();\r\n        }\r\n    });\r\n    document.addEventListener('keyup', function (e) {\r\n        if (keysDown.contains(e.code)) {\r\n            keysDown.remove(e.code);\r\n            if (keysDown.count === 0) {\r\n                keyThresholdTimer.stop();\r\n                keyInterval.stop();\r\n            }\r\n        }\r\n    });\r\n    var mc = new hammer[\"Manager\"](document.body);\r\n    mc.add(new hammer[\"Tap\"]());\r\n    mc.add(new hammer[\"Swipe\"]({ direction: hammer[\"DIRECTION_DOWN\"] }));\r\n    mc.add(new hammer[\"Pan\"]({ direction: hammer[\"DIRECTION_HORIZONTAL\"], threshold: 20 }));\r\n    mc.on('tap', function () { return handleKeyDown('ArrowUp', false); });\r\n    mc.on('panleft', function (e) { return movePiece(e.center.x); });\r\n    mc.on('panright', function (e) { return movePiece(e.center.x); });\r\n    mc.on('swipedown', function () { return handleKeyDown('Space', false); });\r\n}\r\nfunction movePiece(touchX) {\r\n    var canvasWidth = storage_panel.canvas.offsetWidth;\r\n    var borderLeft = storage_panel.canvas.offsetLeft;\r\n    var borderRight = borderLeft + canvasWidth;\r\n    if (touchX < borderLeft\r\n        || touchX > borderRight) {\r\n        return;\r\n    }\r\n    var tileSize = canvasWidth / storage_board.size.width;\r\n    var touchingCol = (touchX - borderLeft) / tileSize;\r\n    var shapeWidth = storage_player.shape.blocks.reduce(function (width, col) {\r\n        if (findAny(col, function (x) { return !!x; }))\r\n            width++;\r\n        return width;\r\n    }, 0);\r\n    var shapeCenterX = ((findIndex(storage_player.shape.blocks, function (col) { return findAny(col, function (x) { return !!x; }); }) || 0)\r\n        + shapeWidth) / 2;\r\n    var newCol = Math.floor(touchingCol - shapeCenterX);\r\n    var currentCol = storage_player.position.x;\r\n    if (newCol === currentCol)\r\n        return;\r\n    console.log(currentCol, 'to', newCol);\r\n    var deltaCol = currentCol - newCol;\r\n    if (deltaCol > 0) {\r\n        for (var i = 0; i < deltaCol; i++) {\r\n            handleKeyDown('ArrowLeft', false);\r\n        }\r\n    }\r\n    else {\r\n        for (var i = 0; i > deltaCol; i--) {\r\n            handleKeyDown('ArrowRight', false);\r\n        }\r\n    }\r\n}\r\nfunction resetControls() {\r\n    keysDown.remove('ArrowDown');\r\n}\r\nfunction handleKeyDown(keyCode, repeated) {\r\n    var newPosition = {\r\n        x: storage_player.position.x,\r\n        y: storage_player.position.y\r\n    };\r\n    var beforeMatrix = copyMatrix(storage_player.shape.blocks);\r\n    var triggered = true;\r\n    var hardDropped = false;\r\n    switch (keyCode) {\r\n        case 'ArrowUp':\r\n            if (repeated)\r\n                return true;\r\n            storage_player.shape.rotate();\r\n            var playerMatrix = {\r\n                matrix: storage_player.shape.blocks,\r\n                position: newPosition\r\n            };\r\n            if (storage_board.collides(playerMatrix)) {\r\n                var unstuckPos = getUnstuckPosition(playerMatrix, storage_board.collides.bind(storage_board));\r\n                if (!unstuckPos) {\r\n                    storage_player.shape.rotate(true);\r\n                }\r\n                else {\r\n                    newPosition = unstuckPos;\r\n                }\r\n            }\r\n            break;\r\n        case 'ArrowRight':\r\n            newPosition.x++;\r\n            break;\r\n        case 'ArrowDown':\r\n            newPosition.y++;\r\n            var sdPoints = src_settings.points.softDrop;\r\n            storage_player.softDropPoints += sdPoints;\r\n            if (storage_player.softDropPoints < src_settings.points.softDropMax) {\r\n                addScore(sdPoints);\r\n            }\r\n            break;\r\n        case 'ArrowLeft':\r\n            newPosition.x--;\r\n            break;\r\n        case 'Space':\r\n            if (repeated)\r\n                return true;\r\n            var nextPos = newPosition;\r\n            var hdPoints = 0;\r\n            do {\r\n                nextPos = { x: nextPos.x, y: nextPos.y + 1 };\r\n                hdPoints += src_settings.points.hardDrop;\r\n            } while (!storage_board.collides({\r\n                matrix: storage_player.shape.blocks,\r\n                position: nextPos\r\n            }));\r\n            newPosition = { x: nextPos.x, y: nextPos.y - 1 };\r\n            addScore(Math.min(hdPoints - src_settings.points.hardDrop, src_settings.points.hardDropMax));\r\n            hardDropped = true;\r\n            break;\r\n        default:\r\n            triggered = false;\r\n            break;\r\n    }\r\n    var posChanged = !pointEquals(storage_player.position, newPosition);\r\n    if (posChanged || hardDropped) {\r\n        var newMatrix = {\r\n            matrix: storage_player.shape.blocks,\r\n            position: newPosition\r\n        };\r\n        if (!storage_board.collides(newMatrix)) {\r\n            storage_player.position = newPosition;\r\n        }\r\n        else\r\n            posChanged = false;\r\n        if (hardDropped\r\n            || keyCode === 'ArrowDown'\r\n                && storage_board.collides(newMatrix)) {\r\n            placePiece();\r\n        }\r\n    }\r\n    var rotationChanged = !matrixEquals(storage_player.shape.blocks, beforeMatrix);\r\n    if (posChanged || rotationChanged) {\r\n        stopLockTimeout();\r\n        storage_panel.draw(getViewMatrix());\r\n    }\r\n    return triggered;\r\n}\r\n\n// CONCATENATED MODULE: ./src/models/shape.ts\n\r\nvar shape_Shape = (function () {\r\n    function Shape(blocks) {\r\n        this._blocks = blocks;\r\n    }\r\n    Object.defineProperty(Shape.prototype, \"blocks\", {\r\n        get: function () {\r\n            return this._blocks;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Shape.prototype.rotate = function (reverse) {\r\n        if (reverse === void 0) { reverse = false; }\r\n        this._blocks = rotateMatrix(this._blocks, reverse);\r\n    };\r\n    return Shape;\r\n}());\r\n/* harmony default export */ var models_shape = (shape_Shape);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/i.ts\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar c = 2;\r\nvar i_I = (function (_super) {\r\n    __extends(I, _super);\r\n    function I() {\r\n        return _super.call(this, xyMatrix([\r\n            [0, c, 0, 0],\r\n            [0, c, 0, 0],\r\n            [0, c, 0, 0],\r\n            [0, c, 0, 0]\r\n        ])) || this;\r\n    }\r\n    return I;\r\n}(models_shape));\r\n/* harmony default export */ var shapes_i = (i_I);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/j.ts\nvar j___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar j_c = 6;\r\nvar j_J = (function (_super) {\r\n    j___extends(J, _super);\r\n    function J() {\r\n        return _super.call(this, xyMatrix([\r\n            [0, j_c, 0],\r\n            [0, j_c, 0],\r\n            [j_c, j_c, 0]\r\n        ])) || this;\r\n    }\r\n    return J;\r\n}(models_shape));\r\n/* harmony default export */ var j = (j_J);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/l.ts\nvar l___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar l_c = 5;\r\nvar l_L = (function (_super) {\r\n    l___extends(L, _super);\r\n    function L() {\r\n        return _super.call(this, xyMatrix([\r\n            [0, l_c, 0],\r\n            [0, l_c, 0],\r\n            [0, l_c, l_c]\r\n        ])) || this;\r\n    }\r\n    return L;\r\n}(models_shape));\r\n/* harmony default export */ var l = (l_L);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/o.ts\nvar o___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar o_c = 1;\r\nvar o_O = (function (_super) {\r\n    o___extends(O, _super);\r\n    function O() {\r\n        return _super.call(this, xyMatrix([\r\n            [o_c, o_c],\r\n            [o_c, o_c]\r\n        ])) || this;\r\n    }\r\n    return O;\r\n}(models_shape));\r\n/* harmony default export */ var o = (o_O);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/s.ts\nvar s___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar s_c = 3;\r\nvar s_S = (function (_super) {\r\n    s___extends(S, _super);\r\n    function S() {\r\n        return _super.call(this, xyMatrix([\r\n            [0, s_c, s_c],\r\n            [s_c, s_c, 0],\r\n            [0, 0, 0]\r\n        ])) || this;\r\n    }\r\n    return S;\r\n}(models_shape));\r\n/* harmony default export */ var s = (s_S);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/t.ts\nvar t___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar t_c = 7;\r\nvar t_T = (function (_super) {\r\n    t___extends(T, _super);\r\n    function T() {\r\n        return _super.call(this, xyMatrix([\r\n            [t_c, t_c, t_c],\r\n            [0, t_c, 0],\r\n            [0, 0, 0]\r\n        ])) || this;\r\n    }\r\n    return T;\r\n}(models_shape));\r\n/* harmony default export */ var t = (t_T);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/z.ts\nvar z___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar z_c = 4;\r\nvar z_Z = (function (_super) {\r\n    z___extends(Z, _super);\r\n    function Z() {\r\n        return _super.call(this, xyMatrix([\r\n            [z_c, z_c, 0],\r\n            [0, z_c, z_c],\r\n            [0, 0, 0]\r\n        ])) || this;\r\n    }\r\n    return Z;\r\n}(models_shape));\r\n/* harmony default export */ var z = (z_Z);\r\n\n// CONCATENATED MODULE: ./src/services/random-shape.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar shapes = [shapes_i, j, l, o, s, t, z];\r\nfunction getRandomShape() {\r\n    var Shape = shapes[Math.floor(Math.random() * shapes.length)];\r\n    return new Shape();\r\n}\r\n\n// CONCATENATED MODULE: ./src/models/player.ts\n\r\n\r\n\r\nvar player_Player = (function () {\r\n    function Player(startingPosition) {\r\n        this.softDropPoints = 0;\r\n        this._startingPos = startingPosition;\r\n        this.reset();\r\n    }\r\n    Object.defineProperty(Player.prototype, \"shape\", {\r\n        get: function () {\r\n            return this._shape;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Player.prototype.reset = function () {\r\n        this.position = clonePoint(this._startingPos);\r\n        this._shape = getRandomShape();\r\n        resetControls();\r\n        this.softDropPoints = 0;\r\n    };\r\n    return Player;\r\n}());\r\n/* harmony default export */ var player = (player_Player);\r\n\n// CONCATENATED MODULE: ./src/services/storage.ts\n\r\n\r\n\r\nvar boardSize = {\r\n    width: 10,\r\n    height: 20\r\n};\r\nvar storage_player = new player({ x: boardSize.width / 2 - 1, y: 0 });\r\nvar storage_panel = new components_panel('game');\r\nvar storage_board = new models_board(boardSize);\r\n\n// CONCATENATED MODULE: ./src/services/game-over.ts\n\r\n\r\nfunction gameOver() {\r\n    storage_board.clear();\r\n    storage_player.reset();\r\n    resetScore();\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/gameloop.ts\n\r\n\r\n\r\n\r\n\r\n\r\nfunction placePiece() {\r\n    storage_board.place(storage_player.shape, storage_player.position);\r\n    var linesCleared = storage_board.clearFullLines();\r\n    if (linesCleared) {\r\n        var scoring = src_settings.points.linesCleared;\r\n        addScore(scoring[linesCleared]);\r\n    }\r\n    storage_player.reset();\r\n    if (storage_board.collides({\r\n        matrix: storage_player.shape.blocks,\r\n        position: storage_player.position\r\n    }))\r\n        gameOver();\r\n}\r\nvar lockTimeout = new timer(placePiece, src_settings.placementTimeout * 1000, false);\r\nfunction stopLockTimeout() {\r\n    lockTimeout.stop();\r\n}\r\nfunction update() {\r\n    var newPos = {\r\n        x: storage_player.position.x,\r\n        y: storage_player.position.y + 1\r\n    };\r\n    if (!storage_board.collides({ matrix: storage_player.shape.blocks, position: newPos })) {\r\n        storage_player.position = newPos;\r\n    }\r\n    else {\r\n        lockTimeout.start();\r\n    }\r\n    storage_panel.draw(getViewMatrix());\r\n}\r\nvar interval;\r\nvar currentSeconds;\r\nfunction setLoopSpeed(seconds) {\r\n    currentSeconds = seconds;\r\n    window.clearInterval(interval);\r\n    update();\r\n    interval = window.setInterval(function () {\r\n        if (!lockTimeout.running)\r\n            update();\r\n    }, seconds * 1000);\r\n}\r\n\n// EXTERNAL MODULE: ./src/vendor/modernizr.min.js\nvar modernizr_min = __webpack_require__(2);\nvar modernizr_min_default = /*#__PURE__*/__webpack_require__.n(modernizr_min);\n\n// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\n\r\nsetLoopSpeed(src_settings.gameSpeed);\r\nhandleInput();\r\nloadPlayerScore();\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n        return Hammer;\n    }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/*! modernizr 3.5.0 (Custom Build) | MIT *\r\n * https://modernizr.com/download/?-canvas-localstorage-serviceworker-sessionstorage-touchevents-webgl !*/\r\n!function(e,t,n){function o(e,t){return typeof e===t}function r(){var e,t,n,r,s,a,i;for(var d in l)if(l.hasOwnProperty(d)){if(e=[],t=l[d],t.name&&(e.push(t.name.toLowerCase()),t.options&&t.options.aliases&&t.options.aliases.length))for(n=0;n<t.options.aliases.length;n++)e.push(t.options.aliases[n].toLowerCase());for(r=o(t.fn,\"function\")?t.fn():t.fn,s=0;s<e.length;s++)a=e[s],i=a.split(\".\"),1===i.length?Modernizr[i[0]]=r:(!Modernizr[i[0]]||Modernizr[i[0]]instanceof Boolean||(Modernizr[i[0]]=new Boolean(Modernizr[i[0]])),Modernizr[i[0]][i[1]]=r),c.push((r?\"\":\"no-\")+i.join(\"-\"))}}function s(){return\"function\"!=typeof t.createElement?t.createElement(arguments[0]):u?t.createElementNS.call(t,\"http://www.w3.org/2000/svg\",arguments[0]):t.createElement.apply(t,arguments)}function a(){var e=t.body;return e||(e=s(u?\"svg\":\"body\"),e.fake=!0),e}function i(e,n,o,r){var i,l,d,c,u=\"modernizr\",p=s(\"div\"),v=a();if(parseInt(o,10))for(;o--;)d=s(\"div\"),d.id=r?r[o]:u+(o+1),p.appendChild(d);return i=s(\"style\"),i.type=\"text/css\",i.id=\"s\"+u,(v.fake?v:p).appendChild(i),v.appendChild(p),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(t.createTextNode(e)),p.id=u,v.fake&&(v.style.background=\"\",v.style.overflow=\"hidden\",c=f.style.overflow,f.style.overflow=\"hidden\",f.appendChild(v)),l=n(p,e),v.fake?(v.parentNode.removeChild(v),f.style.overflow=c,f.offsetHeight):p.parentNode.removeChild(p),!!l}var l=[],d={_version:\"3.5.0\",_config:{classPrefix:\"\",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(e,t){var n=this;setTimeout(function(){t(n[e])},0)},addTest:function(e,t,n){l.push({name:e,fn:t,options:n})},addAsyncTest:function(e){l.push({name:null,fn:e})}},Modernizr=function(){};Modernizr.prototype=d,Modernizr=new Modernizr,Modernizr.addTest(\"serviceworker\",\"serviceWorker\"in navigator),Modernizr.addTest(\"localstorage\",function(){var e=\"modernizr\";try{return localStorage.setItem(e,e),localStorage.removeItem(e),!0}catch(t){return!1}}),Modernizr.addTest(\"sessionstorage\",function(){var e=\"modernizr\";try{return sessionStorage.setItem(e,e),sessionStorage.removeItem(e),!0}catch(t){return!1}});var c=[],f=t.documentElement,u=\"svg\"===f.nodeName.toLowerCase();Modernizr.addTest(\"canvas\",function(){var e=s(\"canvas\");return!(!e.getContext||!e.getContext(\"2d\"))}),Modernizr.addTest(\"webgl\",function(){var t=s(\"canvas\"),n=\"probablySupportsContext\"in t?\"probablySupportsContext\":\"supportsContext\";return n in t?t[n](\"webgl\")||t[n](\"experimental-webgl\"):\"WebGLRenderingContext\"in e});var p=d._config.usePrefixes?\" -webkit- -moz- -o- -ms- \".split(\" \"):[\"\",\"\"];d._prefixes=p;var v=d.testStyles=i;Modernizr.addTest(\"touchevents\",function(){var n;if(\"ontouchstart\"in e||e.DocumentTouch&&t instanceof DocumentTouch)n=!0;else{var o=[\"@media (\",p.join(\"touch-enabled),(\"),\"heartz\",\")\",\"{#modernizr{top:9px;position:absolute}}\"].join(\"\");v(o,function(e){n=9===e.offsetTop})}return n}),r(),delete d.addTest,delete d.addAsyncTest;for(var m=0;m<Modernizr._q.length;m++)Modernizr._q[m]();e.Modernizr=Modernizr}(window,document);\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap feaae355635828ab203c","let currentScore = 0;\r\n\r\nexport function addScore(points: number): void {\r\n    currentScore += points;\r\n    triggerScoreChange();\r\n}\r\n\r\nexport function resetScore(): void {\r\n    currentScore = 0;\r\n    triggerScoreChange();\r\n}\r\n\r\nconst subscribers: Array<(score: number) => void> = [];\r\nexport function onScoreChange(handler: (score: number) => void, triggerOnInit = false): void {\r\n    subscribers.push(handler);\r\n    if (triggerOnInit) handler(currentScore);\r\n}\r\n\r\nfunction triggerScoreChange(): void {\r\n    subscribers.forEach(handler => handler(currentScore));\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/player-score.ts","import Panel from '../components/panel';\r\nimport { ISize } from '../interfaces/size';\r\n\r\nexport default function drawGrid(panel: Panel, gridSize: ISize): void {\r\n    const tileSize: ISize = {\r\n        width: panel.size.width / gridSize.width,\r\n        height: panel.size.height / gridSize.height\r\n    };\r\n\r\n    const { ctx } = panel;\r\n    ctx.strokeStyle = '#efefef';\r\n    ctx.lineWidth = panel.pixelRatio;\r\n\r\n    for (let x = 0; x < panel.size.width; x += tileSize.width) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, 0);\r\n        ctx.lineTo(x, panel.size.height);\r\n        ctx.stroke();\r\n    }\r\n\r\n    for (let y = 0; y < panel.size.height; y += tileSize.height) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, y);\r\n        ctx.lineTo(panel.size.width, y);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/draw-grid.ts","export const enum Color {\r\n    Yellow = 1,\r\n    Blue = 2,\r\n    Red = 3,\r\n    Green = 4,\r\n    Orange = 5,\r\n    Pink = 6,\r\n    Purple = 7,\r\n    Grey = 8\r\n}\r\n\r\nexport function getColorCode(color: Color): string {\r\n    switch (color) {\r\n        case Color.Yellow:\r\n            return '#ffeb3b';\r\n        case Color.Blue:\r\n            return '#03a9f4';\r\n        case Color.Red:\r\n            return '#f44336';\r\n        case Color.Green:\r\n            return '#4caf50';\r\n        case Color.Orange:\r\n            return '#ff9800';\r\n        case Color.Pink:\r\n            return '#fbafbc';\r\n        case Color.Purple:\r\n            return '#9c27b0';\r\n        case Color.Grey:\r\n            return '#e0e0e0';\r\n        default:\r\n            return '#000';\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/color.ts","import Panel from '../components/panel';\r\nimport Matrix from '../interfaces/matrix';\r\nimport { ISize } from '../interfaces/size';\r\nimport { getColorCode } from '../models/color';\r\nimport settings from '../settings';\r\n\r\nconst emptyColor = settings.debug.emptyTileColor;\r\n\r\nexport default function drawMatrix(panel: Panel, matrix: Matrix): void {\r\n    const ctx = panel.ctx;\r\n\r\n    const tileSize: ISize = {\r\n        width: panel.size.width / matrix.length,\r\n        height: panel.size.height / matrix[0].length\r\n    };\r\n\r\n    matrix.forEach((col, x) => col.forEach((item, y) => {\r\n        if (typeof item === 'undefined' ||\r\n            !settings.debug.drawEmptyTiles && !item) return;\r\n\r\n        ctx.fillStyle = item ? getColorCode(item) : emptyColor;\r\n        ctx.fillRect(\r\n            x * tileSize.width | 0,\r\n            y * tileSize.height | 0,\r\n            Math.ceil(tileSize.width),\r\n            Math.ceil(tileSize.height));\r\n    }));\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/draw-matrix.ts","export default interface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport function clonePoint(point: IPoint): IPoint {\r\n    return { x: point.x, y: point.y };\r\n}\r\n\r\nexport function pointEquals(a: IPoint, b: IPoint): boolean {\r\n    return a.x === b.x && a.y === b.y;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/interfaces/point.ts","export function findIndex<T>(array: T[], predicate: (item: T, index: number) => boolean): number | undefined {\r\n    for (let i = 0; i < array.length; i++) {\r\n        const value = array[i];\r\n        if (predicate(value, i)) {\r\n            return i;\r\n        }\r\n    }\r\n}\r\n\r\nexport function findAny<T>(array: T[], predicate: (item: T, index: number) => boolean): boolean {\r\n    return typeof findIndex(array, predicate) !== 'undefined';\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/arrays.ts","import Matrix from '../interfaces/matrix';\r\nimport { clonePoint, default as IPoint } from '../interfaces/point';\r\nimport IPositionedMatrix from '../interfaces/positioned-matrix';\r\nimport { ISize } from '../interfaces/size';\r\nimport { findAny } from './arrays';\r\n\r\nexport function createMatrix(size: ISize): Matrix {\r\n    const result: Matrix = [];\r\n    for (let col = 0; col < size.width; col++) {\r\n        result[col] = new Array(size.height);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function copyMatrix(matrix: Matrix): Matrix {\r\n    return matrix.reduce<Matrix>((result, col, x) => {\r\n        result[x] = col.slice();\r\n        return result;\r\n    }, []);\r\n}\r\n\r\nexport function getMatrixSize(matrix: Matrix): ISize {\r\n    return {\r\n        width: matrix.length,\r\n        height: matrix[0].length\r\n    };\r\n}\r\n\r\nexport function matrixEquals(m1: Matrix, m2: Matrix): boolean {\r\n    if (m1.length !== m2.length\r\n        || m1[0].length !== m2[0].length) {\r\n        return false;\r\n    }\r\n\r\n    return !findAny(m1, (col, x) => {\r\n        return findAny(col, (value, y) => {\r\n            return value !== m2[x][y];\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Merges parent and child matrixes into the target matrix\r\n */\r\nexport function mergeMatrixes(parent: Matrix, child: IPositionedMatrix, target = copyMatrix(parent)): Matrix {\r\n    const { matrix: childMatrix, position } = child;\r\n    const result = target;\r\n\r\n    for (let i = 0; i < childMatrix.length; i++) {\r\n        for (let j = 0; j < childMatrix[0].length; j++) {\r\n            const value = childMatrix[i][j];\r\n            if (typeof value === 'undefined') continue;\r\n\r\n            const x = i + position.x;\r\n            const y = j + position.y;\r\n\r\n            if (x >= 0 && x < parent.length &&\r\n                y >= 0 && y < parent[0].length &&\r\n                (value || !result[x][y])) {\r\n                result[x][y] = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Transforms matrix to be used in the coordinate system\r\n */\r\nexport function xyMatrix(matrix: Matrix): Matrix {\r\n    return rotateMatrix(matrix)\r\n        .reduce<Matrix>((result, col, x) => {\r\n            // Flip columns\r\n            result[x] = col.reverse();\r\n            return result;\r\n        }, []);\r\n}\r\n\r\n/**\r\n * Rotate a square 2D matrix\r\n */\r\nexport function rotateMatrix(matrix: Matrix, reverse = false): Matrix {\r\n    const l = matrix.length;\r\n    const result = createMatrix({ width: l, height: l });\r\n\r\n    // Apply rotation\r\n    for (let x = 0; x < l; x++) {\r\n        for (let y = 0; y < l; y++) {\r\n            result[x][y] = reverse\r\n                ? matrix[l - y - 1][x]\r\n                : matrix[y][l - x - 1];\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Checks if child is not outside parent matrix\r\n */\r\nexport function matrixContains(parent: Matrix, child: IPositionedMatrix): boolean {\r\n    const { matrix: childMatrix, position } = child;\r\n\r\n    for (let i = 0; i < childMatrix.length; i++) {\r\n        const col = childMatrix[i];\r\n        for (let j = 0; j < col.length; j++) {\r\n            if (!col[j]) continue;\r\n\r\n            const x = i + position.x;\r\n            const y = j + position.y;\r\n\r\n            if (x < 0 || x >= parent.length ||\r\n                y < 0 || y >= parent[0].length) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function matrixesColliding(parent: Matrix, child: IPositionedMatrix): boolean {\r\n    const { matrix: childMatrix, position } = child;\r\n\r\n    for (let x = 0; x < childMatrix.length; x++) {\r\n        for (let y = 0; y < childMatrix[0].length; y++) {\r\n            if (!childMatrix[x][y]) continue;\r\n\r\n            const col = parent[x + position.x];\r\n            if (!col) continue;\r\n\r\n            if (col[y + position.y]) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Tries to move matrix to a non-colliding position\r\n */\r\nexport function getUnstuckPosition(matrix: IPositionedMatrix,\r\n    isColliding: (matrix: IPositionedMatrix) => boolean): IPoint | null {\r\n\r\n    const { matrix: shape, position } = matrix;\r\n\r\n    const maxOffset = Math.ceil(shape.length / 2);\r\n    for (let i = 1; i <= maxOffset; i++) {\r\n        const pos = clonePoint(position);\r\n\r\n        // Try down\r\n        pos.y += i;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        })) return pos;\r\n\r\n        // Try up\r\n        pos.y -= i * 2;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        })) return pos;\r\n        pos.y += i;\r\n\r\n        // Try right\r\n        pos.x += i;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        })) return pos;\r\n\r\n        // Try left\r\n        pos.x -= i * 2;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        })) return pos;\r\n        pos.x += i;\r\n    }\r\n\r\n    return null;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/matrix-calculations.ts","import Matrix from '../interfaces/matrix';\r\nimport { clonePoint } from '../interfaces/point';\r\nimport IPositionedMatrix from '../interfaces/positioned-matrix';\r\nimport Board from '../models/board';\r\nimport { Color } from '../models/color';\r\n\r\nconst ghostColor = Color.Grey;\r\n\r\nexport default function createGhost(board: Board, pm: IPositionedMatrix): IPositionedMatrix {\r\n    const matrix = pm.matrix;\r\n    const position = clonePoint(pm.position);\r\n\r\n    // Calculate y position\r\n    let y = position.y;\r\n    do {\r\n        y++;\r\n    } while (!board.collides({\r\n        matrix,\r\n        position: { x: position.x, y }\r\n    }));\r\n    position.y = y - 1;\r\n\r\n    // Copy matrix with new color\r\n    const ghost: Matrix = matrix.map(col => col.map(x => {\r\n        if (x) return ghostColor;\r\n    }));\r\n\r\n    return { matrix: ghost, position };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/ghost-matrix.ts","import Matrix from '../interfaces/matrix';\r\nimport createGhost from './ghost-matrix';\r\nimport { mergeMatrixes } from './matrix-calculations';\r\nimport { board, player } from './storage';\r\n\r\nexport default function getViewMatrix(): Matrix {\r\n\r\n    const playerMatrix = {\r\n        matrix: player.shape.blocks,\r\n        position: player.position\r\n    };\r\n\r\n    const ghost = createGhost(board, playerMatrix);\r\n\r\n    return mergeMatrixes(\r\n        mergeMatrixes(board.blocks, ghost),\r\n        playerMatrix\r\n    );\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/view-matrix.ts","import * as Hammer from 'hammerjs';\r\nimport { pointEquals } from '../interfaces/point';\r\nimport settings from '../settings';\r\nimport { findAny, findIndex } from './arrays';\r\nimport { placePiece, stopLockTimeout } from './gameloop';\r\nimport { copyMatrix, getUnstuckPosition, matrixEquals } from './matrix-calculations';\r\nimport { addScore } from './player-score';\r\nimport { board, panel, player } from './storage';\r\nimport Timer from './timer';\r\nimport UniqueArray from './unique-array';\r\nimport getViewMatrix from './view-matrix';\r\n\r\nconst keysDown = new UniqueArray<string>();\r\n\r\nconst keyInterval = new Timer(() => {\r\n    keysDown.values.forEach(code => {\r\n        handleKeyDown(code, true);\r\n    });\r\n}, 90);\r\n\r\nconst keyThresholdTimer = new Timer(() => {\r\n    keyInterval.start();\r\n}, 200, false);\r\n\r\nexport default function handleInput(): void {\r\n    document.addEventListener('keydown', e => {\r\n        if (e.repeat) return;\r\n\r\n        const keyCode = e.code;\r\n\r\n        if (handleKeyDown(keyCode, false)) {\r\n            e.preventDefault();\r\n\r\n            keysDown.add(keyCode);\r\n\r\n            if (keyCode === 'ArrowLeft' || keyCode === 'ArrowRight') {\r\n                // Make it easier to move one tile\r\n                keyInterval.stop();\r\n                keyThresholdTimer.start();\r\n            } else keyInterval.start();\r\n        }\r\n    });\r\n\r\n    document.addEventListener('keyup', e => {\r\n        if (keysDown.contains(e.code)) {\r\n            keysDown.remove(e.code);\r\n\r\n            if (keysDown.count === 0) {\r\n                keyThresholdTimer.stop();\r\n                keyInterval.stop();\r\n            }\r\n        }\r\n    });\r\n\r\n    const mc = new Hammer.Manager(document.body);\r\n    mc.add(new Hammer.Tap());\r\n    mc.add(new Hammer.Swipe({ direction: Hammer.DIRECTION_DOWN }));\r\n    mc.add(new Hammer.Pan({ direction: Hammer.DIRECTION_HORIZONTAL, threshold: 20 }));\r\n    mc.on('tap', () => handleKeyDown('ArrowUp', false));\r\n    mc.on('panleft', e => movePiece(e.center.x));\r\n    mc.on('panright', e => movePiece(e.center.x));\r\n    mc.on('swipedown', () => handleKeyDown('Space', false));\r\n}\r\n\r\nfunction movePiece(touchX: number): void {\r\n    const canvasWidth = panel.canvas.offsetWidth;\r\n    const borderLeft = panel.canvas.offsetLeft;\r\n    const borderRight = borderLeft + canvasWidth;\r\n\r\n    if (touchX < borderLeft\r\n        || touchX > borderRight) {\r\n        // Outside canvas\r\n        return;\r\n    }\r\n\r\n    const tileSize = canvasWidth / board.size.width;\r\n    const touchingCol = (touchX - borderLeft) / tileSize;\r\n    const shapeWidth = player.shape.blocks.reduce((width, col) => {\r\n        if (findAny(col, x => !!x)) width++;\r\n        return width;\r\n    }, 0);\r\n\r\n    const shapeCenterX = ((findIndex(\r\n        player.shape.blocks,\r\n        col => findAny(col, x => !!x)) || 0)\r\n        + shapeWidth) / 2;\r\n\r\n    const newCol = Math.floor(touchingCol - shapeCenterX);\r\n    const currentCol = player.position.x;\r\n    if (newCol === currentCol) return;\r\n\r\n    console.log(currentCol, 'to', newCol);\r\n\r\n    const deltaCol = currentCol - newCol;\r\n    if (deltaCol > 0) {\r\n        for (let i = 0; i < deltaCol; i++) {\r\n            handleKeyDown('ArrowLeft', false);\r\n        }\r\n    } else {\r\n        for (let i = 0; i > deltaCol; i--) {\r\n            handleKeyDown('ArrowRight', false);\r\n        }\r\n    }\r\n}\r\n\r\nexport function resetControls(): void {\r\n    keysDown.remove('ArrowDown');\r\n}\r\n\r\nfunction handleKeyDown(keyCode: string, repeated: boolean): boolean {\r\n    let newPosition = {\r\n        x: player.position.x,\r\n        y: player.position.y\r\n    };\r\n\r\n    const beforeMatrix = copyMatrix(player.shape.blocks);\r\n\r\n    let triggered = true;\r\n    let hardDropped = false;\r\n\r\n    switch (keyCode) {\r\n        case 'ArrowUp':\r\n            // Rotate clockwise\r\n            if (repeated) return true;\r\n            player.shape.rotate();\r\n\r\n            const playerMatrix = {\r\n                matrix: player.shape.blocks,\r\n                position: newPosition\r\n            };\r\n\r\n            if (board.collides(playerMatrix)) {\r\n                // Colliding with other blocks, try to reposition\r\n                const unstuckPos = getUnstuckPosition(playerMatrix, board.collides.bind(board));\r\n\r\n                if (!unstuckPos) {\r\n                    // Cannot unstuck, revert!\r\n                    player.shape.rotate(true);\r\n                } else {\r\n                    // Repositioned\r\n                    newPosition = unstuckPos;\r\n                }\r\n            }\r\n            break;\r\n        case 'ArrowRight':\r\n            // Move right\r\n            newPosition.x++;\r\n            break;\r\n        case 'ArrowDown':\r\n            // Soft drop\r\n            newPosition.y++;\r\n\r\n            // Add points to score\r\n            const sdPoints = settings.points.softDrop;\r\n            player.softDropPoints += sdPoints;\r\n            if (player.softDropPoints < settings.points.softDropMax) {\r\n                addScore(sdPoints);\r\n            }\r\n\r\n            break;\r\n        case 'ArrowLeft':\r\n            // Move left\r\n            newPosition.x--;\r\n            break;\r\n        case 'Space':\r\n            // Hard drop\r\n            if (repeated) return true;\r\n\r\n            let nextPos = newPosition;\r\n            let hdPoints = 0;\r\n\r\n            do {\r\n                nextPos = { x: nextPos.x, y: nextPos.y + 1 };\r\n                hdPoints += settings.points.hardDrop;\r\n            } while (!board.collides({\r\n                matrix: player.shape.blocks,\r\n                position: nextPos\r\n            }));\r\n\r\n            newPosition = { x: nextPos.x, y: nextPos.y - 1 };\r\n            addScore(Math.min(\r\n                hdPoints - settings.points.hardDrop,\r\n                settings.points.hardDropMax));\r\n\r\n            hardDropped = true;\r\n            break;\r\n        default:\r\n            triggered = false;\r\n            break;\r\n    }\r\n\r\n    let posChanged = !pointEquals(player.position, newPosition);\r\n\r\n    if (posChanged || hardDropped) {\r\n        const newMatrix = {\r\n            matrix: player.shape.blocks,\r\n            position: newPosition\r\n        };\r\n\r\n        if (!board.collides(newMatrix)) {\r\n            player.position = newPosition;\r\n        } else posChanged = false;\r\n\r\n        if (hardDropped\r\n            || keyCode === 'ArrowDown'\r\n            && board.collides(newMatrix)) {\r\n            placePiece();\r\n        }\r\n    }\r\n\r\n    const rotationChanged = !matrixEquals(player.shape.blocks, beforeMatrix);\r\n\r\n    if (posChanged || rotationChanged) {\r\n        stopLockTimeout();\r\n        panel.draw(getViewMatrix());\r\n    }\r\n\r\n    return triggered;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/key-handling.ts","import I from '../models/shapes/i';\r\nimport J from '../models/shapes/j';\r\nimport L from '../models/shapes/l';\r\nimport O from '../models/shapes/o';\r\nimport S from '../models/shapes/s';\r\nimport T from '../models/shapes/t';\r\nimport Z from '../models/shapes/z';\r\n\r\nconst shapes = [I, J, L, O, S, T, Z];\r\n\r\nexport default function getRandomShape() {\r\n    const Shape = shapes[Math.floor(Math.random() * shapes.length)];\r\n    return new Shape();\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/random-shape.ts","import { resetScore } from './player-score';\r\nimport { board, player } from './storage';\r\n\r\nexport default function gameOver(): void {\r\n    board.clear();\r\n    player.reset();\r\n    resetScore();\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/game-over.ts","import settings from '../settings';\r\nimport gameOver from './game-over';\r\nimport { addScore } from './player-score';\r\nimport { board, panel, player } from './storage';\r\nimport Timer from './timer';\r\nimport getViewMatrix from './view-matrix';\r\n\r\nexport function placePiece(): void {\r\n    board.place(player.shape, player.position);\r\n    const linesCleared = board.clearFullLines();\r\n\r\n    // Add points for cleared lines\r\n    if (linesCleared) {\r\n        const scoring = settings.points.linesCleared as { [lines: number]: number };\r\n        addScore(scoring[linesCleared]);\r\n    }\r\n\r\n    player.reset();\r\n\r\n    // Detect immediate collision\r\n    if (board.collides({\r\n        matrix: player.shape.blocks,\r\n        position: player.position\r\n    })) gameOver();\r\n}\r\n\r\nconst lockTimeout = new Timer(placePiece, settings.placementTimeout * 1000, false);\r\n\r\nexport function stopLockTimeout(): void {\r\n    lockTimeout.stop();\r\n}\r\n\r\nfunction update(): void {\r\n    const newPos = {\r\n        x: player.position.x,\r\n        y: player.position.y + 1\r\n    };\r\n\r\n    if (!board.collides({ matrix: player.shape.blocks, position: newPos })) {\r\n        // Move piece down\r\n        player.position = newPos;\r\n    } else {\r\n        // Colliding, init placement\r\n        lockTimeout.start();\r\n    }\r\n\r\n    panel.draw(getViewMatrix());\r\n}\r\n\r\n// Call update immediately\r\nlet interval: number;\r\nlet currentSeconds: number;\r\nexport function setLoopSpeed(seconds: number): void {\r\n    currentSeconds = seconds;\r\n\r\n    window.clearInterval(interval);\r\n    update();\r\n    interval = window.setInterval(() => {\r\n        if (!lockTimeout.running) update();\r\n    }, seconds * 1000);\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/gameloop.ts","import { onScoreChange } from '../services/player-score';\r\n\r\nlet scoreEl: HTMLSpanElement;\r\n\r\nexport default function loadPlayerScore(): void {\r\n    scoreEl = document.getElementById('player-score') as HTMLSpanElement;\r\n    onScoreChange(score => {\r\n        scoreEl.textContent = score.toLocaleString();\r\n    }, true);\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/components/player-score.ts","const settings = {\r\n\r\n    // Per drops per second\r\n    gameSpeed: 0.4,\r\n\r\n    points: {\r\n        // Amount of lines cleared at once\r\n        linesCleared: {\r\n            1: 40,\r\n            2: 100,\r\n            3: 300,\r\n            4: 1200\r\n        },\r\n\r\n        // Points per cell dropped\r\n        softDrop: 1,\r\n        hardDrop: 2,\r\n\r\n        // Max drop points per turn\r\n        softDropMax: 20,\r\n        hardDropMax: 40\r\n    },\r\n\r\n    // Seconds to wait before locking piece\r\n    placementTimeout: 0.5,\r\n\r\n    debug: {\r\n        // Draw full shape square\r\n        drawEmptyTiles: false,\r\n        emptyTileColor: '#f1f1f1'\r\n    }\r\n};\r\n\r\nexport default settings;\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/settings.ts","import Matrix from '../interfaces/matrix';\r\nimport { ISize } from '../interfaces/size';\r\nimport drawGrid from '../services/draw-grid';\r\nimport drawMatrix from '../services/draw-matrix';\r\nimport { getMatrixSize } from '../services/matrix-calculations';\r\n\r\nexport default class Panel {\r\n    public readonly ctx: CanvasRenderingContext2D;\r\n    public readonly size: ISize;\r\n    public readonly pixelRatio: number;\r\n    public readonly canvas: HTMLCanvasElement;\r\n\r\n    constructor(id: string) {\r\n        const canvas = document.getElementById(id) as HTMLCanvasElement;\r\n        this.pixelRatio = devicePixelRatio || 1;\r\n\r\n        // Read canvas size\r\n        this.size = {\r\n            width: parseInt(canvas.getAttribute('width') as string, 10) * this.pixelRatio,\r\n            height: parseInt(canvas.getAttribute('height') as string, 10) * this.pixelRatio\r\n        };\r\n\r\n        // Fix scaling for small viewports\r\n        if (this.size.width !== canvas.offsetWidth) {\r\n            canvas.setAttribute('width', `${this.size.width}`);\r\n        }\r\n\r\n        if (this.size.height !== canvas.offsetHeight) {\r\n            canvas.setAttribute('height', `${this.size.height}`);\r\n        }\r\n\r\n        // Get drawing context\r\n        const ctx = canvas.getContext('2d');\r\n        if (!ctx) throw new Error('Context not found!');\r\n        this.ctx = ctx;\r\n        this.canvas = canvas;\r\n    }\r\n\r\n    public draw(matrix: Matrix): void {\r\n        this.clear();\r\n        drawGrid(this, getMatrixSize(matrix));\r\n        drawMatrix(this, matrix);\r\n    }\r\n\r\n    private clear(): void {\r\n        this.ctx.clearRect(0, 0, this.size.width, this.size.height);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/components/panel.ts","import Matrix from '../interfaces/matrix';\r\nimport IPoint from '../interfaces/point';\r\nimport IPositionedMatrix from '../interfaces/positioned-matrix';\r\nimport { ISize } from '../interfaces/size';\r\nimport { matrixContains, matrixesColliding, mergeMatrixes } from '../services/matrix-calculations';\r\nimport Shape from './shape';\r\n\r\nexport default class Board {\r\n    private _blocks: Matrix;\r\n    public get blocks() { return this._blocks; }\r\n\r\n    public readonly size: ISize;\r\n\r\n    constructor(size: ISize) {\r\n        this.size = size;\r\n        this.clear();\r\n    }\r\n\r\n    public place(shape: Shape, position: IPoint): void {\r\n        mergeMatrixes(this.blocks, {\r\n            matrix: shape.blocks,\r\n            position\r\n        }, this.blocks);\r\n    }\r\n\r\n    public clearFullLines(): number {\r\n        const fullRows = this.getFullLines();\r\n        fullRows.forEach(row => this.deleteRow(row));\r\n        return fullRows.length;\r\n    }\r\n\r\n    private getFullLines(): number[] {\r\n        const rowCount = this._blocks[0].length;\r\n        const incompleteRows = new Array<boolean>(rowCount - 1);\r\n\r\n        rows:\r\n        for (let y = 0; y < rowCount; y++) {\r\n            for (const col of this._blocks) {\r\n                if (!col[y]) {\r\n                    incompleteRows[y] = true;\r\n                    continue rows;\r\n                }\r\n            }\r\n        }\r\n\r\n        const result: number[] = [];\r\n        for (let row = 0; row < rowCount; row++) {\r\n            if (!incompleteRows[row]) result.push(row);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private deleteRow(row: number): void {\r\n        this._blocks.forEach(col => {\r\n            col.splice(row, 1);\r\n            col.unshift(undefined);\r\n        });\r\n    }\r\n\r\n    public clear(): void {\r\n        this._blocks = [];\r\n        for (let x = 0; x < this.size.width; x++) {\r\n            this._blocks[x] = new Array(this.size.height);\r\n        }\r\n    }\r\n\r\n    public contains(matrix: IPositionedMatrix): boolean {\r\n        return matrixContains(this._blocks, matrix);\r\n    }\r\n\r\n    public collides(matrix: IPositionedMatrix): boolean {\r\n        return !this.contains(matrix)\r\n            || matrixesColliding(this.blocks, matrix);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/board.ts","export default class Timer {\r\n    private _handle: number | void;\r\n    private readonly _handler: () => void;\r\n    private readonly _interval: number;\r\n    private readonly _repeat: boolean;\r\n    private _running = false;\r\n\r\n    public get running() { return this._running; }\r\n\r\n    constructor(handler: () => void, interval: number, repeat = true) {\r\n        this._handler = handler;\r\n        this._interval = interval;\r\n        this._repeat = repeat;\r\n    }\r\n\r\n    public start(executeOnInit = false): void {\r\n        if (executeOnInit) {\r\n            this._handler();\r\n            if (!this._repeat) return;\r\n        }\r\n\r\n        this.stop();\r\n\r\n        this._handle = (\r\n            this._repeat\r\n                ? setInterval\r\n                : setTimeout\r\n        )(() => {\r\n            this._handler();\r\n            this._running = false;\r\n        }, this._interval);\r\n        this._running = true;\r\n    }\r\n\r\n    public stop(): void {\r\n        this._handle = (\r\n            this._repeat\r\n                ? clearInterval\r\n                : clearTimeout\r\n        )(this._handle as number);\r\n        this._running = false;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/timer.ts","export default class UniqueArray<T> {\r\n    private _array: T[] = [];\r\n\r\n    public get count() { return this._array.length; }\r\n    public get values() { return this._array; }\r\n\r\n    public add(value: T): void {\r\n        if (!this.contains(value)) {\r\n            this._array.push(value);\r\n        }\r\n    }\r\n\r\n    public remove(value: T): void {\r\n        const index = this._array.indexOf(value);\r\n        if (index >= 0) {\r\n            this._array.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public contains(value: T): boolean {\r\n        return this._array.indexOf(value) >= 0;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/unique-array.ts","import Matrix from '../interfaces/matrix';\r\nimport { rotateMatrix } from '../services/matrix-calculations';\r\n\r\nexport default class Shape {\r\n    private _blocks: Matrix;\r\n    public get blocks() {\r\n        return this._blocks;\r\n    }\r\n\r\n    constructor(blocks: Matrix) {\r\n        this._blocks = blocks;\r\n    }\r\n\r\n    public rotate(reverse = false): void {\r\n        this._blocks = rotateMatrix(this._blocks, reverse);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shape.ts","import { xyMatrix } from '../../services/matrix-calculations';\r\nimport { Color } from '../color';\r\nimport Shape from '../shape';\r\n\r\nconst c = Color.Blue;\r\n\r\nexport default class I extends Shape {\r\n    constructor() {\r\n        super(xyMatrix([\r\n            [0, c, 0, 0],\r\n            [0, c, 0, 0],\r\n            [0, c, 0, 0],\r\n            [0, c, 0, 0]\r\n        ]));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/i.ts","import { xyMatrix } from '../../services/matrix-calculations';\r\nimport { Color } from '../color';\r\nimport Shape from '../shape';\r\n\r\nconst c = Color.Pink;\r\n\r\nexport default class J extends Shape {\r\n    constructor() {\r\n        super(xyMatrix([\r\n            [0, c, 0],\r\n            [0, c, 0],\r\n            [c, c, 0]\r\n        ]));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/j.ts","import { xyMatrix } from '../../services/matrix-calculations';\r\nimport { Color } from '../color';\r\nimport Shape from '../shape';\r\n\r\nconst c = Color.Orange;\r\n\r\nexport default class L extends Shape {\r\n    constructor() {\r\n        super(xyMatrix([\r\n            [0, c, 0],\r\n            [0, c, 0],\r\n            [0, c, c]\r\n        ]));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/l.ts","import { xyMatrix } from '../../services/matrix-calculations';\r\nimport { Color } from '../color';\r\nimport Shape from '../shape';\r\n\r\nconst c = Color.Yellow;\r\n\r\nexport default class O extends Shape {\r\n    constructor() {\r\n        super(xyMatrix([\r\n            [c, c],\r\n            [c, c]\r\n        ]));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/o.ts","import { xyMatrix } from '../../services/matrix-calculations';\r\nimport { Color } from '../color';\r\nimport Shape from '../shape';\r\n\r\nconst c = Color.Red;\r\n\r\nexport default class S extends Shape {\r\n    constructor() {\r\n        super(xyMatrix([\r\n            [0, c, c],\r\n            [c, c, 0],\r\n            [0, 0, 0]\r\n        ]));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/s.ts","import { xyMatrix } from '../../services/matrix-calculations';\r\nimport { Color } from '../color';\r\nimport Shape from '../shape';\r\n\r\nconst c = Color.Purple;\r\n\r\nexport default class T extends Shape {\r\n    constructor() {\r\n        super(xyMatrix([\r\n            [c, c, c],\r\n            [0, c, 0],\r\n            [0, 0, 0]\r\n        ]));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/t.ts","import { xyMatrix } from '../../services/matrix-calculations';\r\nimport { Color } from '../color';\r\nimport Shape from '../shape';\r\n\r\nconst c = Color.Green;\r\n\r\nexport default class Z extends Shape {\r\n    constructor() {\r\n        super(xyMatrix([\r\n            [c, c, 0],\r\n            [0, c, c],\r\n            [0, 0, 0]\r\n        ]));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/z.ts","import IPoint, { clonePoint } from '../interfaces/point';\r\nimport { resetControls } from '../services/key-handling';\r\nimport getRandomShape from '../services/random-shape';\r\nimport Shape from './shape';\r\n\r\nexport default class Player {\r\n    private _shape: Shape;\r\n    public get shape() {\r\n        return this._shape;\r\n    }\r\n\r\n    public position: IPoint;\r\n    private _startingPos: IPoint;\r\n\r\n    public softDropPoints = 0;\r\n\r\n    constructor(startingPosition: IPoint) {\r\n        this._startingPos = startingPosition;\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.position = clonePoint(this._startingPos);\r\n        this._shape = getRandomShape();\r\n        resetControls();\r\n        this.softDropPoints = 0;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/player.ts","import Panel from '../components/panel';\r\nimport Board from '../models/board';\r\nimport Player from '../models/player';\r\n\r\nconst boardSize = {\r\n    width: 10,\r\n    height: 20\r\n};\r\n\r\nexport const player = new Player({ x: boardSize.width / 2 - 1, y: 0 });\r\nexport const panel = new Panel('game');\r\nexport const board = new Board(boardSize);\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/storage.ts","import loadPlayerScore from './components/player-score';\r\nimport { setLoopSpeed } from './services/gameloop';\r\nimport handleInput from './services/key-handling';\r\nimport settings from './settings';\r\nimport './vendor/modernizr.min.js';\r\n\r\nsetLoopSpeed(settings.gameSpeed);\r\nhandleInput();\r\nloadPlayerScore();\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/index.ts","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/hammerjs/hammer.js\n// module id = 1\n// module chunks = 0","/*! modernizr 3.5.0 (Custom Build) | MIT *\r\n * https://modernizr.com/download/?-canvas-localstorage-serviceworker-sessionstorage-touchevents-webgl !*/\r\n!function(e,t,n){function o(e,t){return typeof e===t}function r(){var e,t,n,r,s,a,i;for(var d in l)if(l.hasOwnProperty(d)){if(e=[],t=l[d],t.name&&(e.push(t.name.toLowerCase()),t.options&&t.options.aliases&&t.options.aliases.length))for(n=0;n<t.options.aliases.length;n++)e.push(t.options.aliases[n].toLowerCase());for(r=o(t.fn,\"function\")?t.fn():t.fn,s=0;s<e.length;s++)a=e[s],i=a.split(\".\"),1===i.length?Modernizr[i[0]]=r:(!Modernizr[i[0]]||Modernizr[i[0]]instanceof Boolean||(Modernizr[i[0]]=new Boolean(Modernizr[i[0]])),Modernizr[i[0]][i[1]]=r),c.push((r?\"\":\"no-\")+i.join(\"-\"))}}function s(){return\"function\"!=typeof t.createElement?t.createElement(arguments[0]):u?t.createElementNS.call(t,\"http://www.w3.org/2000/svg\",arguments[0]):t.createElement.apply(t,arguments)}function a(){var e=t.body;return e||(e=s(u?\"svg\":\"body\"),e.fake=!0),e}function i(e,n,o,r){var i,l,d,c,u=\"modernizr\",p=s(\"div\"),v=a();if(parseInt(o,10))for(;o--;)d=s(\"div\"),d.id=r?r[o]:u+(o+1),p.appendChild(d);return i=s(\"style\"),i.type=\"text/css\",i.id=\"s\"+u,(v.fake?v:p).appendChild(i),v.appendChild(p),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(t.createTextNode(e)),p.id=u,v.fake&&(v.style.background=\"\",v.style.overflow=\"hidden\",c=f.style.overflow,f.style.overflow=\"hidden\",f.appendChild(v)),l=n(p,e),v.fake?(v.parentNode.removeChild(v),f.style.overflow=c,f.offsetHeight):p.parentNode.removeChild(p),!!l}var l=[],d={_version:\"3.5.0\",_config:{classPrefix:\"\",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(e,t){var n=this;setTimeout(function(){t(n[e])},0)},addTest:function(e,t,n){l.push({name:e,fn:t,options:n})},addAsyncTest:function(e){l.push({name:null,fn:e})}},Modernizr=function(){};Modernizr.prototype=d,Modernizr=new Modernizr,Modernizr.addTest(\"serviceworker\",\"serviceWorker\"in navigator),Modernizr.addTest(\"localstorage\",function(){var e=\"modernizr\";try{return localStorage.setItem(e,e),localStorage.removeItem(e),!0}catch(t){return!1}}),Modernizr.addTest(\"sessionstorage\",function(){var e=\"modernizr\";try{return sessionStorage.setItem(e,e),sessionStorage.removeItem(e),!0}catch(t){return!1}});var c=[],f=t.documentElement,u=\"svg\"===f.nodeName.toLowerCase();Modernizr.addTest(\"canvas\",function(){var e=s(\"canvas\");return!(!e.getContext||!e.getContext(\"2d\"))}),Modernizr.addTest(\"webgl\",function(){var t=s(\"canvas\"),n=\"probablySupportsContext\"in t?\"probablySupportsContext\":\"supportsContext\";return n in t?t[n](\"webgl\")||t[n](\"experimental-webgl\"):\"WebGLRenderingContext\"in e});var p=d._config.usePrefixes?\" -webkit- -moz- -o- -ms- \".split(\" \"):[\"\",\"\"];d._prefixes=p;var v=d.testStyles=i;Modernizr.addTest(\"touchevents\",function(){var n;if(\"ontouchstart\"in e||e.DocumentTouch&&t instanceof DocumentTouch)n=!0;else{var o=[\"@media (\",p.join(\"touch-enabled),(\"),\"heartz\",\")\",\"{#modernizr{top:9px;position:absolute}}\"].join(\"\");v(o,function(e){n=9===e.offsetTop})}return n}),r(),delete d.addTest,delete d.addAsyncTest;for(var m=0;m<Modernizr._q.length;m++)Modernizr._q[m]();e.Modernizr=Modernizr}(window,document);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/vendor/modernizr.min.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}