{"version":3,"sources":["webpack:///index.js","webpack:///webpack/bootstrap 2035d1f310953e7c67a2","webpack:///./src/vendor/modernizr.min.js","webpack:///./src/services/browser-storage.ts","webpack:///./src/services/player-highscore.ts","webpack:///./src/services/player-score.ts","webpack:///./src/services/draw-grid.ts","webpack:///./src/models/color.ts","webpack:///./src/services/draw-matrix.ts","webpack:///./src/interfaces/point.ts","webpack:///./src/services/arrays.ts","webpack:///./src/services/matrix-calculations.ts","webpack:///./src/services/random-shape.ts","webpack:///./src/services/game-over.ts","webpack:///./src/services/ghost-matrix.ts","webpack:///./src/services/view-matrix.ts","webpack:///./src/services/gameloop.ts","webpack:///./src/services/dom.ts","webpack:///./src/services/pause-game.ts","webpack:///./src/services/key-handling.ts","webpack:///./src/services/modernizr.ts","webpack:///./src/settings.ts","webpack:///./src/components/panel.ts","webpack:///./src/models/board.ts","webpack:///./src/models/shape.ts","webpack:///./src/models/shapes/i.ts","webpack:///./src/models/shapes/j.ts","webpack:///./src/models/shapes/l.ts","webpack:///./src/models/shapes/o.ts","webpack:///./src/models/shapes/s.ts","webpack:///./src/models/shapes/t.ts","webpack:///./src/models/shapes/z.ts","webpack:///./src/models/player.ts","webpack:///./src/services/property.ts","webpack:///./src/services/storage.ts","webpack:///./src/services/timer.ts","webpack:///./src/services/unique-array.ts","webpack:///./src/index.ts","webpack:///./src/components/player-score.ts","webpack:///./node_modules/hammerjs/hammer.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","e","t","createElement","arguments","u","createElementNS","apply","a","body","fake","r","v","parseInt","id","appendChild","type","styleSheet","cssText","createTextNode","style","background","overflow","f","parentNode","removeChild","offsetHeight","_version","_config","classPrefix","enableClasses","enableJSClass","usePrefixes","_q","on","this","setTimeout","addTest","push","fn","options","addAsyncTest","Modernizr","navigator","localStorage","setItem","removeItem","sessionStorage","documentElement","nodeName","toLowerCase","getContext","split","_prefixes","testStyles","DocumentTouch","join","offsetTop","aliases","length","Boolean","window","document","__webpack_exports__","setLocalItem","key","value","available","localstorage","getHighScore","player_highscore_highScore","setHighScore","toString","addScore","points","currentScore","triggerScoreChange","resetScore","onScoreChange","handler","triggerOnInit","subscribers","forEach","drawGrid","panel","gridSize","tileSize","width","size","height","ctx","strokeStyle","lineWidth","pixelRatio","x","beginPath","moveTo","lineTo","stroke","y","getColorCode","color","drawMatrix","matrix","col","item","src_settings","debug","drawEmptyTiles","fillStyle","emptyColor","fillRect","Math","ceil","clonePoint","point","pointEquals","b","findIndex","array","predicate","findAny","createMatrix","result","Array","copyMatrix","reduce","slice","getMatrixSize","matrixEquals","m1","m2","mergeMatrixes","parent","child","target","childMatrix","position","j","xyMatrix","rotateMatrix","reverse","matrixContains","matrixesColliding","getUnstuckPosition","isColliding","shape","maxOffset","pos","getRandomShape","Shape","shapes","floor","random","gameOver","storage_board","clear","storage_player","reset","createGhost","board","pm","collides","map","ghostColor","getViewMatrix","playerMatrix","blocks","ghost","placePiece","place","linesCleared","clearFullLines","unstuckPos","bind","stopLockTimeout","lockTimeout","stop","update","newPos","start","storage_panel","draw","setLoopSpeed","seconds","currentSeconds","stopLoop","interval","setInterval","running","startLoop","clearInterval","eID","el","getElementById","ReferenceError","pauseGame","modal","display","paused","restartGame","movePiece","deltaX","canvasWidth","canvas","offsetWidth","tileWidth","colStart","newCol","deltaCol","handlePlayerMovement","keyCode","repeated","newPosition","beforeMatrix","triggered","hardDropped","rotate","sdPoints","softDrop","softDropPoints","softDropMax","nextPos","hdPoints","hardDrop","min","hardDropMax","posChanged","newMatrix","rotationChanged","isMobileSafari","ua","userAgent","iOS","match","webkit","getItem","settings","gameSpeed","1","2","3","4","placementTimeout","emptyTileColor","panel_Panel","Panel","devicePixelRatio","getAttribute","setAttribute","Error","clearRect","components_panel","board_Board","Board","_blocks","_this","fullRows","getFullLines","row","deleteRow","rowCount","incompleteRows","rows","_i","_a","splice","unshift","undefined","contains","models_board","shape_Shape","models_shape","__extends","extendStatics","setPrototypeOf","__proto__","__","constructor","create","i_I","_super","I","shapes_i","j___extends","j_c","j_J","J","l___extends","l_c","l_L","L","o___extends","o_c","o_O","O","s___extends","s_c","s_S","S","t___extends","t_c","t_T","T","z___extends","z_c","z_Z","Z","z","player_Player","Player","startingPosition","_startingPos","_shape","player","Property","initialValue","_value","set","boardSize","Timer","repeat","_running","_handler","_interval","_repeat","executeOnInit","_handle","clearTimeout","timer","hammer","continueBtn","UniqueArray","_array","add","remove","index","indexOf","unique_array","keysDown","keyInterval","values","code","keyThresholdTimer","touchevents","root","getElementsByTagName","classList","addEventListener","preventDefault","count","mc","direction","threshold","isFirst","scoreEl","highScore","score","textContent","toLocaleString","__WEBPACK_AMD_DEFINE_RESULT__","exportName","setTimeoutContext","timeout","context","bindFn","invokeArrayArg","arg","isArray","each","obj","iterator","deprecate","method","message","deprecationMessage","stack","replace","log","console","warn","inherit","base","properties","childP","baseP","assign","boolOrFn","val","args","TYPE_FUNCTION","ifUndefined","val1","val2","addEventListeners","types","splitStr","removeEventListeners","removeEventListener","hasParent","node","inStr","str","find","trim","inArray","src","findByKey","toArray","uniqueArray","sort","results","prefixed","prefix","prop","camelProp","toUpperCase","VENDOR_PREFIXES","uniqueId","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","Input","manager","callback","self","inputTarget","domHandler","ev","enable","init","createInputInstance","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","SUPPORT_ONLY_TOUCH","TouchInput","SUPPORT_TOUCH","TouchMouseInput","MouseInput","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","INPUT_START","isFinal","INPUT_END","INPUT_CANCEL","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","now","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offsetDirection","getDirection","deltaY","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","abs","scale","getScale","rotation","getRotation","maxPointers","computeIntervalInputData","srcEvent","offset","offsetDelta","prevDelta","velocity","velocityX","velocityY","last","lastInterval","COMPUTE_INTERVAL","clientX","round","clientY","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","p1","p2","props","PROPS_XY","sqrt","atan2","PI","end","PROPS_CLIENT_XY","evEl","MOUSE_ELEMENT_EVENTS","evWin","MOUSE_WINDOW_EVENTS","pressed","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","SingleTouchInput","evTarget","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_TARGET_EVENTS","targetIds","getTouches","allTouches","INPUT_MOVE","identifier","targetTouches","changedTargetTouches","filter","touch","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","removeLastTouch","DEDUP_TIMEOUT","isSyntheticEvent","dx","dy","DEDUP_DISTANCE","TouchAction","cleanTouchActions","actions","TOUCH_ACTION_NONE","hasPanX","TOUCH_ACTION_PAN_X","hasPanY","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_AUTO","Recognizer","defaults","state","STATE_POSSIBLE","simultaneous","requireFail","stateStr","STATE_CANCELLED","STATE_ENDED","STATE_CHANGED","STATE_BEGAN","directionStr","getRecognizerByNameIfManager","otherRecognizer","recognizer","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","Hammer","recognizers","preset","Manager","handlers","oldCssProps","touchAction","toggleCssProps","recognizeWith","requireFailure","cssProps","triggerDomEvent","event","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","TEST_ELEMENT","Date","TypeError","output","source","nextKey","extend","dest","merge","keys","MOBILE_REGEX","test","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","5","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","isTouch","storeIndex","pointerId","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TOUCH_INPUT_MAP","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","NATIVE_TOUCH_ACTION","TOUCH_ACTION_MAP","touchMap","cssSupports","CSS","supports","compute","getTouchAction","preventDefaults","prevented","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_RECOGNIZED","dropRecognizeWith","dropRequireFailure","hasRequireFailures","canRecognizeWith","additionalEvent","tryEmit","canEmit","inputDataClone","process","attrTest","optionPointers","isRecognized","isValid","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","taps","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","force","stopped","curRecognizer","existing","events","off","STATE_FAILED","Tap","Pan","Swipe","Pinch","Rotate","Press"],"mappings":"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","file":"index.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/*! modernizr 3.5.0 (Custom Build) | MIT *\n * https://modernizr.com/download/?-canvas-localstorage-serviceworker-sessionstorage-touchevents-webgl !*/\n!function(e,t,n){function o(e,t){return typeof e===t}function r(){var e,t,n,r,s,a,i;for(var d in l)if(l.hasOwnProperty(d)){if(e=[],t=l[d],t.name&&(e.push(t.name.toLowerCase()),t.options&&t.options.aliases&&t.options.aliases.length))for(n=0;n<t.options.aliases.length;n++)e.push(t.options.aliases[n].toLowerCase());for(r=o(t.fn,\"function\")?t.fn():t.fn,s=0;s<e.length;s++)a=e[s],i=a.split(\".\"),1===i.length?Modernizr[i[0]]=r:(!Modernizr[i[0]]||Modernizr[i[0]]instanceof Boolean||(Modernizr[i[0]]=new Boolean(Modernizr[i[0]])),Modernizr[i[0]][i[1]]=r),c.push((r?\"\":\"no-\")+i.join(\"-\"))}}function s(){return\"function\"!=typeof t.createElement?t.createElement(arguments[0]):u?t.createElementNS.call(t,\"http://www.w3.org/2000/svg\",arguments[0]):t.createElement.apply(t,arguments)}function a(){var e=t.body;return e||(e=s(u?\"svg\":\"body\"),e.fake=!0),e}function i(e,n,o,r){var i,l,d,c,u=\"modernizr\",p=s(\"div\"),v=a();if(parseInt(o,10))for(;o--;)d=s(\"div\"),d.id=r?r[o]:u+(o+1),p.appendChild(d);return i=s(\"style\"),i.type=\"text/css\",i.id=\"s\"+u,(v.fake?v:p).appendChild(i),v.appendChild(p),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(t.createTextNode(e)),p.id=u,v.fake&&(v.style.background=\"\",v.style.overflow=\"hidden\",c=f.style.overflow,f.style.overflow=\"hidden\",f.appendChild(v)),l=n(p,e),v.fake?(v.parentNode.removeChild(v),f.style.overflow=c,f.offsetHeight):p.parentNode.removeChild(p),!!l}var l=[],d={_version:\"3.5.0\",_config:{classPrefix:\"\",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(e,t){var n=this;setTimeout(function(){t(n[e])},0)},addTest:function(e,t,n){l.push({name:e,fn:t,options:n})},addAsyncTest:function(e){l.push({name:null,fn:e})}},Modernizr=function(){};Modernizr.prototype=d,Modernizr=new Modernizr,Modernizr.addTest(\"serviceworker\",\"serviceWorker\"in navigator),Modernizr.addTest(\"localstorage\",function(){var e=\"modernizr\";try{return localStorage.setItem(e,e),localStorage.removeItem(e),!0}catch(t){return!1}}),Modernizr.addTest(\"sessionstorage\",function(){var e=\"modernizr\";try{return sessionStorage.setItem(e,e),sessionStorage.removeItem(e),!0}catch(t){return!1}});var c=[],f=t.documentElement,u=\"svg\"===f.nodeName.toLowerCase();Modernizr.addTest(\"canvas\",function(){var e=s(\"canvas\");return!(!e.getContext||!e.getContext(\"2d\"))}),Modernizr.addTest(\"webgl\",function(){var t=s(\"canvas\"),n=\"probablySupportsContext\"in t?\"probablySupportsContext\":\"supportsContext\";return n in t?t[n](\"webgl\")||t[n](\"experimental-webgl\"):\"WebGLRenderingContext\"in e});var p=d._config.usePrefixes?\" -webkit- -moz- -o- -ms- \".split(\" \"):[\"\",\"\"];d._prefixes=p;var v=d.testStyles=i;Modernizr.addTest(\"touchevents\",function(){var n;if(\"ontouchstart\"in e||e.DocumentTouch&&t instanceof DocumentTouch)n=!0;else{var o=[\"@media (\",p.join(\"touch-enabled),(\"),\"heartz\",\")\",\"{#modernizr{top:9px;position:absolute}}\"].join(\"\");v(o,function(e){n=9===e.offsetTop})}return n}),r(),delete d.addTest,delete d.addAsyncTest;for(var m=0;m<Modernizr._q.length;m++)Modernizr._q[m]();e.Modernizr=Modernizr}(window,document);\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// EXTERNAL MODULE: ./src/vendor/modernizr.min.js\nvar modernizr_min = __webpack_require__(0);\nvar modernizr_min_default = /*#__PURE__*/__webpack_require__.n(modernizr_min);\n\n// CONCATENATED MODULE: ./src/services/browser-storage.ts\n\r\nfunction getSessionItem(key) {\r\n    if (!Modernizr.sessionstorage)\r\n        return null;\r\n    var result = sessionStorage.getItem(key);\r\n    if (result === 'false')\r\n        result = '';\r\n    return result;\r\n}\r\nfunction setSessionItem(key, value) {\r\n    var available = Modernizr.sessionstorage;\r\n    if (available)\r\n        sessionStorage.setItem(key, value);\r\n    return available;\r\n}\r\nfunction getLocalItem(key) {\r\n    if (!Modernizr.localstorage)\r\n        return null;\r\n    var result = localStorage.getItem(key);\r\n    if (result === 'false')\r\n        result = '';\r\n    return result;\r\n}\r\nfunction setLocalItem(key, value) {\r\n    var available = Modernizr.localstorage;\r\n    if (available)\r\n        localStorage.setItem(key, value);\r\n    return available;\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/player-highscore.ts\n\r\nvar player_highscore_highScore = parseInt(getLocalItem('highscore') || '', 10) || 0;\r\nfunction getHighScore() {\r\n    return player_highscore_highScore;\r\n}\r\nfunction setHighScore(value) {\r\n    player_highscore_highScore = value;\r\n    setLocalItem('highscore', player_highscore_highScore.toString());\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/player-score.ts\n\r\nvar currentScore = 0;\r\nfunction addScore(points) {\r\n    currentScore += points;\r\n    if (currentScore > getHighScore()) {\r\n        setHighScore(currentScore);\r\n    }\r\n    triggerScoreChange();\r\n}\r\nfunction resetScore() {\r\n    currentScore = 0;\r\n    triggerScoreChange();\r\n}\r\nvar subscribers = [];\r\nfunction onScoreChange(handler, triggerOnInit) {\r\n    if (triggerOnInit === void 0) { triggerOnInit = false; }\r\n    subscribers.push(handler);\r\n    if (triggerOnInit)\r\n        handler(currentScore);\r\n}\r\nfunction triggerScoreChange() {\r\n    subscribers.forEach(function (handler) { return handler(currentScore); });\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/player-score.ts\n\r\n\r\nfunction loadPlayerScore() {\r\n    var scoreEl = document.getElementById('player-score');\r\n    var highScore = document.getElementById('player-highscore');\r\n    onScoreChange(function (score) {\r\n        scoreEl.textContent = score.toLocaleString();\r\n        highScore.textContent = getHighScore().toLocaleString();\r\n    }, true);\r\n}\r\n\n// CONCATENATED MODULE: ./src/settings.ts\nvar settings = {\r\n    gameSpeed: 0.4,\r\n    points: {\r\n        linesCleared: {\r\n            1: 40,\r\n            2: 100,\r\n            3: 300,\r\n            4: 1200\r\n        },\r\n        softDrop: 1,\r\n        hardDrop: 2,\r\n        softDropMax: 20,\r\n        hardDropMax: 40\r\n    },\r\n    placementTimeout: 0.5,\r\n    debug: {\r\n        drawEmptyTiles: false,\r\n        emptyTileColor: '#f1f1f1'\r\n    }\r\n};\r\n/* harmony default export */ var src_settings = (settings);\r\n\n// CONCATENATED MODULE: ./src/services/draw-grid.ts\nfunction drawGrid(panel, gridSize) {\r\n    var tileSize = {\r\n        width: panel.size.width / gridSize.width,\r\n        height: panel.size.height / gridSize.height\r\n    };\r\n    var ctx = panel.ctx;\r\n    ctx.strokeStyle = '#efefef';\r\n    ctx.lineWidth = panel.pixelRatio;\r\n    for (var x = 0; x < panel.size.width; x += tileSize.width) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, 0);\r\n        ctx.lineTo(x, panel.size.height);\r\n        ctx.stroke();\r\n    }\r\n    for (var y = 0; y < panel.size.height; y += tileSize.height) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, y);\r\n        ctx.lineTo(panel.size.width, y);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/models/color.ts\nfunction getColorCode(color) {\r\n    switch (color) {\r\n        case 1:\r\n            return '#ffeb3b';\r\n        case 2:\r\n            return '#03a9f4';\r\n        case 3:\r\n            return '#f44336';\r\n        case 4:\r\n            return '#4caf50';\r\n        case 5:\r\n            return '#ff9800';\r\n        case 6:\r\n            return '#fbafbc';\r\n        case 7:\r\n            return '#9c27b0';\r\n        case 8:\r\n            return '#e0e0e0';\r\n        default:\r\n            return '#000';\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/draw-matrix.ts\n\r\n\r\nvar emptyColor = src_settings.debug.emptyTileColor;\r\nfunction drawMatrix(panel, matrix) {\r\n    var ctx = panel.ctx;\r\n    var tileSize = {\r\n        width: panel.size.width / matrix.length,\r\n        height: panel.size.height / matrix[0].length\r\n    };\r\n    matrix.forEach(function (col, x) { return col.forEach(function (item, y) {\r\n        if (typeof item === 'undefined' ||\r\n            !src_settings.debug.drawEmptyTiles && !item)\r\n            return;\r\n        ctx.fillStyle = item ? getColorCode(item) : emptyColor;\r\n        ctx.fillRect(x * tileSize.width | 0, y * tileSize.height | 0, Math.ceil(tileSize.width), Math.ceil(tileSize.height));\r\n    }); });\r\n}\r\n\n// CONCATENATED MODULE: ./src/interfaces/point.ts\nfunction clonePoint(point) {\r\n    return { x: point.x, y: point.y };\r\n}\r\nfunction pointEquals(a, b) {\r\n    return a.x === b.x && a.y === b.y;\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/arrays.ts\nfunction findIndex(array, predicate) {\r\n    for (var i = 0; i < array.length; i++) {\r\n        var value = array[i];\r\n        if (predicate(value, i)) {\r\n            return i;\r\n        }\r\n    }\r\n}\r\nfunction findAny(array, predicate) {\r\n    return typeof findIndex(array, predicate) !== 'undefined';\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/matrix-calculations.ts\n\r\n\r\nfunction createMatrix(size) {\r\n    var result = [];\r\n    for (var col = 0; col < size.width; col++) {\r\n        result[col] = new Array(size.height);\r\n    }\r\n    return result;\r\n}\r\nfunction copyMatrix(matrix) {\r\n    return matrix.reduce(function (result, col, x) {\r\n        result[x] = col.slice();\r\n        return result;\r\n    }, []);\r\n}\r\nfunction getMatrixSize(matrix) {\r\n    return {\r\n        width: matrix.length,\r\n        height: matrix[0].length\r\n    };\r\n}\r\nfunction matrixEquals(m1, m2) {\r\n    if (m1.length !== m2.length\r\n        || m1[0].length !== m2[0].length) {\r\n        return false;\r\n    }\r\n    return !findAny(m1, function (col, x) {\r\n        return findAny(col, function (value, y) {\r\n            return value !== m2[x][y];\r\n        });\r\n    });\r\n}\r\nfunction mergeMatrixes(parent, child, target) {\r\n    if (target === void 0) { target = copyMatrix(parent); }\r\n    var childMatrix = child.matrix, position = child.position;\r\n    var result = target;\r\n    for (var i = 0; i < childMatrix.length; i++) {\r\n        for (var j = 0; j < childMatrix[0].length; j++) {\r\n            var value = childMatrix[i][j];\r\n            if (typeof value === 'undefined')\r\n                continue;\r\n            var x = i + position.x;\r\n            var y = j + position.y;\r\n            if (x >= 0 && x < parent.length &&\r\n                y >= 0 && y < parent[0].length &&\r\n                (value || !result[x][y])) {\r\n                result[x][y] = value;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction xyMatrix(matrix) {\r\n    return rotateMatrix(matrix, true)\r\n        .reduce(function (result, col, x) {\r\n        result[x] = col.reverse();\r\n        return result;\r\n    }, []);\r\n}\r\nfunction rotateMatrix(matrix, reverse) {\r\n    if (reverse === void 0) { reverse = false; }\r\n    var l = matrix.length;\r\n    var result = createMatrix({ width: l, height: l });\r\n    for (var x = 0; x < l; x++) {\r\n        for (var y = 0; y < l; y++) {\r\n            result[x][y] = reverse\r\n                ? matrix[l - y - 1][x]\r\n                : matrix[y][l - x - 1];\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction matrixContains(parent, child) {\r\n    var childMatrix = child.matrix, position = child.position;\r\n    for (var i = 0; i < childMatrix.length; i++) {\r\n        var col = childMatrix[i];\r\n        for (var j = 0; j < col.length; j++) {\r\n            if (!col[j])\r\n                continue;\r\n            var x = i + position.x;\r\n            var y = j + position.y;\r\n            if (x < 0 || x >= parent.length ||\r\n                y < 0 || y >= parent[0].length) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction matrixesColliding(parent, child) {\r\n    var childMatrix = child.matrix, position = child.position;\r\n    for (var x = 0; x < childMatrix.length; x++) {\r\n        for (var y = 0; y < childMatrix[0].length; y++) {\r\n            if (!childMatrix[x][y])\r\n                continue;\r\n            var col = parent[x + position.x];\r\n            if (!col)\r\n                continue;\r\n            if (col[y + position.y]) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction getUnstuckPosition(matrix, isColliding) {\r\n    var shape = matrix.matrix, position = matrix.position;\r\n    var maxOffset = Math.ceil(shape.length / 2);\r\n    for (var i = 1; i <= maxOffset; i++) {\r\n        var pos = clonePoint(position);\r\n        pos.y += i;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        }))\r\n            return pos;\r\n        pos.y -= i * 2;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        }))\r\n            return pos;\r\n        pos.y += i;\r\n        pos.x += i;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        }))\r\n            return pos;\r\n        pos.x -= i * 2;\r\n        if (!isColliding({\r\n            matrix: shape,\r\n            position: pos\r\n        }))\r\n            return pos;\r\n        pos.x += i;\r\n    }\r\n    return null;\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/panel.ts\n\r\n\r\n\r\nvar panel_Panel = (function () {\r\n    function Panel(id) {\r\n        var canvas = document.getElementById(id);\r\n        this.pixelRatio = devicePixelRatio || 1;\r\n        this.size = {\r\n            width: parseInt(canvas.getAttribute('width'), 10) * this.pixelRatio,\r\n            height: parseInt(canvas.getAttribute('height'), 10) * this.pixelRatio\r\n        };\r\n        if (this.size.width !== canvas.offsetWidth) {\r\n            canvas.setAttribute('width', \"\" + this.size.width);\r\n        }\r\n        if (this.size.height !== canvas.offsetHeight) {\r\n            canvas.setAttribute('height', \"\" + this.size.height);\r\n        }\r\n        var ctx = canvas.getContext('2d');\r\n        if (!ctx)\r\n            throw new Error('Context not found!');\r\n        this.ctx = ctx;\r\n        this.canvas = canvas;\r\n    }\r\n    Panel.prototype.draw = function (matrix) {\r\n        this.clear();\r\n        drawGrid(this, getMatrixSize(matrix));\r\n        drawMatrix(this, matrix);\r\n    };\r\n    Panel.prototype.clear = function () {\r\n        this.ctx.clearRect(0, 0, this.size.width, this.size.height);\r\n    };\r\n    return Panel;\r\n}());\r\n/* harmony default export */ var components_panel = (panel_Panel);\r\n\n// CONCATENATED MODULE: ./src/models/board.ts\n\r\nvar board_Board = (function () {\r\n    function Board(size) {\r\n        this.size = size;\r\n        this.clear();\r\n    }\r\n    Object.defineProperty(Board.prototype, \"blocks\", {\r\n        get: function () { return this._blocks; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Board.prototype.place = function (shape, position) {\r\n        mergeMatrixes(this.blocks, {\r\n            matrix: shape.blocks,\r\n            position: position\r\n        }, this.blocks);\r\n    };\r\n    Board.prototype.clearFullLines = function () {\r\n        var _this = this;\r\n        var fullRows = this.getFullLines();\r\n        fullRows.forEach(function (row) { return _this.deleteRow(row); });\r\n        return fullRows.length;\r\n    };\r\n    Board.prototype.getFullLines = function () {\r\n        var rowCount = this._blocks[0].length;\r\n        var incompleteRows = new Array(rowCount - 1);\r\n        rows: for (var y = 0; y < rowCount; y++) {\r\n            for (var _i = 0, _a = this._blocks; _i < _a.length; _i++) {\r\n                var col = _a[_i];\r\n                if (!col[y]) {\r\n                    incompleteRows[y] = true;\r\n                    continue rows;\r\n                }\r\n            }\r\n        }\r\n        var result = [];\r\n        for (var row = 0; row < rowCount; row++) {\r\n            if (!incompleteRows[row])\r\n                result.push(row);\r\n        }\r\n        return result;\r\n    };\r\n    Board.prototype.deleteRow = function (row) {\r\n        this._blocks.forEach(function (col) {\r\n            col.splice(row, 1);\r\n            col.unshift(undefined);\r\n        });\r\n    };\r\n    Board.prototype.clear = function () {\r\n        this._blocks = [];\r\n        for (var x = 0; x < this.size.width; x++) {\r\n            this._blocks[x] = new Array(this.size.height);\r\n        }\r\n    };\r\n    Board.prototype.contains = function (matrix) {\r\n        return matrixContains(this._blocks, matrix);\r\n    };\r\n    Board.prototype.collides = function (matrix) {\r\n        return !this.contains(matrix)\r\n            || matrixesColliding(this.blocks, matrix);\r\n    };\r\n    return Board;\r\n}());\r\n/* harmony default export */ var models_board = (board_Board);\r\n\n// CONCATENATED MODULE: ./src/models/shape.ts\n\r\nvar shape_Shape = (function () {\r\n    function Shape(blocks) {\r\n        this._blocks = blocks;\r\n    }\r\n    Object.defineProperty(Shape.prototype, \"blocks\", {\r\n        get: function () {\r\n            return this._blocks;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Shape.prototype.rotate = function (reverse) {\r\n        if (reverse === void 0) { reverse = false; }\r\n        this._blocks = rotateMatrix(this._blocks, reverse);\r\n    };\r\n    return Shape;\r\n}());\r\n/* harmony default export */ var models_shape = (shape_Shape);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/i.ts\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar c = 2;\r\nvar i_I = (function (_super) {\r\n    __extends(I, _super);\r\n    function I() {\r\n        return _super.call(this, xyMatrix([\r\n            [0, 0, 0, 0],\r\n            [c, c, c, c],\r\n            [0, 0, 0, 0],\r\n            [0, 0, 0, 0]\r\n        ])) || this;\r\n    }\r\n    return I;\r\n}(models_shape));\r\n/* harmony default export */ var shapes_i = (i_I);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/j.ts\nvar j___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar j_c = 6;\r\nvar j_J = (function (_super) {\r\n    j___extends(J, _super);\r\n    function J() {\r\n        return _super.call(this, xyMatrix([\r\n            [j_c, 0, 0],\r\n            [j_c, j_c, j_c],\r\n            [0, 0, 0]\r\n        ])) || this;\r\n    }\r\n    return J;\r\n}(models_shape));\r\n/* harmony default export */ var j = (j_J);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/l.ts\nvar l___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar l_c = 5;\r\nvar l_L = (function (_super) {\r\n    l___extends(L, _super);\r\n    function L() {\r\n        return _super.call(this, xyMatrix([\r\n            [0, 0, l_c],\r\n            [l_c, l_c, l_c],\r\n            [0, 0, 0]\r\n        ])) || this;\r\n    }\r\n    return L;\r\n}(models_shape));\r\n/* harmony default export */ var l = (l_L);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/o.ts\nvar o___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar o_c = 1;\r\nvar o_O = (function (_super) {\r\n    o___extends(O, _super);\r\n    function O() {\r\n        return _super.call(this, xyMatrix([\r\n            [o_c, o_c],\r\n            [o_c, o_c]\r\n        ])) || this;\r\n    }\r\n    return O;\r\n}(models_shape));\r\n/* harmony default export */ var o = (o_O);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/s.ts\nvar s___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar s_c = 3;\r\nvar s_S = (function (_super) {\r\n    s___extends(S, _super);\r\n    function S() {\r\n        return _super.call(this, xyMatrix([\r\n            [0, s_c, s_c],\r\n            [s_c, s_c, 0],\r\n            [0, 0, 0]\r\n        ])) || this;\r\n    }\r\n    return S;\r\n}(models_shape));\r\n/* harmony default export */ var s = (s_S);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/t.ts\nvar t___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar t_c = 7;\r\nvar t_T = (function (_super) {\r\n    t___extends(T, _super);\r\n    function T() {\r\n        return _super.call(this, xyMatrix([\r\n            [t_c, t_c, t_c],\r\n            [0, t_c, 0],\r\n            [0, 0, 0]\r\n        ])) || this;\r\n    }\r\n    return T;\r\n}(models_shape));\r\n/* harmony default export */ var t = (t_T);\r\n\n// CONCATENATED MODULE: ./src/models/shapes/z.ts\nvar z___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar z_c = 4;\r\nvar z_Z = (function (_super) {\r\n    z___extends(Z, _super);\r\n    function Z() {\r\n        return _super.call(this, xyMatrix([\r\n            [z_c, z_c, 0],\r\n            [0, z_c, z_c],\r\n            [0, 0, 0]\r\n        ])) || this;\r\n    }\r\n    return Z;\r\n}(models_shape));\r\n/* harmony default export */ var z = (z_Z);\r\n\n// CONCATENATED MODULE: ./src/services/random-shape.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar shapes = [shapes_i, j, l, o, s, t, z];\r\nfunction getRandomShape() {\r\n    var Shape = shapes[Math.floor(Math.random() * shapes.length)];\r\n    return new Shape();\r\n}\r\n\n// CONCATENATED MODULE: ./src/models/player.ts\n\r\n\r\nvar player_Player = (function () {\r\n    function Player(startingPosition) {\r\n        this.softDropPoints = 0;\r\n        this._startingPos = startingPosition;\r\n        this.reset();\r\n    }\r\n    Object.defineProperty(Player.prototype, \"shape\", {\r\n        get: function () {\r\n            return this._shape;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Player.prototype.reset = function () {\r\n        this.position = clonePoint(this._startingPos);\r\n        this._shape = getRandomShape();\r\n        this.softDropPoints = 0;\r\n    };\r\n    return Player;\r\n}());\r\n/* harmony default export */ var player = (player_Player);\r\n\n// CONCATENATED MODULE: ./src/services/property.ts\nvar Property = (function () {\r\n    function Property(initialValue) {\r\n        this._value = initialValue;\r\n    }\r\n    Object.defineProperty(Property.prototype, \"value\", {\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        set: function (x) {\r\n            this._value = x;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Property;\r\n}());\r\n/* harmony default export */ var property = (Property);\r\n\n// CONCATENATED MODULE: ./src/services/storage.ts\n\r\n\r\n\r\n\r\nvar boardSize = {\r\n    width: 10,\r\n    height: 22\r\n};\r\nvar storage_player = new player({ x: boardSize.width / 2 - 1, y: 2 });\r\nvar storage_panel = new components_panel('game');\r\nvar storage_board = new models_board(boardSize);\r\nvar paused = new property(false);\r\n\n// CONCATENATED MODULE: ./src/services/game-over.ts\n\r\n\r\nfunction gameOver() {\r\n    storage_board.clear();\r\n    storage_player.reset();\r\n    resetScore();\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/timer.ts\nvar Timer = (function () {\r\n    function Timer(handler, interval, repeat) {\r\n        if (repeat === void 0) { repeat = true; }\r\n        this._running = false;\r\n        this._handler = handler;\r\n        this._interval = interval;\r\n        this._repeat = repeat;\r\n    }\r\n    Object.defineProperty(Timer.prototype, \"running\", {\r\n        get: function () { return this._running; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Timer.prototype.start = function (executeOnInit) {\r\n        var _this = this;\r\n        if (executeOnInit === void 0) { executeOnInit = false; }\r\n        if (executeOnInit) {\r\n            this._handler();\r\n            if (!this._repeat)\r\n                return;\r\n        }\r\n        this.stop();\r\n        this._handle = (this._repeat\r\n            ? setInterval\r\n            : setTimeout)(function () {\r\n            _this._handler();\r\n            _this._running = false;\r\n        }, this._interval);\r\n        this._running = true;\r\n    };\r\n    Timer.prototype.stop = function () {\r\n        this._handle = (this._repeat\r\n            ? clearInterval\r\n            : clearTimeout)(this._handle);\r\n        this._running = false;\r\n    };\r\n    return Timer;\r\n}());\r\n/* harmony default export */ var timer = (Timer);\r\n\n// CONCATENATED MODULE: ./src/services/ghost-matrix.ts\n\r\nvar ghostColor = 8;\r\nfunction createGhost(board, pm) {\r\n    var matrix = pm.matrix;\r\n    var position = clonePoint(pm.position);\r\n    var y = position.y;\r\n    do {\r\n        y++;\r\n    } while (!board.collides({\r\n        matrix: matrix,\r\n        position: { x: position.x, y: y }\r\n    }));\r\n    position.y = y - 1;\r\n    var ghost = matrix.map(function (col) { return col.map(function (x) {\r\n        if (x)\r\n            return ghostColor;\r\n    }); });\r\n    return { matrix: ghost, position: position };\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/view-matrix.ts\n\r\n\r\n\r\nfunction getViewMatrix() {\r\n    var playerMatrix = {\r\n        matrix: storage_player.shape.blocks,\r\n        position: storage_player.position\r\n    };\r\n    var ghost = createGhost(storage_board, playerMatrix);\r\n    var merged = mergeMatrixes(mergeMatrixes(storage_board.blocks, ghost), playerMatrix);\r\n    return merged.reduce(function (result, col) {\r\n        result.push(col.slice(2));\r\n        return result;\r\n    }, []);\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/gameloop.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction placePiece() {\r\n    storage_board.place(storage_player.shape, storage_player.position);\r\n    var linesCleared = storage_board.clearFullLines();\r\n    if (linesCleared) {\r\n        var scoring = src_settings.points.linesCleared;\r\n        addScore(scoring[linesCleared]);\r\n    }\r\n    storage_player.reset();\r\n    var matrix = {\r\n        matrix: storage_player.shape.blocks,\r\n        position: storage_player.position\r\n    };\r\n    if (storage_board.collides(matrix)) {\r\n        var unstuckPos = getUnstuckPosition(matrix, storage_board.collides.bind(storage_board));\r\n        if (unstuckPos)\r\n            storage_player.position = unstuckPos;\r\n        else\r\n            gameOver();\r\n    }\r\n}\r\nvar lockTimeout = new timer(placePiece, src_settings.placementTimeout * 1000, false);\r\nfunction stopLockTimeout() {\r\n    lockTimeout.stop();\r\n}\r\nfunction update() {\r\n    var newPos = {\r\n        x: storage_player.position.x,\r\n        y: storage_player.position.y + 1\r\n    };\r\n    if (!storage_board.collides({ matrix: storage_player.shape.blocks, position: newPos })) {\r\n        storage_player.position = newPos;\r\n    }\r\n    else {\r\n        lockTimeout.start();\r\n    }\r\n    storage_panel.draw(getViewMatrix());\r\n}\r\nvar interval;\r\nvar currentSeconds;\r\nfunction setLoopSpeed(seconds) {\r\n    currentSeconds = seconds;\r\n    stopLoop();\r\n    update();\r\n    interval = window.setInterval(function () {\r\n        if (!lockTimeout.running)\r\n            update();\r\n    }, seconds * 1000);\r\n}\r\nfunction startLoop() {\r\n    setLoopSpeed(currentSeconds);\r\n}\r\nfunction stopLoop() {\r\n    window.clearInterval(interval);\r\n}\r\n\n// EXTERNAL MODULE: ./node_modules/hammerjs/hammer.js\nvar hammer = __webpack_require__(2);\nvar hammer_default = /*#__PURE__*/__webpack_require__.n(hammer);\n\n// CONCATENATED MODULE: ./src/services/dom.ts\nfunction eID(id) {\r\n    var el = document.getElementById(id);\r\n    if (!el)\r\n        throw new ReferenceError(\"Element with ID \" + id + \" does not exist!\");\r\n    return el;\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/pause-game.ts\n\r\n\r\n\r\nvar modal = eID('pause-modal');\r\nvar continueBtn = eID('continue-btn');\r\nfunction handlePauseGame() {\r\n    addEventListener('blur', pauseGame);\r\n    continueBtn.addEventListener('click', restartGame);\r\n}\r\nfunction pauseGame() {\r\n    stopLoop();\r\n    modal.style.display = 'block';\r\n    paused.value = true;\r\n}\r\nfunction restartGame() {\r\n    startLoop();\r\n    modal.style.display = 'none';\r\n    paused.value = false;\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/unique-array.ts\nvar UniqueArray = (function () {\r\n    function UniqueArray() {\r\n        this._array = [];\r\n    }\r\n    Object.defineProperty(UniqueArray.prototype, \"count\", {\r\n        get: function () { return this._array.length; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UniqueArray.prototype, \"values\", {\r\n        get: function () { return this._array; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    UniqueArray.prototype.add = function (value) {\r\n        if (!this.contains(value)) {\r\n            this._array.push(value);\r\n        }\r\n    };\r\n    UniqueArray.prototype.remove = function (value) {\r\n        var index = this._array.indexOf(value);\r\n        if (index >= 0) {\r\n            this._array.splice(index, 1);\r\n        }\r\n    };\r\n    UniqueArray.prototype.contains = function (value) {\r\n        return this._array.indexOf(value) >= 0;\r\n    };\r\n    return UniqueArray;\r\n}());\r\n/* harmony default export */ var unique_array = (UniqueArray);\r\n\n// CONCATENATED MODULE: ./src/services/key-handling.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar keysDown = new unique_array();\r\nvar keyInterval = new timer(function () {\r\n    keysDown.values.forEach(function (code) {\r\n        handlePlayerMovement(code, true);\r\n    });\r\n}, 90);\r\nvar keyThresholdTimer = new timer(function () {\r\n    keyInterval.start();\r\n}, 200, false);\r\nfunction handleInput() {\r\n    document.addEventListener('keydown', function (e) {\r\n        if (e.repeat)\r\n            return;\r\n        var keyCode = e.code;\r\n        if (handlePlayerMovement(keyCode, false)) {\r\n            e.preventDefault();\r\n            keysDown.add(keyCode);\r\n            if (keyCode === 'ArrowLeft' || keyCode === 'ArrowRight') {\r\n                keyInterval.stop();\r\n                keyThresholdTimer.start();\r\n            }\r\n            else\r\n                keyInterval.start();\r\n        }\r\n        if (paused.value) {\r\n            if (keyCode === 'Escape' || keyCode === 'Space') {\r\n                restartGame();\r\n            }\r\n        }\r\n        else if (keyCode === 'Escape') {\r\n            pauseGame();\r\n        }\r\n    });\r\n    document.addEventListener('keyup', function (e) {\r\n        if (keysDown.contains(e.code)) {\r\n            keysDown.remove(e.code);\r\n            if (keysDown.count === 0) {\r\n                keyThresholdTimer.stop();\r\n                keyInterval.stop();\r\n            }\r\n        }\r\n    });\r\n    if (!Modernizr.touchevents)\r\n        return;\r\n    var mc = new hammer[\"Manager\"](document.body);\r\n    mc.add(new hammer[\"Tap\"]());\r\n    mc.add(new hammer[\"Swipe\"]({ direction: hammer[\"DIRECTION_DOWN\"] }));\r\n    mc.add(new hammer[\"Pan\"]({ direction: hammer[\"DIRECTION_HORIZONTAL\"], threshold: 20 }));\r\n    mc.on('tap', function () { return handlePlayerMovement('ArrowUp', false); });\r\n    mc.on('swipedown', function () { return handlePlayerMovement('Space', false); });\r\n    var isFirst = true;\r\n    mc.on('panstart', function () { return isFirst = true; });\r\n    mc.on('panleft', function (e) {\r\n        movePiece(e.deltaX, isFirst);\r\n        if (isFirst)\r\n            isFirst = false;\r\n    });\r\n    mc.on('panright', function (e) {\r\n        movePiece(e.deltaX, isFirst);\r\n        if (isFirst)\r\n            isFirst = false;\r\n    });\r\n}\r\nvar colStart;\r\nfunction movePiece(deltaX, reset) {\r\n    var canvasWidth = storage_panel.canvas.offsetWidth;\r\n    var tileWidth = canvasWidth / storage_board.size.width;\r\n    if (reset || typeof colStart === 'undefined') {\r\n        colStart = storage_player.position.x - deltaX / tileWidth;\r\n    }\r\n    var newCol = Math.floor(colStart + deltaX / tileWidth);\r\n    if (newCol === colStart)\r\n        return;\r\n    var deltaCol = storage_player.position.x - newCol;\r\n    if (deltaCol > 0) {\r\n        for (var i = 0; i < deltaCol; i++) {\r\n            handlePlayerMovement('ArrowLeft', false);\r\n        }\r\n    }\r\n    else {\r\n        for (var i = 0; i > deltaCol; i--) {\r\n            handlePlayerMovement('ArrowRight', false);\r\n        }\r\n    }\r\n}\r\nfunction handlePlayerMovement(keyCode, repeated) {\r\n    if (paused.value)\r\n        return false;\r\n    var newPosition = {\r\n        x: storage_player.position.x,\r\n        y: storage_player.position.y\r\n    };\r\n    var beforeMatrix = copyMatrix(storage_player.shape.blocks);\r\n    var triggered = true;\r\n    var hardDropped = false;\r\n    switch (keyCode) {\r\n        case 'ArrowUp':\r\n            if (repeated)\r\n                return true;\r\n            storage_player.shape.rotate();\r\n            var playerMatrix = {\r\n                matrix: storage_player.shape.blocks,\r\n                position: newPosition\r\n            };\r\n            if (storage_board.collides(playerMatrix)) {\r\n                var unstuckPos = getUnstuckPosition(playerMatrix, storage_board.collides.bind(storage_board));\r\n                if (!unstuckPos) {\r\n                    storage_player.shape.rotate(true);\r\n                }\r\n                else {\r\n                    newPosition = unstuckPos;\r\n                }\r\n            }\r\n            break;\r\n        case 'ArrowRight':\r\n            newPosition.x++;\r\n            break;\r\n        case 'ArrowDown':\r\n            newPosition.y++;\r\n            var sdPoints = src_settings.points.softDrop;\r\n            storage_player.softDropPoints += sdPoints;\r\n            if (storage_player.softDropPoints < src_settings.points.softDropMax) {\r\n                addScore(sdPoints);\r\n            }\r\n            break;\r\n        case 'ArrowLeft':\r\n            newPosition.x--;\r\n            break;\r\n        case 'Space':\r\n            if (repeated)\r\n                return true;\r\n            var nextPos = newPosition;\r\n            var hdPoints = 0;\r\n            do {\r\n                nextPos = { x: nextPos.x, y: nextPos.y + 1 };\r\n                hdPoints += src_settings.points.hardDrop;\r\n            } while (!storage_board.collides({\r\n                matrix: storage_player.shape.blocks,\r\n                position: nextPos\r\n            }));\r\n            newPosition = { x: nextPos.x, y: nextPos.y - 1 };\r\n            addScore(Math.min(hdPoints - src_settings.points.hardDrop, src_settings.points.hardDropMax));\r\n            hardDropped = true;\r\n            break;\r\n        default:\r\n            triggered = false;\r\n            break;\r\n    }\r\n    var posChanged = !pointEquals(storage_player.position, newPosition);\r\n    if (posChanged || hardDropped) {\r\n        var newMatrix = {\r\n            matrix: storage_player.shape.blocks,\r\n            position: newPosition\r\n        };\r\n        if (!storage_board.collides(newMatrix)) {\r\n            storage_player.position = newPosition;\r\n        }\r\n        else\r\n            posChanged = false;\r\n        if (hardDropped\r\n            || keyCode === 'ArrowDown'\r\n                && storage_board.collides(newMatrix)) {\r\n            placePiece();\r\n        }\r\n    }\r\n    var rotationChanged = !matrixEquals(storage_player.shape.blocks, beforeMatrix);\r\n    if (posChanged || rotationChanged) {\r\n        stopLockTimeout();\r\n        storage_panel.draw(getViewMatrix());\r\n    }\r\n    return triggered;\r\n}\r\n\n// CONCATENATED MODULE: ./src/services/modernizr.ts\n\r\nfunction loadTouchDetection() {\r\n    if (Modernizr.touchevents) {\r\n        var root = document.getElementsByTagName('html')[0];\r\n        root.classList.add('touch');\r\n        if (isMobileSafari()) {\r\n            root.classList.add('ios-safari');\r\n        }\r\n    }\r\n}\r\nfunction isMobileSafari() {\r\n    var ua = window.navigator.userAgent;\r\n    var iOS = !!ua.match(/iP(ad|od|hone)/i);\r\n    var webkit = !!ua.match(/WebKit/i);\r\n    return iOS && webkit && !ua.match(/CriOS/i) && !ua.match(/OPiOS/i);\r\n}\r\n\n// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\nloadTouchDetection();\r\nsetLoopSpeed(src_settings.gameSpeed);\r\nhandleInput();\r\nloadPlayerScore();\r\nhandlePauseGame();\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n        return Hammer;\n    }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2035d1f310953e7c67a2","/*! modernizr 3.5.0 (Custom Build) | MIT *\n * https://modernizr.com/download/?-canvas-localstorage-serviceworker-sessionstorage-touchevents-webgl !*/\n!function(e,t,n){function o(e,t){return typeof e===t}function r(){var e,t,n,r,s,a,i;for(var d in l)if(l.hasOwnProperty(d)){if(e=[],t=l[d],t.name&&(e.push(t.name.toLowerCase()),t.options&&t.options.aliases&&t.options.aliases.length))for(n=0;n<t.options.aliases.length;n++)e.push(t.options.aliases[n].toLowerCase());for(r=o(t.fn,\"function\")?t.fn():t.fn,s=0;s<e.length;s++)a=e[s],i=a.split(\".\"),1===i.length?Modernizr[i[0]]=r:(!Modernizr[i[0]]||Modernizr[i[0]]instanceof Boolean||(Modernizr[i[0]]=new Boolean(Modernizr[i[0]])),Modernizr[i[0]][i[1]]=r),c.push((r?\"\":\"no-\")+i.join(\"-\"))}}function s(){return\"function\"!=typeof t.createElement?t.createElement(arguments[0]):u?t.createElementNS.call(t,\"http://www.w3.org/2000/svg\",arguments[0]):t.createElement.apply(t,arguments)}function a(){var e=t.body;return e||(e=s(u?\"svg\":\"body\"),e.fake=!0),e}function i(e,n,o,r){var i,l,d,c,u=\"modernizr\",p=s(\"div\"),v=a();if(parseInt(o,10))for(;o--;)d=s(\"div\"),d.id=r?r[o]:u+(o+1),p.appendChild(d);return i=s(\"style\"),i.type=\"text/css\",i.id=\"s\"+u,(v.fake?v:p).appendChild(i),v.appendChild(p),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(t.createTextNode(e)),p.id=u,v.fake&&(v.style.background=\"\",v.style.overflow=\"hidden\",c=f.style.overflow,f.style.overflow=\"hidden\",f.appendChild(v)),l=n(p,e),v.fake?(v.parentNode.removeChild(v),f.style.overflow=c,f.offsetHeight):p.parentNode.removeChild(p),!!l}var l=[],d={_version:\"3.5.0\",_config:{classPrefix:\"\",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(e,t){var n=this;setTimeout(function(){t(n[e])},0)},addTest:function(e,t,n){l.push({name:e,fn:t,options:n})},addAsyncTest:function(e){l.push({name:null,fn:e})}},Modernizr=function(){};Modernizr.prototype=d,Modernizr=new Modernizr,Modernizr.addTest(\"serviceworker\",\"serviceWorker\"in navigator),Modernizr.addTest(\"localstorage\",function(){var e=\"modernizr\";try{return localStorage.setItem(e,e),localStorage.removeItem(e),!0}catch(t){return!1}}),Modernizr.addTest(\"sessionstorage\",function(){var e=\"modernizr\";try{return sessionStorage.setItem(e,e),sessionStorage.removeItem(e),!0}catch(t){return!1}});var c=[],f=t.documentElement,u=\"svg\"===f.nodeName.toLowerCase();Modernizr.addTest(\"canvas\",function(){var e=s(\"canvas\");return!(!e.getContext||!e.getContext(\"2d\"))}),Modernizr.addTest(\"webgl\",function(){var t=s(\"canvas\"),n=\"probablySupportsContext\"in t?\"probablySupportsContext\":\"supportsContext\";return n in t?t[n](\"webgl\")||t[n](\"experimental-webgl\"):\"WebGLRenderingContext\"in e});var p=d._config.usePrefixes?\" -webkit- -moz- -o- -ms- \".split(\" \"):[\"\",\"\"];d._prefixes=p;var v=d.testStyles=i;Modernizr.addTest(\"touchevents\",function(){var n;if(\"ontouchstart\"in e||e.DocumentTouch&&t instanceof DocumentTouch)n=!0;else{var o=[\"@media (\",p.join(\"touch-enabled),(\"),\"heartz\",\")\",\"{#modernizr{top:9px;position:absolute}}\"].join(\"\");v(o,function(e){n=9===e.offsetTop})}return n}),r(),delete d.addTest,delete d.addAsyncTest;for(var m=0;m<Modernizr._q.length;m++)Modernizr._q[m]();e.Modernizr=Modernizr}(window,document);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/vendor/modernizr.min.js\n// module id = 0\n// module chunks = 0","import '../vendor/modernizr.min.js';\n\nexport function getSessionItem(key: string): string | null {\n    if (!Modernizr.sessionstorage) return null;\n\n    let result = sessionStorage.getItem(key);\n    if (result === 'false') result = '';\n    return result;\n}\n\nexport function setSessionItem(key: string, value: string): boolean {\n    const available = Modernizr.sessionstorage;\n    if (available) sessionStorage.setItem(key, value);\n    return available;\n}\n\nexport function getLocalItem(key: string): string | null {\n    if (!Modernizr.localstorage) return null;\n\n    let result = localStorage.getItem(key);\n    if (result === 'false') result = '';\n    return result;\n}\n\nexport function setLocalItem(key: string, value: string): boolean {\n    const available = Modernizr.localstorage;\n    if (available) localStorage.setItem(key, value);\n    return available;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/browser-storage.ts","import { getLocalItem, setLocalItem } from './browser-storage';\n\nlet highScore = parseInt(getLocalItem('highscore') || '', 10) || 0;\n\nexport function getHighScore() {\n    return highScore;\n}\n\nexport function setHighScore(value: number): void {\n    highScore = value;\n    setLocalItem('highscore', highScore.toString());\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/player-highscore.ts","import { getHighScore, setHighScore } from './player-highscore';\n\nlet currentScore = 0;\n\nexport function addScore(points: number): void {\n    currentScore += points;\n    if (currentScore > getHighScore()) {\n        setHighScore(currentScore);\n    }\n    triggerScoreChange();\n}\n\nexport function resetScore(): void {\n    currentScore = 0;\n    triggerScoreChange();\n}\n\nconst subscribers: Array<(score: number) => void> = [];\nexport function onScoreChange(handler: (score: number) => void, triggerOnInit = false): void {\n    subscribers.push(handler);\n    if (triggerOnInit) handler(currentScore);\n}\n\nfunction triggerScoreChange(): void {\n    subscribers.forEach(handler => handler(currentScore));\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/player-score.ts","import Panel from '../components/panel';\nimport { ISize } from '../interfaces/size';\n\nexport default function drawGrid(panel: Panel, gridSize: ISize): void {\n    const tileSize: ISize = {\n        width: panel.size.width / gridSize.width,\n        height: panel.size.height / gridSize.height\n    };\n\n    const { ctx } = panel;\n    ctx.strokeStyle = '#efefef';\n    ctx.lineWidth = panel.pixelRatio;\n\n    for (let x = 0; x < panel.size.width; x += tileSize.width) {\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, panel.size.height);\n        ctx.stroke();\n    }\n\n    for (let y = 0; y < panel.size.height; y += tileSize.height) {\n        ctx.beginPath();\n        ctx.moveTo(0, y);\n        ctx.lineTo(panel.size.width, y);\n        ctx.stroke();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/draw-grid.ts","export const enum Color {\n    Yellow = 1,\n    Blue = 2,\n    Red = 3,\n    Green = 4,\n    Orange = 5,\n    Pink = 6,\n    Purple = 7,\n    Grey = 8\n}\n\nexport function getColorCode(color: Color): string {\n    switch (color) {\n        case Color.Yellow:\n            return '#ffeb3b';\n        case Color.Blue:\n            return '#03a9f4';\n        case Color.Red:\n            return '#f44336';\n        case Color.Green:\n            return '#4caf50';\n        case Color.Orange:\n            return '#ff9800';\n        case Color.Pink:\n            return '#fbafbc';\n        case Color.Purple:\n            return '#9c27b0';\n        case Color.Grey:\n            return '#e0e0e0';\n        default:\n            return '#000';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/color.ts","import Panel from '../components/panel';\nimport Matrix from '../interfaces/matrix';\nimport { ISize } from '../interfaces/size';\nimport { getColorCode } from '../models/color';\nimport settings from '../settings';\n\nconst emptyColor = settings.debug.emptyTileColor;\n\nexport default function drawMatrix(panel: Panel, matrix: Matrix): void {\n    const ctx = panel.ctx;\n\n    const tileSize: ISize = {\n        width: panel.size.width / matrix.length,\n        height: panel.size.height / matrix[0].length\n    };\n\n    matrix.forEach((col, x) => col.forEach((item, y) => {\n        if (typeof item === 'undefined' ||\n            !settings.debug.drawEmptyTiles && !item) return;\n\n        ctx.fillStyle = item ? getColorCode(item) : emptyColor;\n        ctx.fillRect(\n            x * tileSize.width | 0,\n            y * tileSize.height | 0,\n            Math.ceil(tileSize.width),\n            Math.ceil(tileSize.height));\n    }));\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/draw-matrix.ts","export default interface IPoint {\n    x: number;\n    y: number;\n}\n\nexport function clonePoint(point: IPoint): IPoint {\n    return { x: point.x, y: point.y };\n}\n\nexport function pointEquals(a: IPoint, b: IPoint): boolean {\n    return a.x === b.x && a.y === b.y;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/interfaces/point.ts","export function findIndex<T>(array: T[], predicate: (item: T, index: number) => boolean): number | undefined {\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        if (predicate(value, i)) {\n            return i;\n        }\n    }\n}\n\nexport function findAny<T>(array: T[], predicate: (item: T, index: number) => boolean): boolean {\n    return typeof findIndex(array, predicate) !== 'undefined';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/arrays.ts","import Matrix from '../interfaces/matrix';\nimport { clonePoint, default as IPoint } from '../interfaces/point';\nimport IPositionedMatrix from '../interfaces/positioned-matrix';\nimport { ISize } from '../interfaces/size';\nimport { findAny } from './arrays';\n\nexport function createMatrix(size: ISize): Matrix {\n    const result: Matrix = [];\n    for (let col = 0; col < size.width; col++) {\n        result[col] = new Array(size.height);\n    }\n    return result;\n}\n\nexport function copyMatrix(matrix: Matrix): Matrix {\n    return matrix.reduce<Matrix>((result, col, x) => {\n        result[x] = col.slice();\n        return result;\n    }, []);\n}\n\nexport function getMatrixSize(matrix: Matrix): ISize {\n    return {\n        width: matrix.length,\n        height: matrix[0].length\n    };\n}\n\nexport function matrixEquals(m1: Matrix, m2: Matrix): boolean {\n    if (m1.length !== m2.length\n        || m1[0].length !== m2[0].length) {\n        return false;\n    }\n\n    return !findAny(m1, (col, x) => {\n        return findAny(col, (value, y) => {\n            return value !== m2[x][y];\n        });\n    });\n}\n\n/**\n * Merges parent and child matrixes into the target matrix\n */\nexport function mergeMatrixes(parent: Matrix, child: IPositionedMatrix, target = copyMatrix(parent)): Matrix {\n    const { matrix: childMatrix, position } = child;\n    const result = target;\n\n    for (let i = 0; i < childMatrix.length; i++) {\n        for (let j = 0; j < childMatrix[0].length; j++) {\n            const value = childMatrix[i][j];\n            if (typeof value === 'undefined') continue;\n\n            const x = i + position.x;\n            const y = j + position.y;\n\n            if (x >= 0 && x < parent.length &&\n                y >= 0 && y < parent[0].length &&\n                (value || !result[x][y])) {\n                result[x][y] = value;\n            }\n        }\n    }\n\n    return result;\n}\n\n/**\n * Transforms matrix to be used in the coordinate system\n */\nexport function xyMatrix(matrix: Matrix): Matrix {\n    return rotateMatrix(matrix, true)\n        .reduce<Matrix>((result, col, x) => {\n            // Flip columns\n            result[x] = col.reverse();\n            return result;\n        }, []);\n}\n\n/**\n * Rotate a square 2D matrix\n */\nexport function rotateMatrix(matrix: Matrix, reverse = false): Matrix {\n    const l = matrix.length;\n    const result = createMatrix({ width: l, height: l });\n\n    // Apply rotation\n    for (let x = 0; x < l; x++) {\n        for (let y = 0; y < l; y++) {\n            result[x][y] = reverse\n                ? matrix[l - y - 1][x]\n                : matrix[y][l - x - 1];\n        }\n    }\n\n    return result;\n}\n\n/**\n * Checks if child is not outside parent matrix\n */\nexport function matrixContains(parent: Matrix, child: IPositionedMatrix): boolean {\n    const { matrix: childMatrix, position } = child;\n\n    for (let i = 0; i < childMatrix.length; i++) {\n        const col = childMatrix[i];\n        for (let j = 0; j < col.length; j++) {\n            if (!col[j]) continue;\n\n            const x = i + position.x;\n            const y = j + position.y;\n\n            if (x < 0 || x >= parent.length ||\n                y < 0 || y >= parent[0].length) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nexport function matrixesColliding(parent: Matrix, child: IPositionedMatrix): boolean {\n    const { matrix: childMatrix, position } = child;\n\n    for (let x = 0; x < childMatrix.length; x++) {\n        for (let y = 0; y < childMatrix[0].length; y++) {\n            if (!childMatrix[x][y]) continue;\n\n            const col = parent[x + position.x];\n            if (!col) continue;\n\n            if (col[y + position.y]) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\n/**\n * Tries to move matrix to a non-colliding position\n */\nexport function getUnstuckPosition(matrix: IPositionedMatrix,\n    isColliding: (matrix: IPositionedMatrix) => boolean): IPoint | null {\n\n    const { matrix: shape, position } = matrix;\n\n    const maxOffset = Math.ceil(shape.length / 2);\n    for (let i = 1; i <= maxOffset; i++) {\n        const pos = clonePoint(position);\n\n        // Try down\n        pos.y += i;\n        if (!isColliding({\n            matrix: shape,\n            position: pos\n        })) return pos;\n\n        // Try up\n        pos.y -= i * 2;\n        if (!isColliding({\n            matrix: shape,\n            position: pos\n        })) return pos;\n        pos.y += i;\n\n        // Try right\n        pos.x += i;\n        if (!isColliding({\n            matrix: shape,\n            position: pos\n        })) return pos;\n\n        // Try left\n        pos.x -= i * 2;\n        if (!isColliding({\n            matrix: shape,\n            position: pos\n        })) return pos;\n        pos.x += i;\n    }\n\n    return null;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/matrix-calculations.ts","import I from '../models/shapes/i';\nimport J from '../models/shapes/j';\nimport L from '../models/shapes/l';\nimport O from '../models/shapes/o';\nimport S from '../models/shapes/s';\nimport T from '../models/shapes/t';\nimport Z from '../models/shapes/z';\n\nconst shapes = [I, J, L, O, S, T, Z];\n\nexport default function getRandomShape() {\n    const Shape = shapes[Math.floor(Math.random() * shapes.length)];\n    return new Shape();\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/random-shape.ts","import { resetScore } from './player-score';\nimport { board, player } from './storage';\n\nexport default function gameOver(): void {\n    board.clear();\n    player.reset();\n    resetScore();\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/game-over.ts","import Matrix from '../interfaces/matrix';\nimport { clonePoint } from '../interfaces/point';\nimport IPositionedMatrix from '../interfaces/positioned-matrix';\nimport Board from '../models/board';\nimport { Color } from '../models/color';\n\nconst ghostColor = Color.Grey;\n\nexport default function createGhost(board: Board, pm: IPositionedMatrix): IPositionedMatrix {\n    const matrix = pm.matrix;\n    const position = clonePoint(pm.position);\n\n    // Calculate y position\n    let y = position.y;\n    do {\n        y++;\n    } while (!board.collides({\n        matrix,\n        position: { x: position.x, y }\n    }));\n    position.y = y - 1;\n\n    // Copy matrix with new color\n    const ghost: Matrix = matrix.map(col => col.map(x => {\n        if (x) return ghostColor;\n    }));\n\n    return { matrix: ghost, position };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/ghost-matrix.ts","import Matrix from '../interfaces/matrix';\nimport createGhost from './ghost-matrix';\nimport { mergeMatrixes } from './matrix-calculations';\nimport { board, player } from './storage';\n\nexport default function getViewMatrix(): Matrix {\n\n    const playerMatrix = {\n        matrix: player.shape.blocks,\n        position: player.position\n    };\n\n    const ghost = createGhost(board, playerMatrix);\n\n    const merged = mergeMatrixes(\n        mergeMatrixes(board.blocks, ghost),\n        playerMatrix\n    );\n\n    // Strip top two rows\n    return merged.reduce((result: Matrix, col) => {\n        result.push(col.slice(2));\n        return result;\n    }, []);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/view-matrix.ts","import settings from '../settings';\nimport gameOver from './game-over';\nimport { getUnstuckPosition } from './matrix-calculations';\nimport { addScore } from './player-score';\nimport { board, panel, player } from './storage';\nimport Timer from './timer';\nimport getViewMatrix from './view-matrix';\n\nexport function placePiece(): void {\n    board.place(player.shape, player.position);\n    const linesCleared = board.clearFullLines();\n\n    // Add points for cleared lines\n    if (linesCleared) {\n        const scoring = settings.points.linesCleared as { [lines: number]: number };\n        addScore(scoring[linesCleared]);\n    }\n\n    player.reset();\n\n    // Detect immediate collision\n    const matrix = {\n        matrix: player.shape.blocks,\n        position: player.position\n    };\n\n    if (board.collides(matrix)) {\n        // Try to reposition\n        const unstuckPos = getUnstuckPosition(matrix, board.collides.bind(board));\n        if (unstuckPos) player.position = unstuckPos;\n        else gameOver();\n    }\n}\n\nconst lockTimeout = new Timer(placePiece, settings.placementTimeout * 1000, false);\n\nexport function stopLockTimeout(): void {\n    lockTimeout.stop();\n}\n\nfunction update(): void {\n    const newPos = {\n        x: player.position.x,\n        y: player.position.y + 1\n    };\n\n    if (!board.collides({ matrix: player.shape.blocks, position: newPos })) {\n        // Move piece down\n        player.position = newPos;\n    } else {\n        // Colliding, init placement\n        lockTimeout.start();\n    }\n\n    panel.draw(getViewMatrix());\n}\n\n// Call update immediately\nlet interval: number;\nlet currentSeconds: number;\n\nexport function setLoopSpeed(seconds: number): void {\n    currentSeconds = seconds;\n\n    stopLoop();\n    update();\n    interval = window.setInterval(() => {\n        if (!lockTimeout.running) update();\n    }, seconds * 1000);\n}\n\nexport function startLoop(): void {\n    setLoopSpeed(currentSeconds);\n}\n\nexport function stopLoop(): void {\n    window.clearInterval(interval);\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/gameloop.ts","export function eID(id: string) {\n    const el = document.getElementById(id);\n    if (!el) throw new ReferenceError(`Element with ID ${id} does not exist!`);\n    return el;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/dom.ts","import { eID } from './dom';\nimport { startLoop, stopLoop } from './gameloop';\nimport { paused } from './storage';\n\nconst modal = eID('pause-modal');\nconst continueBtn = eID('continue-btn');\n\nexport default function handlePauseGame(): void {\n    addEventListener('blur', pauseGame);\n    continueBtn.addEventListener('click', restartGame);\n}\n\nexport function pauseGame(): void {\n    stopLoop();\n    modal.style.display = 'block';\n    paused.value = true;\n}\n\nexport function restartGame(): void {\n    startLoop();\n    modal.style.display = 'none';\n    paused.value = false;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/pause-game.ts","import * as Hammer from 'hammerjs';\nimport { pointEquals } from '../interfaces/point';\nimport settings from '../settings';\nimport { placePiece, stopLockTimeout } from './gameloop';\nimport { copyMatrix, getUnstuckPosition, matrixEquals } from './matrix-calculations';\nimport { pauseGame, restartGame } from './pause-game';\nimport { addScore } from './player-score';\nimport { board, panel, paused, player } from './storage';\nimport Timer from './timer';\nimport UniqueArray from './unique-array';\nimport getViewMatrix from './view-matrix';\n\nconst keysDown = new UniqueArray<string>();\n\nconst keyInterval = new Timer(() => {\n    keysDown.values.forEach(code => {\n        handlePlayerMovement(code, true);\n    });\n}, 90);\n\nconst keyThresholdTimer = new Timer(() => {\n    keyInterval.start();\n}, 200, false);\n\nexport default function handleInput(): void {\n    document.addEventListener('keydown', e => {\n        if (e.repeat) return;\n\n        const keyCode = e.code;\n\n        if (handlePlayerMovement(keyCode, false)) {\n            e.preventDefault();\n\n            keysDown.add(keyCode);\n\n            if (keyCode === 'ArrowLeft' || keyCode === 'ArrowRight') {\n                // Make it easier to move one tile\n                keyInterval.stop();\n                keyThresholdTimer.start();\n            } else keyInterval.start();\n        }\n\n        // Pause game handling\n        if (paused.value) {\n            if (keyCode === 'Escape' || keyCode === 'Space') {\n                restartGame();\n            }\n        } else if (keyCode === 'Escape') {\n            pauseGame();\n        }\n    });\n\n    document.addEventListener('keyup', e => {\n        if (keysDown.contains(e.code)) {\n            keysDown.remove(e.code);\n\n            if (keysDown.count === 0) {\n                keyThresholdTimer.stop();\n                keyInterval.stop();\n            }\n        }\n    });\n\n    // Touch controls\n    if (!Modernizr.touchevents) return;\n    const mc = new Hammer.Manager(document.body);\n    mc.add(new Hammer.Tap());\n    mc.add(new Hammer.Swipe({ direction: Hammer.DIRECTION_DOWN }));\n    mc.add(new Hammer.Pan({ direction: Hammer.DIRECTION_HORIZONTAL, threshold: 20 }));\n    mc.on('tap', () => handlePlayerMovement('ArrowUp', false));\n    mc.on('swipedown', () => handlePlayerMovement('Space', false));\n\n    let isFirst = true;\n    mc.on('panstart', () => isFirst = true);\n    mc.on('panleft', e => {\n        movePiece(e.deltaX, isFirst);\n        if (isFirst) isFirst = false;\n    });\n    mc.on('panright', e => {\n        movePiece(e.deltaX, isFirst);\n        if (isFirst) isFirst = false;\n    });\n}\n\nlet colStart: number;\nfunction movePiece(deltaX: number, reset: boolean): void {\n\n    const canvasWidth = panel.canvas.offsetWidth;\n    const tileWidth = canvasWidth / board.size.width;\n\n    if (reset || typeof colStart === 'undefined') {\n        colStart = player.position.x - deltaX / tileWidth;\n    }\n\n    const newCol = Math.floor(colStart + deltaX / tileWidth);\n    if (newCol === colStart) return;\n\n    const deltaCol = player.position.x - newCol;\n    if (deltaCol > 0) {\n        for (let i = 0; i < deltaCol; i++) {\n            handlePlayerMovement('ArrowLeft', false);\n        }\n    } else {\n        for (let i = 0; i > deltaCol; i--) {\n            handlePlayerMovement('ArrowRight', false);\n        }\n    }\n}\n\nfunction handlePlayerMovement(keyCode: string, repeated: boolean): boolean {\n    if (paused.value) return false;\n\n    let newPosition = {\n        x: player.position.x,\n        y: player.position.y\n    };\n\n    const beforeMatrix = copyMatrix(player.shape.blocks);\n\n    let triggered = true;\n    let hardDropped = false;\n\n    switch (keyCode) {\n        case 'ArrowUp':\n            // Rotate clockwise\n            if (repeated) return true;\n            player.shape.rotate();\n\n            const playerMatrix = {\n                matrix: player.shape.blocks,\n                position: newPosition\n            };\n\n            if (board.collides(playerMatrix)) {\n                // Colliding with other blocks, try to reposition\n                const unstuckPos = getUnstuckPosition(playerMatrix, board.collides.bind(board));\n\n                if (!unstuckPos) {\n                    // Cannot unstuck, revert!\n                    player.shape.rotate(true);\n                } else {\n                    // Repositioned\n                    newPosition = unstuckPos;\n                }\n            }\n            break;\n        case 'ArrowRight':\n            // Move right\n            newPosition.x++;\n            break;\n        case 'ArrowDown':\n            // Soft drop\n            newPosition.y++;\n\n            // Add points to score\n            const sdPoints = settings.points.softDrop;\n            player.softDropPoints += sdPoints;\n            if (player.softDropPoints < settings.points.softDropMax) {\n                addScore(sdPoints);\n            }\n\n            break;\n        case 'ArrowLeft':\n            // Move left\n            newPosition.x--;\n            break;\n        case 'Space':\n            // Hard drop\n            if (repeated) return true;\n\n            let nextPos = newPosition;\n            let hdPoints = 0;\n\n            do {\n                nextPos = { x: nextPos.x, y: nextPos.y + 1 };\n                hdPoints += settings.points.hardDrop;\n            } while (!board.collides({\n                matrix: player.shape.blocks,\n                position: nextPos\n            }));\n\n            newPosition = { x: nextPos.x, y: nextPos.y - 1 };\n            addScore(Math.min(\n                hdPoints - settings.points.hardDrop,\n                settings.points.hardDropMax));\n\n            hardDropped = true;\n            break;\n        default:\n            triggered = false;\n            break;\n    }\n\n    let posChanged = !pointEquals(player.position, newPosition);\n\n    if (posChanged || hardDropped) {\n        const newMatrix = {\n            matrix: player.shape.blocks,\n            position: newPosition\n        };\n\n        if (!board.collides(newMatrix)) {\n            player.position = newPosition;\n        } else posChanged = false;\n\n        if (hardDropped\n            || keyCode === 'ArrowDown'\n            && board.collides(newMatrix)) {\n            placePiece();\n        }\n    }\n\n    const rotationChanged = !matrixEquals(player.shape.blocks, beforeMatrix);\n\n    if (posChanged || rotationChanged) {\n        stopLockTimeout();\n        panel.draw(getViewMatrix());\n    }\n\n    return triggered;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/key-handling.ts","import '../vendor/modernizr.min.js';\n\nexport default function loadTouchDetection(): void {\n    if (Modernizr.touchevents) {\n        const root = document.getElementsByTagName('html')[0];\n        root.classList.add('touch');\n\n        if (isMobileSafari()) {\n            root.classList.add('ios-safari');\n        }\n    }\n}\n\nfunction isMobileSafari(): boolean {\n    const ua = window.navigator.userAgent;\n    const iOS = !!ua.match(/iP(ad|od|hone)/i);\n    const webkit = !!ua.match(/WebKit/i);\n    return iOS && webkit && !ua.match(/CriOS/i) && !ua.match(/OPiOS/i);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/modernizr.ts","const settings = {\n\n    // Per drops per second\n    gameSpeed: 0.4,\n\n    points: {\n        // Amount of lines cleared at once\n        linesCleared: {\n            1: 40,\n            2: 100,\n            3: 300,\n            4: 1200\n        },\n\n        // Points per cell dropped\n        softDrop: 1,\n        hardDrop: 2,\n\n        // Max drop points per turn\n        softDropMax: 20,\n        hardDropMax: 40\n    },\n\n    // Seconds to wait before locking piece\n    placementTimeout: 0.5,\n\n    debug: {\n        // Draw full shape square\n        drawEmptyTiles: false,\n        emptyTileColor: '#f1f1f1'\n    }\n};\n\nexport default settings;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/settings.ts","import Matrix from '../interfaces/matrix';\nimport { ISize } from '../interfaces/size';\nimport drawGrid from '../services/draw-grid';\nimport drawMatrix from '../services/draw-matrix';\nimport { getMatrixSize } from '../services/matrix-calculations';\n\nexport default class Panel {\n    public readonly ctx: CanvasRenderingContext2D;\n    public readonly size: ISize;\n    public readonly pixelRatio: number;\n    public readonly canvas: HTMLCanvasElement;\n\n    constructor(id: string) {\n        const canvas = document.getElementById(id) as HTMLCanvasElement;\n        this.pixelRatio = devicePixelRatio || 1;\n\n        // Read canvas size\n        this.size = {\n            width: parseInt(canvas.getAttribute('width') as string, 10) * this.pixelRatio,\n            height: parseInt(canvas.getAttribute('height') as string, 10) * this.pixelRatio\n        };\n\n        // Fix scaling for small viewports\n        if (this.size.width !== canvas.offsetWidth) {\n            canvas.setAttribute('width', `${this.size.width}`);\n        }\n\n        if (this.size.height !== canvas.offsetHeight) {\n            canvas.setAttribute('height', `${this.size.height}`);\n        }\n\n        // Get drawing context\n        const ctx = canvas.getContext('2d');\n        if (!ctx) throw new Error('Context not found!');\n        this.ctx = ctx;\n        this.canvas = canvas;\n    }\n\n    public draw(matrix: Matrix): void {\n        this.clear();\n        drawGrid(this, getMatrixSize(matrix));\n        drawMatrix(this, matrix);\n    }\n\n    private clear(): void {\n        this.ctx.clearRect(0, 0, this.size.width, this.size.height);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/components/panel.ts","import Matrix from '../interfaces/matrix';\nimport IPoint from '../interfaces/point';\nimport IPositionedMatrix from '../interfaces/positioned-matrix';\nimport { ISize } from '../interfaces/size';\nimport { matrixContains, matrixesColliding, mergeMatrixes } from '../services/matrix-calculations';\nimport Shape from './shape';\n\nexport default class Board {\n    private _blocks: Matrix;\n    public get blocks() { return this._blocks; }\n\n    public readonly size: ISize;\n\n    constructor(size: ISize) {\n        this.size = size;\n        this.clear();\n    }\n\n    public place(shape: Shape, position: IPoint): void {\n        mergeMatrixes(this.blocks, {\n            matrix: shape.blocks,\n            position\n        }, this.blocks);\n    }\n\n    public clearFullLines(): number {\n        const fullRows = this.getFullLines();\n        fullRows.forEach(row => this.deleteRow(row));\n        return fullRows.length;\n    }\n\n    private getFullLines(): number[] {\n        const rowCount = this._blocks[0].length;\n        const incompleteRows = new Array<boolean>(rowCount - 1);\n\n        rows:\n        for (let y = 0; y < rowCount; y++) {\n            for (const col of this._blocks) {\n                if (!col[y]) {\n                    incompleteRows[y] = true;\n                    continue rows;\n                }\n            }\n        }\n\n        const result: number[] = [];\n        for (let row = 0; row < rowCount; row++) {\n            if (!incompleteRows[row]) result.push(row);\n        }\n        return result;\n    }\n\n    private deleteRow(row: number): void {\n        this._blocks.forEach(col => {\n            col.splice(row, 1);\n            col.unshift(undefined);\n        });\n    }\n\n    public clear(): void {\n        this._blocks = [];\n        for (let x = 0; x < this.size.width; x++) {\n            this._blocks[x] = new Array(this.size.height);\n        }\n    }\n\n    public contains(matrix: IPositionedMatrix): boolean {\n        return matrixContains(this._blocks, matrix);\n    }\n\n    public collides(matrix: IPositionedMatrix): boolean {\n        return !this.contains(matrix)\n            || matrixesColliding(this.blocks, matrix);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/board.ts","import Matrix from '../interfaces/matrix';\nimport { rotateMatrix } from '../services/matrix-calculations';\n\nexport default class Shape {\n    private _blocks: Matrix;\n    public get blocks() {\n        return this._blocks;\n    }\n\n    constructor(blocks: Matrix) {\n        this._blocks = blocks;\n    }\n\n    public rotate(reverse = false): void {\n        this._blocks = rotateMatrix(this._blocks, reverse);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shape.ts","import { xyMatrix } from '../../services/matrix-calculations';\nimport { Color } from '../color';\nimport Shape from '../shape';\n\nconst c = Color.Blue;\n\nexport default class I extends Shape {\n    constructor() {\n        super(xyMatrix([\n            [0, 0, 0, 0],\n            [c, c, c, c],\n            [0, 0, 0, 0],\n            [0, 0, 0, 0]\n        ]));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/i.ts","import { xyMatrix } from '../../services/matrix-calculations';\nimport { Color } from '../color';\nimport Shape from '../shape';\n\nconst c = Color.Pink;\n\nexport default class J extends Shape {\n    constructor() {\n        super(xyMatrix([\n            [c, 0, 0],\n            [c, c, c],\n            [0, 0, 0]\n        ]));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/j.ts","import { xyMatrix } from '../../services/matrix-calculations';\nimport { Color } from '../color';\nimport Shape from '../shape';\n\nconst c = Color.Orange;\n\nexport default class L extends Shape {\n    constructor() {\n        super(xyMatrix([\n            [0, 0, c],\n            [c, c, c],\n            [0, 0, 0]\n        ]));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/l.ts","import { xyMatrix } from '../../services/matrix-calculations';\nimport { Color } from '../color';\nimport Shape from '../shape';\n\nconst c = Color.Yellow;\n\nexport default class O extends Shape {\n    constructor() {\n        super(xyMatrix([\n            [c, c],\n            [c, c]\n        ]));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/o.ts","import { xyMatrix } from '../../services/matrix-calculations';\nimport { Color } from '../color';\nimport Shape from '../shape';\n\nconst c = Color.Red;\n\nexport default class S extends Shape {\n    constructor() {\n        super(xyMatrix([\n            [0, c, c],\n            [c, c, 0],\n            [0, 0, 0]\n        ]));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/s.ts","import { xyMatrix } from '../../services/matrix-calculations';\nimport { Color } from '../color';\nimport Shape from '../shape';\n\nconst c = Color.Purple;\n\nexport default class T extends Shape {\n    constructor() {\n        super(xyMatrix([\n            [c, c, c],\n            [0, c, 0],\n            [0, 0, 0]\n        ]));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/t.ts","import { xyMatrix } from '../../services/matrix-calculations';\nimport { Color } from '../color';\nimport Shape from '../shape';\n\nconst c = Color.Green;\n\nexport default class Z extends Shape {\n    constructor() {\n        super(xyMatrix([\n            [c, c, 0],\n            [0, c, c],\n            [0, 0, 0]\n        ]));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/shapes/z.ts","import IPoint, { clonePoint } from '../interfaces/point';\nimport getRandomShape from '../services/random-shape';\nimport Shape from './shape';\n\nexport default class Player {\n    private _shape: Shape;\n    public get shape() {\n        return this._shape;\n    }\n\n    public position: IPoint;\n    private _startingPos: IPoint;\n\n    public softDropPoints = 0;\n\n    constructor(startingPosition: IPoint) {\n        this._startingPos = startingPosition;\n        this.reset();\n    }\n\n    public reset(): void {\n        this.position = clonePoint(this._startingPos);\n        this._shape = getRandomShape();\n        this.softDropPoints = 0;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/models/player.ts","export default class Property<T> {\n    private _value: T;\n\n    public get value() {\n        return this._value;\n    }\n\n    public set value(x) {\n        this._value = x;\n    }\n\n    constructor(initialValue: T) {\n        this._value = initialValue;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/property.ts","import Panel from '../components/panel';\nimport Board from '../models/board';\nimport Player from '../models/player';\nimport Property from './property';\n\nconst boardSize = {\n    width: 10,\n    height: 22\n};\n\nexport const player = new Player({ x: boardSize.width / 2 - 1, y: 2 });\nexport const panel = new Panel('game');\nexport const board = new Board(boardSize);\nexport const paused = new Property(false);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/storage.ts","export default class Timer {\n    private _handle: number | void;\n    private readonly _handler: () => void;\n    private readonly _interval: number;\n    private readonly _repeat: boolean;\n    private _running = false;\n\n    public get running() { return this._running; }\n\n    constructor(handler: () => void, interval: number, repeat = true) {\n        this._handler = handler;\n        this._interval = interval;\n        this._repeat = repeat;\n    }\n\n    public start(executeOnInit = false): void {\n        if (executeOnInit) {\n            this._handler();\n            if (!this._repeat) return;\n        }\n\n        this.stop();\n\n        this._handle = (\n            this._repeat\n                ? setInterval\n                : setTimeout\n        )(() => {\n            this._handler();\n            this._running = false;\n        }, this._interval);\n        this._running = true;\n    }\n\n    public stop(): void {\n        this._handle = (\n            this._repeat\n                ? clearInterval\n                : clearTimeout\n        )(this._handle as number);\n        this._running = false;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/timer.ts","export default class UniqueArray<T> {\n    private _array: T[] = [];\n\n    public get count() { return this._array.length; }\n    public get values() { return this._array; }\n\n    public add(value: T): void {\n        if (!this.contains(value)) {\n            this._array.push(value);\n        }\n    }\n\n    public remove(value: T): void {\n        const index = this._array.indexOf(value);\n        if (index >= 0) {\n            this._array.splice(index, 1);\n        }\n    }\n\n    public contains(value: T): boolean {\n        return this._array.indexOf(value) >= 0;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/services/unique-array.ts","import loadPlayerScore from './components/player-score';\nimport { setLoopSpeed } from './services/gameloop';\nimport handleInput from './services/key-handling';\nimport loadTouchDetection from './services/modernizr';\nimport handlePauseGame from './services/pause-game';\nimport settings from './settings';\n\nloadTouchDetection();\nsetLoopSpeed(settings.gameSpeed);\nhandleInput();\nloadPlayerScore();\nhandlePauseGame();\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/index.ts","import { getHighScore } from '../services/player-highscore';\nimport { onScoreChange } from '../services/player-score';\n\nexport default function loadPlayerScore(): void {\n    const scoreEl = document.getElementById('player-score') as HTMLSpanElement;\n    const highScore = document.getElementById('player-highscore') as HTMLSpanElement;\n\n    onScoreChange(score => {\n        scoreEl.textContent = score.toLocaleString();\n        highScore.textContent = getHighScore().toLocaleString();\n    }, true);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/components/player-score.ts","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/hammerjs/hammer.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}